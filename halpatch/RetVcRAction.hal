external procedure CalcPrice(val,val,val,var val,Integer);
external function Integer MakeTransFromRet(record TRVc,record RetVc,Boolean);
external updating procedure RetRowInvalidateBuyBack(record RetVc,row RetVc);
external procedure RetUpdateFIFO(var record RetVc);
external procedure GetPRInvSep(string,var Integer,var Integer);
external function Integer GetItemTypeGroup(string,var string);
external procedure GetPRName(string, var string);
external function Boolean CanOKStockRecord();
external updating procedure RetUpdateSerialNr(record RetVc);
external updating procedure AddTTrans_RetVc(record TRVc,record RetVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure RetUpdateCostPrice(record RetVc);
external updating procedure RetUpdateItemHist(record RetVc);
external updating procedure RetUpdateStock(record RetVc,Boolean,Boolean);
external procedure SetORFlags(record ORVc);
external procedure ORSumup(var record ORVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure B1ToB2Val(val,val,val,var val);
external updating procedure UpdateLocOKNr(string,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure RetSumUp(var record RetVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean ExistStockTrans(string ,Date,var Integer,string,LongInt,Integer);
external function Integer SerialNrOnThisRet(record RetVc,string,string);
external function Boolean SerialNrAvail2(string,string,val);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestRetVc(LongInt,Date,var Boolean);
external function LongInt GetCurUserLastNr(string);

global
updating function LongInt RetVcRecordCheck(var record RetVc Retp,record RetVc Ret2p,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  record MainStockBlock MSb;
  record MainWHMBlock MainWHMb;
  record LocationVc LocRec;
  record SRBlock SRRec;
  record INVc INr;
  record ORVc ORr;
  row ORVc ORrw;
  row RetVc Retrw;
  row RetVc Ret2rw;
  record RetVc locRetr;
  record TRVc gTRp;
  Integer i,j,rwcnt,orrwcnt;
  Integer insertmode,updatemode;
  Integer errcode;
  LongInt newnr,oldnr;
  Boolean transf,gentrans;
  val t;
  LongInt sernr;
  string 20 location;
  val w,h,d,m;
  record INVc IN2r;
  string 255 tstr;
  record SHVc SHr;
  row SHVc SHrw;
  
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  gentrans = true;
  BlockLoad(SRRec);
  BlockLoad(MSb);
  BlockLoad(MainWHMb);
  transf = false;
  if (Retp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (Ret2p.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if (Retp.SerNr<=0) and (Ret2p.OKFlag==0) then begin
      Retp.SerNr = Ret2p.SerNr;
    end;
  end;      
  oldnr = Retp.SerNr;
  if (Retp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("RetVc");
    if (newnr!=-1) then begin
       newnr = SRRec.LastPurNr;
    end;
    Retp.SerNr = NextSerNr("RetVc",Retp.TransDate,newnr,false,"");  
  end;
  ORr.SerNr = Retp.OrdNr;
  if (ReadFirstMain(ORr,1,true)==false) then begin
    RecordCheckError(1252,"",-1,"SerNr");      
    res = -1;
    goto LRetVcRecordCheck;
  end;
  orrwcnt = MatRowCnt(ORr);
  if ((stat==insertmode) or (Retp.SerNr!=Ret2p.SerNr)) then begin
    locRetr.SerNr = Retp.SerNr;
    if (ReadFirstMain(locRetr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LRetVcRecordCheck;
    end;
  end;
  if (SerNrTestRetVc(Retp.SerNr,Retp.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto LRetVcRecordCheck;
  end;
  if (Date2Test("RetVc",Retp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LRetVcRecordCheck;
  end; 
  if (blank(Retp.Location)) then begin
    if (MSb.requireLocation!=0) then begin
      RecordCheckError(1058,Retp.Location,-1,"Location");      
      res = -1;
      goto LRetVcRecordCheck;
    end;
  end;
  errcode = CheckRates(Retp.CurncyCode,Retp.FrRate,Retp.ToRateB1,Retp.ToRateB2,Retp.BaseRate1,Retp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LRetVcRecordCheck;
  end;              
  rwcnt = MatRowCnt(Retp);
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(Retp,i,Retrw);
    if (Retrw.OrdRow==-1) then begin 
// we should be allowed to return items, eg invoice, 
//or better order an structured item (no exploding)
//and return goods, we need to return parts into stock and it is not possible!
//      RecordCheckError(1326,Retrw.ArtCode,i,"ArtCode");
//      res = -1;
//      goto LRetVcRecordCheck;
      if (nonblank(Retrw.ArtCode)) then begin
        location = Retrw.Location;
        if (blank(location)) then begin location = Retp.Location; end;
        if (blank(location)) then begin location = MSb.MainStock; end;
        if (nonblank(location)) then begin
          LocRec.Code = location;
          if (ReadFirstMain(LocRec,1,true)==false) then begin
            RecordCheckError(1120,Retp.Location,-1,"Location");      
            res = -1;
            goto LRetVcRecordCheck;
          end;
        end;  
        if (ReadFirstItem(Retrw.ArtCode,INr,true,true)==false) then begin
          RecordCheckError(1120,Retrw.ArtCode,i,"ArtCode");      
          res = -1;
          goto LRetVcRecordCheck;
        end;
        if (Retrw.OrdRow<0) and (Retrw.SHRow<0) then begin 
          if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
            if (blank(Retrw.SerialNr)) then begin
              RecordCheckError(1239,"",i,"SerialNr");      
              res = -1;
              goto LRetVcRecordCheck;
            end;
          end;
        end;
      end;  
      goto LSKIPROW;
    end;
    if (check>0) then begin
    
     // Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 12 October 2011 10:43:58
	 location = Retrw.Location;
      if (blank(location)) then begin location = Retp.Location; end;
      if (blank(location)) then begin location = MSb.MainStock; end;
      if (nonblank(location)) then begin
        LocRec.Code = location;
        if (ReadFirstMain(LocRec,1,true)==false) then begin
          RecordCheckError(1120,Retp.Location,-1,"Location");      
          res = -1;
          goto LRetVcRecordCheck;
        end;
      end;
	// Edit End ---------------------------------------------- Edit End
	
    
      if (Retrw.OrdRow<orrwcnt) then begin
        MatRowGet(ORr,Retrw.OrdRow,ORrw);
        if (ORrw.ArtCode!=Retrw.ArtCode) then begin
          RecordCheckError(1120,Retrw.ArtCode,i,"ArtCode");      
          res = -1;
          goto LRetVcRecordCheck;
        end;
        if (ORrw.Shipd2<Retrw.Quant) then begin
          RecordCheckError(1303," " & Retrw.Quant,i,"Quant");      
          res = -1;
          goto LRetVcRecordCheck;
        end;
      end;
      if (Retp.SHNr>0) and (Retrw.SHRow>=0) then begin
        SHr.SerNr = Retp.SHNr;
        if (ReadFirstMain(SHr,1,true)) then begin
          MatRowGet(SHr,Retrw.SHRow,SHrw);
          if (Retrw.SerialNr!=SHrw.SerialNr) then begin
            RecordCheckError(1132," " & SHrw.SerialNr,i,"SerialNr");      
            res = -1;
            goto LRetVcRecordCheck;
          end;
        end;      
      end;
      if (LocRec.RequirePos!=0) then begin
        if (Retrw.Quant>0) and (blank(Retrw.PosCode)) then begin
          RecordCheckError(1058,"",i,"PosCode"); 
          res = -1;
          goto LRetVcRecordCheck;
        end;
      end;
    end;
    if (nonblank(Retrw.ArtCode)) then begin
      if (ReadFirstItem(Retrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1120,Retrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LRetVcRecordCheck;
      end;
    end;  
    if (Retrw.Quant<0) then begin
      RecordCheckError(1574,"",i,"Quant");      
      res = -1; 
      goto LRetVcRecordCheck;
    end;    
    if (nonblank(Retrw.PosCode)) then begin
      w = 0;
      h = 0;
      d = 0;
      m = Retrw.Quant/INr.QtyonPallet;
      if (INr.PalletWidth!=0) then begin w = w + INr.PalletWidth*m; end;
      if (INr.PalletHeight!=0) then begin h = h + INr.PalletHeight*m; end;
      if (INr.PalletDepth!=0) then begin d = d + INr.PalletDepth*m; end;
      for (j=0;j<i;j=j+1) begin
        MatRowGet(Retp,j,Ret2rw);
        if (Ret2rw.PosCode==Retrw.PosCode) then begin
          if (ReadFirstItem(Ret2rw.ArtCode,IN2r,true,true)) then begin
            if (IN2r.PalletWidth!=0) then begin
              w = w + IN2r.PalletWidth*m;
            end;
            if (IN2r.PalletHeight!=0) then begin
              h = h + IN2r.PalletHeight*m;
            end;
            if (IN2r.PalletDepth!=0) then begin
              d = d + IN2r.PalletDepth*m;
            end;
          end;
        end;
      end;    
      errcode = CheckPosition(Retrw.PosCode,location,LocRec.RequirePos,w,h,d);
      if (errcode!=0) then begin
        RecordCheckError(1120,Retrw.PosCode,i,"PosCode");      
        res = -1;
        goto LRetVcRecordCheck;
      end;    
    end;
    
/*
    if (GetVATLaw()==vatEstonian) then begin
      if (INr.ItemType!=1) then begin
        res = SetREFErr(1301,Retrw.ArtCode,offset(RetView,Math),i,offset(RetRowType,ArtCode));
        goto LRetVcRecordCheck;
      end;
    end;
    if (GetVATLaw()==vatPolish) then
      if (INr.ItemType!=1) then begin
        res = SetREFErr(1301,Retrw.ArtCode,offset(RetView,Math),i,offset(RetRowType,ArtCode));
        goto LRetVcRecordCheck;
      end;
*/
    if (nonblank(Retrw.ArtCode)) then begin
      if (Retrw.Quant==0) then begin
        RecordCheckError(1058,"",i,"Quant");      
        res = -1;
        goto LRetVcRecordCheck;
      end;
    end;  
    if (transf) then begin
    if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
      if (blank(Retrw.SerialNr)) then begin
        RecordCheckError(1239,"",i,"SerialNr");      
        res = -1;
        goto LRetVcRecordCheck;
      end;
      if (IsSerialNrCorrect(Retrw.SerialNr)==false) then begin
        RecordCheckError(1209,Retrw.SerialNr,i,"SerialNr");      
        res = -1; 
        goto LRetVcRecordCheck;
      end;        
      switch (INr.SerNrf) begin
        case 1:  // serial nr. 
          for (j=0;j<i;j=j+1) begin            
            MatRowGet(Retp,j,Ret2rw);
            if ((Retrw.ArtCode==Ret2rw.ArtCode) and
                (Retrw.SerialNr==Ret2rw.SerialNr)) then begin
              RecordCheckError(1241,"",i,"SerialNr");      
              res = -1;
              goto LRetVcRecordCheck;
            end;
          end;
          if (SerialNrAvail2(Retrw.ArtCode,Retrw.SerialNr,Retrw.Quant)==true) then begin
            RecordCheckError(1241,"",i,"SerialNr");      
            res = -1;
            goto LRetVcRecordCheck;
          end;
          if (Retrw.Quant>1) then begin
            RecordCheckError(1242,"",i,"Quant");      
            res = -1;
            goto LRetVcRecordCheck;
          end;
          if (SerialNrOnThisRet(Retp,Retrw.ArtCode,Retrw.SerialNr)>1) then begin
            RecordCheckError(1242,"",i,"Quant");      
            res = -1;
            goto LRetVcRecordCheck;
          end;
        case 2:  // batch nr. 
      end;
    end;
LSKIPROW:;
    end;
  end;
  if (Retp.UpdStockFlag==0) then begin//no transaction when not updating stock
    transf = false;
  end;
  if (check and Retp.UpdStockFlag!=0) then begin
    RetUpdateFIFO(Retp);
  end;
  if (transf and Retp.UpdStockFlag!=0) then begin
    if (stat==updatemode) then begin
      sernr = Ret2p.SerNr;
    end;
    if (MSb.Chronology!=0) then begin 
      if (ExistStockTrans(Retp.Location,Retp.TransDate,errcode,"RetVc", sernr,MSb.Chronology)) then begin
        RecordCheckError(errcode,"",-1,"TransDate");      
        res = -1;
        goto LRetVcRecordCheck;
      end;
    end;
    if (CanOKStockRecord==false) then begin
      RecordCheckError(1766,"",-1,"SerNr");      
      res = -1; 
      goto LRetVcRecordCheck;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromRet(gTRp,Retp,false);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto LRetVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==RetYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LRetVcRecordCheck;
      end;
      SaveTrans(gTRp);
      AddTTrans_RetVc(gTRp,Retp);
    end;    
  end;
LRetVcRecordCheck:;  
  if (res!=0) then begin
    Retp.SerNr = oldnr;
  end;
  RetVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt RetVcRecordSave(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN 
  LongInt res;
  val LocOKNr;

  if ((Retr.OKFlag!=0) and (Retr.UpdStockFlag!=0)) then begin
    LocOKNr = Retr.LocOKNr;
    UpdateLocOKNr(Retr.Location,LocOKNr);
    Retr.LocOKNr = LocOKNr;
  end;
  RetVcRecordSave = res;
  RETURN;
END;

updating procedure UpdateOrderFromRet(record RetVc Retp,record RetVc Ret2p,Boolean sh2only)
BEGIN
  Integer i,rwcnt;
  row RetVc Retrw;
  record ORVc oldORr;
  record ORVc ORr;
  row ORVc ORrw;
  Integer orw,orcnt;
  val negqty,t;
  record GeneralOptionBlock GenOptr;
  
  BlockLoad(GenOptr);
  if (RecordValid(Retp)) then begin
    ORr.SerNr = Retp.OrdNr;
  end else begin
    ORr.SerNr = Ret2p.OrdNr;
  end;
  if (ReadFirstMain(ORr,1,true)) then begin
    RecordCopy(oldORr,ORr);
    orcnt = MatRowCnt(ORr);
    if (RecordValid(Ret2p)) then begin
      rwcnt = MatRowCnt(Ret2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Ret2p,i,Retrw);
        if (Retrw.OrdRow!=-1) then begin
          orw = Retrw.OrdRow;
          if (orw<orcnt) then begin
            MatRowGet(ORr,orw,ORrw);
            negqty = Retrw.Quant;
            if (sh2only==false) then begin
              if (Ret2p.OKFlag!=0) then begin
                ORrw.Shipd1 = ORrw.Shipd1 - negqty;
              end;
            end;
            if (Ret2p.OKFlag!=0) then begin
              ORrw.Shipd2 = ORrw.Shipd2 - negqty;
            end;
            if (Ret2p.Type==1) then begin
              if (Ret2p.OKFlag!=0) then begin            
                ORrw.Quant = ORrw.Quant - negqty;
              end;
            end;
            if (ORrw.Quant==0) then begin ORrw.Quant = blankval; end;
            if (ORrw.Shipd1==0) then begin ORrw.Shipd1 = blankval; end;
            if (ORrw.Shipd2==0) then begin ORrw.Shipd2 = blankval; end;
//            p = ORrw.Price; 
//            CalcPrice(ORrw.BasePrice,ORrw.PriceFactor,ORrw.vRebate,p,UseDiscount);
//            ORrw.Price = p;  
            CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,t,GenOptr.UseDiscount);
            ORrw.Sum = t;
            MatRowPut(ORr,orw,ORrw);
          end;
        end;
      end;
    end;
    if (RecordValid(Retp)) then begin
    rwcnt = MatRowCnt(Retp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Retp,i,Retrw);
        if (Retrw.OrdRow!=-1) then begin
          orw = Retrw.OrdRow;
          if (orw<orcnt) then begin
            MatRowGet(ORr,orw,ORrw);
            negqty = -Retrw.Quant;
            if (sh2only==false) then begin
              if (Retp.OKFlag!=0) then begin
                ORrw.Shipd1 = ORrw.Shipd1 + negqty;
                ORrw.Shipd2 = ORrw.Shipd2 + negqty;
                if (Retp.Type==1) then begin
                  if (Retp.OKFlag!=0) then begin
                    ORrw.Quant = ORrw.Quant + negqty;
                  end;
                end;  
              end;
            end;
            ORrw.SerialNr = Retrw.SerialNr;
            if (ORrw.Quant==0) then begin ORrw.Quant = blankval; end;
            if (ORrw.Shipd1==0) then begin ORrw.Shipd1 = blankval; end;
            if (ORrw.Shipd2==0) then begin ORrw.Shipd2 = blankval; end;
//            p = ORrw.Price; 
//            CalcPrice(ORrw.BasePrice,ORrw.PriceFactor,ORrw.vRebate,p,UseDiscount);
//            ORrw.Price = p;  
            CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,t,GenOptr.UseDiscount);
            ORrw.Sum = t;
            MatRowPut(ORr,orw,ORrw);
          end;
        end;
      end;
    end;
    ORSumup(ORr);            
    SetORFlags(ORr);
    if (RecordUpdate(oldORr,ORr,false)==0) then begin end;
  end;
  RETURN;
END;

updating procedure SaveReturn(record RetVc Retp,record RetVc Ret2p,Boolean saverec)
BEGIN  
  if (Retp.OKFlag!=0) then begin
    RetUpdateStock(Retp,false,false);
    RetUpdateCostPrice(Retp);    
    RetUpdateItemHist(Retp);
    RetUpdateSerialNr(Retp);
  end;
  if (Retp.OrdNr!=-1) then begin
    UpdateOrderFromRet(Retp,Ret2p,false);
  end;
  RETURN;
END;

global
updating function LongInt RetVcRecordSaveAfter(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN 
  LongInt res;

  if (Retr.OrdNr!=-1) then begin
//    UpdateOrderFromRet(Retr,Ret2r,false); done in SaveReturn
  end;
  SaveReturn(Retr,Ret2r,false);
  RetVcRecordSaveAfter = res;
  RETURN;
END;

updating procedure RetCreateTBIV(record RetVc Retp,Integer rownr,row RetVc retrp,Boolean setinvd,Integer UseDiscount)
BEGIN
  record TBIVVc TBIVr;
  record ORVc ORr;
  row ORVc ORrw;
  record TBIVVc locTBIVr;
  record INVc INr;
  Integer i1,i2;
  val t;
  string 255 tstr;

  ORr.SerNr = Retp.OrdNr;
  if (ReadFirstMain(ORr,1,true)==false) then begin goto LRetCreateTBIV; end;
  if (blank(ORr.PRCode)) then begin goto LRetCreateTBIV; end;
  ClearRow(ORr,ORrw,1);
  if (MatRowCnt(ORr)>=retrp.OrdRow) then begin
    MatRowGet(ORr,retrp.OrdRow,ORrw);
  end;
  TBIVr.oVc = 6;
  TBIVr.SerNr = Retp.SerNr;
  TBIVr.Row = rownr;
  TBIVr.TransDate = Retp.TransDate;
  TBIVr.EMCode = "";
  TBIVr.PRCode = ORr.PRCode;
  GetPRName(TBIVr.PRCode,tstr);
  TBIVr.PRName = tstr;
  TBIVr.ArtCode = retrp.ArtCode;
  TBIVr.ItemType = GetItemTypeGroup(TBIVr.ArtCode,TBIVr.INGroup);
  if (TBIVr.ItemType==0) then begin TBIVr.ItemType = 5; end;
  TBIVr.Objects = ORr.Objects;
  TBIVr.Qty = -retrp.Quant;
  TBIVr.Comment = Retp.Comment;
  GetPRInvSep(ORr.PRCode,i1,i2);
  TBIVr.InvSeparately = i1;
  TBIVr.InvQty = -retrp.Quant;
  TBIVr.Invoice = -1;
  if (setinvd) then begin TBIVr.Invoice = -2; end;
  TBIVr.Price = ORrw.Price;
  if (TBIVr.Price==0) then begin
    INr.Code = retrp.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin TBIVr.Price = INr.UPrice1; end;
  end;
  TBIVr.Discount = ORrw.vRebate;
  CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,UseDiscount);
  TBIVr.Sum = t;
  TBIVr.GP = blankval;
  TBIVr.CostPrice = retrp.CostPrice;
  TBIVr.GP = TBIVr.CostPrice*TBIVr.Qty;
  TBIVr.GP = TBIVr.Sum - TBIVr.GP;
  RecordCopy(locTBIVr,TBIVr);  
  if (ReadFirstMain(locTBIVr,0,true)==false) then begin
    if (RecordInsert(TBIVr,false)) then begin
    end;
  end;
LRetCreateTBIV:;
  RETURN;
END;

updating procedure RetOK(record RetVc Retp)
BEGIN
  row RetVc Retrw;
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptr;
  
  if (Retp.OKFlag==0) then begin goto LRetOK; end;
  BlockLoad(GenOptr);
  if (RecordValid(Retp)) then begin
    rwcnt = MatRowCnt(Retp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Retp,i,Retrw);
      if (Retrw.Quant!=0) then begin
        RetCreateTBIV(Retp,i,Retrw,false,GenOptr.UseDiscount);
        RetRowInvalidateBuyBack(Retp,Retrw);
      end;
    end;
  end;
LRetOK:;
  RETURN;
END;

global
updating function LongInt RetVcRecordUpdate(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN 
  LongInt res;
  val LocOKNr;

  if ((Retr.OKFlag!=0) and (Ret2r.OKFlag==0)) then begin  
    if (Retr.UpdStockFlag!=0) then begin
      LocOKNr = Retr.LocOKNr;
      UpdateLocOKNr(Retr.Location,LocOKNr);
      Retr.LocOKNr = LocOKNr;
    end;
  end;
  RetVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt RetVcRecordUpdateAfter(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN 
  LongInt res;
  
  if ((Retr.OKFlag!=0) and (Ret2r.OKFlag!=0)) then begin
  end else begin
    if ((Retr.OKFlag!=0) and (Ret2r.OKFlag==0)) then begin
      RetUpdateStock(Retr,false,false);
      RetUpdateCostPrice(Retr);
      RetUpdateItemHist(Retr);
      RetUpdateSerialNr(Retr);
      RetOK(Retr);
    end;
    if (Retr.OrdNr!=-1) then begin
      UpdateOrderFromRet(Retr,Ret2r,false);
    end;
  end;
  RetVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt RetVcRecordRemoveTest(var record RetVc Retr,record RetVc Ret2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (Retr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LRetVcRecordRemoveTest;
  end;
  if (Retr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LRetVcRecordRemoveTest:;
  RetVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt RetVcRecordRemove(var record RetVc Retr,record RetVc Ret2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  if (Retr.OrdNr!=-1) then begin
    UpdateOrderFromRet(Ret2r,Retr,false);
  end;
  if (Retr.OKFlag!=0) then begin
    RetUpdateStock(Retr,true,false);
  end;
LRetVcRecordRemove:;
  RetVcRecordRemove = res; 
  RETURN;
END;

/*global
updating function LongInt RetVcRecordImport(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  Integer i,rwcnt;
  row RetVc Retrw;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = Retr.CurncyCode;
    fr = Retr.FrRate;
    to1 = Retr.ToRateB1;
    to2 = Retr.ToRateB2;
    br1 = Retr.BaseRate1;
    br2 = Retr.BaseRate2;
    ConvertToDualBase(curncy,Retr.TransDate,fr,to1,to2,br1,br2,t,false);
    Retr.CurncyCode = curncy;
    Retr.FrRate = fr;
    Retr.ToRateB1 = to1;
    Retr.ToRateB2 = to2;
    Retr.BaseRate1 = br1;
    Retr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    curncy = Retr.CurncyCode;
    fr = Retr.FrRate;
    to1 = Retr.ToRateB1;
    to2 = Retr.ToRateB2;
    br1 = Retr.BaseRate1;
    br2 = Retr.BaseRate2;
    SwapM4Val(br1,br2);
    SwapM4Val(to1,to2);
    rwcnt = MatRowCnt(Retr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Retr,i,Retrw);
      B1ToB2Val(Retrw.UPrice,br1,br2,t);
      Retrw.UPrice = t;
      if (Mid(Retrw.Extra,len(Retrw.Extra)-1,1)!="%") then begin
        t = StringToVal(Retrw.Extra,M45Val);
        B1ToB2Val(t,br1,br2,t);
        Retrw.Extra = t;
      end;
      B1ToB2Val(Retrw.CostPrice,br1,br2,t);
      Retrw.CostPrice = t;
      MatRowPut(Retr,i,Retrw);
    end;
    Retr.CurncyCode = curncy;
    Retr.FrRate = fr;
    Retr.ToRateB1 = to1;
    Retr.ToRateB2 = to2;
    Retr.BaseRate1 = br1;
    Retr.BaseRate2 = br2;
    RetSumUp(Retr);    
  end;  
  RetVcRecordImport = res;
  RETURN;
END;*/

global
updating function LongInt RetVcRecordImportAfter(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  if (Retr.OKFlag!=0) then begin
    RetUpdateSerialNr(Retr);
    if (ImportingTextBackup==false and CanOKStockRecord==true) then begin
      RetUpdateStock(Retr,false,false);
      RetUpdateCostPrice(Retr);    
      RetUpdateItemHist(Retr);
    end;
  end;
  RetVcRecordImportAfter = res;
  RETURN;
END;
