external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure RebuildStockMn(record RcVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,
                                                string,Boolean,var Boolean,string,var string,var val,string);
external function Boolean PasteItemInSVO(var record SVOVc,Integer);
external function Boolean PasteCUInSVO(var record SVOVc,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global updating procedure ARRStock()
begin
record RcVc RepSpec;

  ReportDefaults(RepSpec,"RebuildStockVClass");
  RepSpec.repname = "RebuildStockMn";
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  RunMaintenance(RepSpec);

return;
end;

global
procedure MyMyPrintSMRecord(record SMVc SMr,Integer type,Val Curr)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  string 255 dblstr;
 
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i= i+1) begin
    MatRowGet(SMr,i,SMrw);
    StartFormat(15);
    OutLongInt(0,0,SMr.SerNr,false);
    OutDate(100,0,SMr.TransDate,false);
    OutString(200,0,SMr.RefStr,false);
    switch (type)  begin
      case 1: dblstr = "DblAT2UnitVc";
    end;
    OutString(280,dblstr,SMr.Comment,false);
    OutString(1,0,SMr.Sign,true);
    EndFormat;
    rwcnt = MatRowCnt(SMr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      StartFormat(15);
      OutString(20,0,SMrw.AccNumber,false);
      OutString(80,0,SMrw.Objects,false);
      OutString(170,0,SMrw.Comment,false);
      OutVal(380,0,round(SMrw.DebVal*Curr,0),M4Val,true);
      OutVal(465,0,round(SMrw.CredVal*Curr,0),M4Val,true);
      OutString(480,0,SMrw.VATCode,true);
      EndFormat;
    end;
    Black_Divider(300,480);
    StartFormat(15);
    OutVal(380,0,round(SMr.DSum*Curr,0),M4Val,true);
    OutVal(465,0,round(SMr.CSum*Curr,0),M4NegVal,true);
    EndFormat;    
  end;
  Gray_Divider(0,1);
  RETURN;
END;

Global updating procedure MyConvertCur(var record CashVc Cashr)
BEGIN
integer i,rwcnt;
row CashVc Cashrw;
val frrate,to1,to2,br1,br2;
date curdate;
String 5 curcode;
record POSCurncyBlock PCb;// Edit ************************** Wednesday, 13 April 2011 12:27:35

curdate=Cashr.TransDate;
  blockLoad(PCb);// Edit ************************** Wednesday, 13 April 2011 12:25:34
  curcode=PCb.CurncyCode;// Edit ************************** Wednesday, 13 April 2011 12:29:19
//curcode="UAH";

GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
to1=to1*100;
rwcnt=MatrowCnt(Cashr);
For (i=0;i<rwcnt;i=i+1) begin
Matrowget(Cashr,i,Cashrw);

Cashrw.Amount=round(Cashrw.Amount*to1/frrate/100,DefaultCurRoundoff);
MatRowPut(Cashr,i,Cashrw);
end;
Cashr.Total=round(Cashr.Total*to1/frrate/100,defaultcurroundoff);

RecordStore(Cashr,true);

RETURN;
END;


Global updating procedure MyConvertCurBal(var record CashierBalVc Cashr)
BEGIN
integer i,rwcnt;
row CashierBalVc Cashrw;
val frrate,to1,to2,br1,br2;
date curdate;
String 5 curcode;
record POSCurncyBlock PCb;// Edit ************************** Wednesday, 13 April 2011 12:27:35


curdate=Cashr.TransDate;
blockLoad(PCb);// Edit ************************** Wednesday, 13 April 2011 12:25:34
  curcode=PCb.CurncyCode;// Edit ************************** Wednesday, 13 April 2011 12:29:19
//curcode="UAH";

GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
to1=to1*100;
rwcnt=MatrowCnt(Cashr);
For (i=0;i<rwcnt;i=i+1) begin
Matrowget(Cashr,i,Cashrw);

Cashrw.Amount=round(Cashrw.Amount*to1/frrate/100,defaultcurroundoff);
MatRowPut(Cashr,i,Cashrw);
end;
Cashr.EndBal=round(Cashr.EndBal*to1/frrate/100,defaultcurroundoff);

RecordStore(Cashr,true);

RETURN;
END;


procedure Gen0EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen1EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen2EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen3EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+a;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen4EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen5EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen6EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen7EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+a;
  i6 = asc(mid(str,6,1))+b;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen8EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+a;
  i4 = asc(mid(str,4,1))+b;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
  res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

procedure Gen9EAN(string str, var string res)
begin
integer i,i0,i1,i2,i3,i4,i5,i6,a,b,c;
  i0 = asc(mid(str,0,1));
  a=17;
  b=27;
  c=49;
  res = res & chr(i0);
  i1 = asc(mid(str,1,1))+a;
  i2 = asc(mid(str,2,1))+b;
  i3 = asc(mid(str,3,1))+b;
  i4 = asc(mid(str,4,1))+a;
  i5 = asc(mid(str,5,1))+b;
  i6 = asc(mid(str,6,1))+a;
  res = res & chr(i1) & chr(i2) & chr(i3) & chr(i4) & chr(i5) & chr(i6) & "*";
  for(i=7;i<13;i=i+1) begin
    res = res & chr(asc(mid(str,i,1))+c);
  end;
  res = res & "+";
end;

global procedure CreateEAN128(var string str)
begin
string 255 res,res1;
integer ksum,sum,c,lenth,i;
val csum;
area arr;
  res = "";
  sum = 0;
  res = res & chr(195) & chr(144);
  sum = sum+103;
  lenth = len(str);
  for(i=0;i<lenth;i=i+1)begin
    c = asc(mid(str,i,1));
    c = c - 32;
    sum = sum + c*(i+1);
  end;
  csum = sum/103;
  if(csum<round(csum,0)) then begin ksum = round(csum,0)-1; end else begin
    ksum = round(csum,0);
  end;
  sum = sum-(ksum*103);
  res = res & str;
  if(sum<95) then begin
    If(sum==0) then begin
      res = res & chr(195) & chr(148);
    end else begin
      res = res & chr(sum+32);
    end;  
  end else begin
  res = res & chr(195) & chr(sum+41);
  end;
  //res = res & chr(211);
  //res = res & chr(211);
  res = res & chr(195) & chr(147);
  //addtexttoarea(res,arr);
  str = res;
return;
end;

global procedure CreateEAN128C(var string str)
begin
string 255 res,res1;
integer ksum,sum,c,lenth,i;
val csum;
area arr;
  res = "";
  sum = 0;
  res = res & chr(195) & chr(146);
  sum = sum+105;
  lenth = len(str);
  for(i=0;i<lenth;i=i+1)begin
    c = asc(mid(str,i,1));
    c = c - 32;
    sum = sum + c*(i+1);
  end;
  csum = sum/103;
  if(csum<round(csum,0)) then begin ksum = round(csum,0)-1; end else begin
    ksum = round(csum,0);
  end;
  sum = sum-(ksum*103);
  res = res & str;
  if(sum<95) then begin
    If(sum==0) then begin
      res = res & chr(195) & chr(148);
    end else begin
      res = res & chr(sum+32);
    end;  
  end else begin
  res = res & chr(195) & chr(sum+41);
  end;
  res = res & chr(195) & chr(147);
  str = res;
return;
end;


global procedure CreateEAN13(var string str)
begin
integer lenth,i,c;
string 5 c0,ci;
string 20 res;
boolean testf;
	
	messagebox(0,1);
  lenth = len(str);
  testf = true;
  if(lenth!=13) then begin testf = false; end;
  for(i=0;i<lenth;i=i+1)begin
    c=asc(mid(str,i,1));
    if(c<48 or c>57) then begin testf = false; end;
  end;
  res = "";
  if(testf) then begin
    c0 = mid(str,0,1);
    switch(c0) begin
      case "0":Gen0EAN(str,res);
      case "1":Gen1EAN(str,res);
      case "2":Gen2EAN(str,res);
      case "3":Gen3EAN(str,res);
      case "4":Gen4EAN(str,res);
      case "5":Gen5EAN(str,res);
      case "6":Gen6EAN(str,res);
      case "7":Gen7EAN(str,res);
      case "8":Gen8EAN(str,res);
      case "9":Gen9EAN(str,res);
    end;
  end;
str = res;
return
end;


global updating procedure CreateNewSVOinCom1(record SVOVc origSVOr)
begin
  integer curcomp;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  record INVc INr;
  integer mtrw,i,notenr;
  string 255 warntext;
  record NotepadVc Noter;
  record RLinkVc RLr;
  val fr,to1,to2,br1,br2;
  string 6 crncy;
  
  curcomp = CurrentCompany;
  if (SetCompany(8,false)) then begin
    
    RecordCopy(SVOr,origSVOr);
    
    
 /*   mtrw = MatRowCnt(SVOr);
  //  SVOr.CustCode = "ISTORE";
  //  SVOr.CustomField7 = "GOLOVIZNIN";
  SVOr.Objects = "";
    switch(SVOr.CustCode) begin
      case "DN_KARAVAN": SVOr.CustCode = "IS_DN_KRV";
      case "NONAME": SVOr.CustCode = "IS_K_OL";
      case "OD_SADU_P": SVOr.CustCode = "IS_OD_SP";
      case "KIEV_KARAVAN": SVOr.CustCode = "IS_K_KRV";
      case "KH_KARAVAN": SVOr.CustCode = "IS_KH_KRV";
      case "D_DEKOR_D": SVOr.CustCode = "IS_DK_DD";
      case "DREAM_TOWN": SVOr.CustCode = "IS_K_DT";
    end;
    //messagebox(0,SVOr.CustCode);
    PasteCUInSVO(SVOr,warntext);
    For(i=0;i<mtrw;i=i+1) begin
      matrowget(SVOr,i,SVOrw);
      INr.Code = SVOrw.ArtCode;
      if(ReadFirstMain(INr,1,true)) then begin
        if(INr.Code == SVOrw.ArtCode) then begin
          PasteItemInSVO(SVOr,i);
        end;
      end;
    end; 
    IF(origSVOr.CurncyCode=="UAH")then begin
      SVOr.CurncyCode = "UAH_B";
      crncy = SVOr.CurncyCode;
      GetFullCurncyRate(crncy,SVOr.TransDate,fr,to1,to2,br1,br2);
      SVOr.CurncyCode = crncy;
      SVOr.FrRate = fr;
      SVOr.ToRateB1 = to1;
      SVOr.ToRateB2 = to2;
      SVOr.BaseRate1 = br1;
      SVOr.BaseRate2 = br2;
    end;
    SVOr.Comment1 = origSVOr.Comment1;
    SVOr.Comment2 = origSVOr.Comment2;
    SVOr.Comment3 = origSVOr.Comment3;
    SVOr.Comment4 = origSVOr.Comment4;
    
    SVOr.Garanty = "";// Edit ************************** Thursday, 30 December 2010 10:47:11
    
    //SVOr.SerNr = -1;// Edit ************************** Wednesday, 29 December 2010 15:03:52
    SVOr.InvMark = 0;
    SVOr.InvFlag = 0;
    SVOr.WSMark = 0;
    SVOr.WOMark = 0;
    SVOr.DoneMark = 0;
    SVOr.CustOrdNr = blankval;
    SVOr.ExportFlag = 0;*/
    //SVOr.SerNr = -1;
    /*if (SVOr.SerNr<=0) then begin
    SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
    end;*/
    If(SVOr.SerNr!=-1) then begin
      if(RecordInsert(SVOr,false)) then begin
        notenr = 1;
        ResetCompany(curcomp);
        while (ReadRecordLink(origSVOr,notenr,Noter,RLr)) begin
          CreateRecordLink(SVOr,8,Noter,2);  
          notenr = notenr + 1;
        end;
      end;
    end else begin
       ResetCompany(curcomp);
       MessageBox(0,"Error");
    end;
    
    //ResetCompany(curcomp);
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;

global updating procedure CreateNewSVOinCom(record SVOVc origSVOr)
begin
  integer curcomp;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  record INVc INr;
  integer mtrw,i,notenr;
  string 255 warntext;
  record NotepadVc Noter;
  record RLinkVc RLr;
  val fr,to1,to2,br1,br2;
  string 6 crncy;
  record LocalMachineAccBlock LMAb;
  row LocalMachineAccBlock LMArw;
  
  curcomp = CurrentCompany;
  if (SetCompany(8,false)) then begin
    
    RecordCopy(SVOr,origSVOr);
    
    
    mtrw = MatRowCnt(SVOr);
  //  SVOr.CustCode = "ISTORE";
  //  SVOr.CustomField7 = "GOLOVIZNIN";
  
  blockload(LMAb);
  mtrw = matrowcnt(LMAb);
  for(i=0;i<mtrw;i=i+1)begin
    matrowget(LMAb,i,LMArw);
    if(setinset(LMArw.Objects,SVOr.Objects))then begin
      SVOr.CustCode = LMArw.CustCode;
    end;
  end;
  
  SVOr.Objects = "";
    switch(SVOr.CustCode) begin
      case "DN_KARAVAN": SVOr.CustCode = "IS_DN_KRV";
      case "NONAME": SVOr.CustCode = "IS_K_OL";
      case "OD_SADU_P": SVOr.CustCode = "IS_OD_SP";
      case "KIEV_KARAVAN": SVOr.CustCode = "IS_K_KRV";
      case "KH_KARAVAN": SVOr.CustCode = "IS_KH_KRV";
      case "D_DEKOR_D": SVOr.CustCode = "IS_DK_DD";
      case "DREAM_TOWN": SVOr.CustCode = "IS_K_DT";
      case "LV_OPERA_PASSAGE": SVOr.CustCode = "IS_LV_OP";
		 	case "OCEAN_PLAZA": SVOr.CustCode = "IS_K_OPL";
      
      /*case "IPOINT": SVOr.CustCode = "IPOINT";
      case "IPOINT_SM": SVOr.CustCode = "IPOINT1";
      case "IPOINT_KH_MG": SVOr.CustCode = "IPOINT2";*/
      
    end;
    //messagebox(0,SVOr.CustCode);
    PasteCUInSVO(SVOr,warntext);
    For(i=0;i<mtrw;i=i+1) begin
      matrowget(SVOr,i,SVOrw);
      INr.Code = SVOrw.ArtCode;
      if(ReadFirstMain(INr,1,true)) then begin
        if(INr.Code == SVOrw.ArtCode) then begin
          PasteItemInSVO(SVOr,i);
        end;
      end;
    end; 
    IF(origSVOr.CurncyCode=="UAH")then begin
      SVOr.CurncyCode = "UAH_B";
      crncy = SVOr.CurncyCode;
      GetFullCurncyRate(crncy,SVOr.TransDate,fr,to1,to2,br1,br2);
      SVOr.CurncyCode = crncy;
      SVOr.FrRate = fr;
      SVOr.ToRateB1 = to1;
      SVOr.ToRateB2 = to2;
      SVOr.BaseRate1 = br1;
      SVOr.BaseRate2 = br2;
    end;
    SVOr.Comment1 = origSVOr.Comment1;
    SVOr.Comment2 = origSVOr.Comment2;
    SVOr.Comment3 = origSVOr.Comment3;
    SVOr.Comment4 = origSVOr.Comment4;
    
    SVOr.Garanty = "";// Edit ************************** Thursday, 30 December 2010 10:47:11
    
    //SVOr.SerNr = -1;// Edit ************************** Wednesday, 29 December 2010 15:03:52
    SVOr.InvMark = 0;
    SVOr.InvFlag = 0;
    SVOr.WSMark = 0;
    SVOr.WOMark = 0;
    SVOr.DoneMark = 0;
    SVOr.CustOrdNr = blankval;
    SVOr.ExportFlag = 0;
    
    if (SVOr.SerNr<=0) then begin
    SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
    end;
    If(SVOr.SerNr!=-1) then begin
      if(RecordInsert(SVOr,false)) then begin
        notenr = 1;
        ResetCompany(curcomp);
        while (ReadRecordLink(origSVOr,notenr,Noter,RLr)) begin
          CreateRecordLink(SVOr,8,Noter,1);  
          notenr = notenr + 1;
        end;
      end;
    end else begin
       ResetCompany(curcomp);
       MessageBox(0,"Error");
    end;
    
    //ResetCompany(curcomp);
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;


global updating procedure CreateNewINinStore(record INVc origINr)
begin
  integer curcomp;
  record INVc INr;
  record ITVc ITr;

  curcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;
  
  if (SetCompany(8,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;

global updating procedure CreateNewINinSMG(record INVc origINr)
begin
  integer curcomp;
  record INVc INr;
  record ITVc ITr;

  curcomp = CurrentCompany;
  if (SetCompany(6,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;
  
  if (SetCompany(8,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;


global updating procedure CreateNewINiPoint(record INVc origINr)
begin
  integer curcomp;
  record INVc INr;
  record ITVc ITr;

  curcomp = CurrentCompany;
  if (SetCompany(2,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;
  
  if (SetCompany(8,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;

global updating procedure CreateNewINTNM(record INVc origINr)
begin
  integer curcomp;
  record INVc INr;
  record ITVc ITr;

  curcomp = CurrentCompany;
  if (SetCompany(7,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;
  
  if (SetCompany(8,false)) then begin
    
    RecordNew(INr);
    INr.Code = origINr.Code;
    INr.Name = origINr.Name;
    INr.ItemType = origINr.ItemType;
    INr.SerNrf = origINr.SerNrf;
    INr.SRUpdateCost = origINr.SRUpdateCost;
    INr.UpdateCost = origINr.UpdateCost;
    INr.Group = origINr.Group;
    INr.AlternativeCode = origINr.AlternativeCode;
    INr.BarCode = origINr.BarCode;
    INr.EKNCode = origINr.EKNCode;
    ITr.Code = INr.Group;
    If(ReadFirstmain(ITr,1,true))begin
      If(INr.Group!=ITr.Code)then begin
        INr.Group = "";
      end;
    end else begin
      INr.Group = "";
    end;
   
      if(RecordInsert(INr,false)) then begin
        ResetCompany(curcomp);
      end;
    
  end else begin
    ResetCompany(curcomp);
  end;

return;
end;




