external function Integer MakeTransFromSH(record TRVc,record SHVc,Boolean,record RcVc);
external updating procedure SMSWhenSHOK(LongInt,string,Integer);
external updating procedure UpdateProjFromShip(record SHVc);
external function Boolean CanOKStockRecord();
external updating procedure SHUpdateSerialNr(record SHVc);
external updating procedure SHUpdateItemHist(record SHVc);
external updating procedure AddTTrans_SHVc(record TRVc,record SHVc);
external updating procedure UpdateStockResFromSH(record SHVc);
external function boolean GetCostAcc(string,string,record AccBlock,record INVc,integer,var string,var string);
external updating procedure UpdateSerStock(string,string,string,val,val);
external updating function Boolean RecordAction_rlStockMovLOK(var record StockMovVc,Boolean);
external function Integer CheckObjs(string,string,var string);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure SHUpdateInShipment(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating function Boolean UpdateOrderFromShip(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating procedure SHUpdateStock(record SHVc,Boolean);
external updating procedure SHOK(record SHVc,var Integer);
external procedure CalcSHWeight(var record SHVc,Boolean);
external updating procedure UpdateLocOKNr(string,var val);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean ExistStockTrans(string ,Date,var Integer,string,LongInt,Integer);
external procedure UpdateSHFIFO(record SHVc);
external function LongInt GetCurUserLastNr(string);
external function Boolean SerialNrAvail(string,string,string,val);
//external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external procedure FindStockReservQty(LongInt,string,string,var record ItemStatusVc,var val);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestSHVc(LongInt,Date,var Boolean);
external function val FindPUBaseRate2forSerialNr(string,string);

function Boolean StockMovOKedForSH(LongInt shnr,var LongInt stmovnr)
BEGIN
  Boolean res;
  record StockMovVc StockMovr;
  Boolean TrHs;
  Integer flushcnt;
  
  res = true;
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (StockMovr.OKFlag==0) then begin
        res = false;
        stmovnr = StockMovr.SerNr;
        TrHs = false;
      end;
    end;
  end;
  StockMovOKedForSH = res;
  RETURN;
END;

global
updating function LongInt SHVcRecordCheck(var record SHVc SHp,record SHVc SH2p,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  record INVc INr;
  record INVc IN2r;
  record MainStockBlock MainStockRec;
  record MainWHMBlock MainWHMRec;
  record LocationVc LocRec;
  record SRBlock SRRec;
  record PRVc PRr;
  record ORVc ORr;
  row ORVc ORrw;
  row SHVc SHrw;
  record TRVc gTRp;
  record SHVc locSHr;
  record ItemStatusVc ISr;
  record RcVc RepSpec;
  string 10 location,loc2,loc3,tstr;
  LongInt oldnr,newnr;
  Integer i,rwcnt;
  Integer insertmode,updatemode;
  Boolean blankf;
  Boolean transf;
  Boolean orfound,gentrans;
  val t,prev,stockreservq;
  record SHVc recSHr;
  row SHVc SHrw2;
  row SHVc SHrw3;
  Integer rwcnt2,j;
  Boolean isstruct;
  Integer cnt;
  Integer errcode;
  LongInt sernr,stmovnr;
  record PISVc PISr;
  string 255 objstr,errstr,accnr;
  record CostAccBlock CAb;
  record AccBlock ARAccRec;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  BlockLoad(SRRec);
  BlockLoad(MainStockRec);
  BlockLoad(MainWHMRec);
  BlockLoad(CAb);
  if (stat==updatemode) then begin
    if (SHp.SerNr<=0) and (SH2p.OKFlag==0) then begin
      SHp.SerNr = SH2p.SerNr;
    end;
  end;        
  oldnr = SHp.SerNr;
  transf = false;
  if (SHp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (SH2p.OKFlag==0) then begin
        transf = true;
        if (MainStockRec.SetDelDateToCurrent!=0) then begin
          SHp.ShipDate = CurrentDate;
        end;
      end;
    end;
  end;
// Only TransportNumber can be changed after OK 
  if (SH2p.OKFlag!=0) then begin
    goto LSHVcRecordCheck;
  end;
  if ((stat==insertmode) or (SHp.SerNr!=SH2p.SerNr)) then begin
    locSHr.SerNr = SHp.SerNr;
    if (ReadFirstMain(locSHr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LSHVcRecordCheck;
    end;
  end;

  if (SerNrTestSHVc(SHp.SerNr,SHp.ShipDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LSHVcRecordCheck;
  end;
  if (Date2Test("SHVc",SHp.ShipDate,"ShipDate",-1)==false) then begin
    res = -1;
    goto LSHVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("SHOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"SHOK"),-1,"SerNr");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;  
  location = SHp.Location;
  if (check!=0) then begin
    if (MainStockRec.requireLocation!=0) then begin
      if (blank(SHp.Location)) then begin
        rwcnt = MatRowCnt(SHp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SHp,i,SHrw);
          if (blank(SHrw.Location)) then begin
            blankf = true;
            i = rwcnt;
          end;
        end;
        if (blankf) then begin
          RecordCheckError(1058,SHp.Location,-1,"Location");      
          res = -1; 
          goto LSHVcRecordCheck;
        end;
      end;
    end;
  end;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  if (nonblank(location)) then begin
    LocRec.Code = location;
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,location,-1,"Location");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  if (SHp.OKFlag!=0) then begin
    if (StockMovOKedForSH(SHp.SerNr,stmovnr)==false) then begin
      RecordCheckError(1827," " & stmovnr & " " & USetStr(20576),-1,"SerNr");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  ORr.SerNr = SHp.OrderNr;
  orfound = ReadFirstMain(ORr,1,true);
  if (nonblank(ORr.PRCode)) then begin
    PRr.Code = ORr.PRCode;
    if (ReadFirstMain(PRr,1,true)==false) then begin
      RecordCheckError(1232,"",-1,"OrderNr");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;
    if (PRr.Terminated!=0) then begin
      RecordCheckError(1232,"",-1,"OrderNr");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;        
  end;    
  rwcnt = MatRowCnt(SHp);
  for (i=0;i<rwcnt;i=i+1) begin
    stockreservq = 0;// Edit ************************** Wednesday, 12 May 2010 10:50:39 AM
    MatRowGet(SHp,i,SHrw);
    // Edit Start ---------------------------------------------- Edit Start
	//Monday, 23 May 2011 09:46:06
	
    if(SHp.OKFlag!=0 and SHrw.Ship==0)then begin
      RecordCheckError(1058,"",i,"Ship");      
      res = -1;
      goto LSHVcRecordCheck;
    end;
	// Edit End ---------------------------------------------- Edit End
	
    if (nonblank(SHrw.Location)) then begin
      loc2 = SHrw.Location;
      if (MainStockRec.Chronology==1) then begin//Chronology per Location
        if (SHrw.Location!=location) then begin
          RecordCheckError(20857,"",i,"Location");      
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
    end else begin
      loc2 = location;
    end;
    if (nonblank(loc2)) then begin
      LocRec.Code = loc2;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
        RecordCheckError(1120,loc2,i,"Location");      
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
    if (nonblank(SHrw.ArtCode)) then begin
      if (ReadFirstItem(SHrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
    if (LocRec.RequirePos!=0) then begin
      if (nonblank(SHrw.ArtCode)) then begin
        if (INr.ItemType==1) then begin
          if (blank(SHrw.PosCode)) then begin
            RecordCheckError(1854,"",i,"PosCode");      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
        end;
      end;
    end;  
    if (MainStockRec.DelOrdQty==0) then begin
      if (SHrw.Ship>SHrw.Ordered) then begin
        RecordCheckError(1303,"",i,"Ship");      
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
    if (check!=0) then begin
      if (orfound) then begin
        if (SHrw.OrdRow>-1) then begin
          MatRowGet(ORr,SHrw.OrdRow,ORrw);      
          t = ORrw.Shipd2 + SHrw.Ship;
          if (MainStockRec.DelOrdQty==0) then begin
            if (t>ORrw.Quant) then begin
              RecordCheckError(1303,"",i,"Ship");      
              res = -1; 
              goto LSHVcRecordCheck;
            end;
          end;
        end;
      end;
      if (nonblank(SHrw.CostAcc)) then begin
        if (GetAccName(SHrw.CostAcc,tstr,60)==false) then begin
          RecordCheckError(1947,"",i,"CostAcc");      
          res = -1; 
          goto LSHVcRecordCheck;
        end;
      end;      
    end;
    if (nonblank(SHrw.ArtCode)) then begin
      if (CheckSerialStatus(SHrw.ArtCode,SHrw.SerialNr,tstr)==2) then begin
        RecordCheckError(2210," " & tstr & ": " & SHrw.SerialNr,i,"SerialNr");      
        res = -1; 
//        Error1(0,tstr);
        goto LSHVcRecordCheck;
      end;
      objstr = SHp.Objects;
      if (nonblank(objstr)) then begin
        objstr = objstr & ",";
      end;
      objstr = objstr & SHrw.Objects;
      if (GetCostAcc(SHrw.CostAcc,SHp.CustCode,ARAccRec,INr,CAb.ItemGroupAccounts,accnr,tstr)==false) then begin
      end;
      errcode = CheckObjs(accnr,objstr,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto LSHVcRecordCheck;
      end;      
      if (check!=0) then begin
      if (MainStockRec.dontAllowOvership==1) then begin
      if ((INr.ItemType==1) or (nonblank(SHrw.Recepy))) then begin
        if (nonblank(SHrw.Recepy)) then begin
          isstruct = ExpandStructItem(SHrw.ArtCode,SHrw.Recepy,SHrw.Ship,recSHr);
          if (isstruct) then begin
            rwcnt2 = MatRowCnt(recSHr);
            for (j=0;j<rwcnt2;j=j+1) begin
              prev = blankval;
              MatRowGet(recSHr,j,SHrw2);
              for (cnt=0;cnt<j;cnt=cnt+1) begin
                MatRowGet(recSHr,cnt,SHrw3);
                if (SHrw3.ArtCode==SHrw2.ArtCode) then begin
                  prev = prev + SHrw3.Ship;
                end;
              end;
              prev = prev + SHrw2.Ship;
              IN2r.Code = SHrw2.ArtCode;
              if (ReadFirstMain(IN2r,1,true)) then begin
                if (IN2r.ItemType==1) then begin
                  FindStockValueInclStockReserv(SHp.OrderNr,SHrw2.ArtCode,SHrw2.SerialNr,loc2,ISr,stockreservq);
                  if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin// Edit ************************** Wednesday, 29 February 2012 13:52:47
                    RecordCheckError(1247,tstr,i,"Ship");      
                    res = -1; 
                    goto LSHVcRecordCheck;
                  end;
                end;
              end;
            end;
          end;
        end else begin
          prev = blankval;
          for (cnt=0;cnt<i;cnt=cnt+1) begin
            MatRowGet(SHp,cnt,SHrw3);
            if (nonblank(SHrw3.Location)) then begin
              loc3 = SHrw3.Location;
            end else begin
              loc3 = location;
            end;
            if ((SHrw3.ArtCode==SHrw.ArtCode) and (SHrw3.SerialNr==SHrw.SerialNr) and (loc2==loc3)) then begin
              prev = prev + SHrw3.Ship;
            end;
          end;
          prev = prev + SHrw.Ship;
          FindStockValueInclStockReserv(SHp.OrderNr,SHrw.ArtCode,SHrw.SerialNr,loc2,ISr,stockreservq);
          if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin
            RecordCheckError(1247,"",i,"Ship");      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
          // Edit Start ---------------------------------------------- Edit Start
	//Thursday, 1 March 2012 10:17:45
	
          prev = blankval;
          for (cnt=0;cnt<i;cnt=cnt+1) begin
            MatRowGet(SHp,cnt,SHrw3);
            if (nonblank(SHrw3.Location)) then begin
              loc3 = SHrw3.Location;
            end else begin
              loc3 = location;
            end;
            if ((SHrw3.ArtCode==SHrw.ArtCode) and (loc2==loc3)) then begin
              prev = prev + SHrw3.Ship;
            end;
          end;
          prev = prev + SHrw.Ship;
          FindStockReservQty(SHp.OrderNr,SHrw.ArtCode,loc2,ISr,stockreservq);
          if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin// Edit ************************** Wednesday, 29 February 2012 13:52:53
            RecordCheckError(1247,"",i,"Ship");      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
          
	// Edit End ---------------------------------------------- Edit End
	
          if (SHp.OKFlag!=0) then begin
            if (LocRec.RequirePos!=0) then begin
              FindStockValueAtPosition(SHrw.ArtCode,loc2,SHrw.PosCode,PISr);
              if (SHrw.Ship>PISr.LeftQty) then begin
                RecordCheckError(1397,"",i,"PosCode");      
                res = -1; 
                goto LSHVcRecordCheck;
              end;
            end;
          end;
        end;
      end;
      end;
      end;

      if ((check!=0) and (transf)) then begin
      if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
        if (IsSerialNrCorrect(SHrw.SerialNr)==false) then begin
          RecordCheckError(1209,SHrw.SerialNr,i,"SerialNr");      
          res = -1; 
          goto LSHVcRecordCheck;
        end;        
        if (blank(SHrw.SerialNr)) then begin
          if (SHrw.Ship!=0) then begin
            RecordCheckError(1239,"",i,"SerialNr");      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
        end;
        // is the serial number available at given location 
        if (MainStockRec.NoSerOnPU==0) then begin
        if (SHrw.Ship>0) then begin
          if (INr.SerNrf==1) then begin
            if (SerialNrAvail(SHrw.ArtCode,SHrw.SerialNr,loc2,SHrw.Ship)==false) then begin
              RecordCheckError(1240,"",i,"SerialNr");      
              res = -1; 
              goto LSHVcRecordCheck;
            end;
          end else begin
            prev = blankval;
            for (cnt=0;cnt<i;cnt=cnt+1) begin
              MatRowGet(SHp,cnt,SHrw2);
              if ((SHrw2.ArtCode==SHrw.ArtCode) and (SHrw2.SerialNr==SHrw.SerialNr)) then begin
                 prev = prev + SHrw2.Ship;
              end;
           end;
           prev = prev + SHrw.Ship;
            if (SerialNrAvail(SHrw.ArtCode,SHrw.SerialNr,loc2,prev)==false) then begin
              RecordCheckError(2211,"",i,"SerialNr");      //1240 real fix isto change SerialNrAvail to return difrent results, 4.2 I guess
              res = -1; 
              goto LSHVcRecordCheck;
            end;
          end;
        end;
        end;
        if (INr.SerNrf==1) then begin          
          if (SHrw.Ship>1) then begin
            RecordCheckError(1242,"",i,"SerialNr");      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
          if (SHrw.Ship>0) then begin
            for (j=0;j<i;j=j+1) begin
              MatRowGet(SHp,j,SHrw2);
              if ((SHrw.ArtCode==SHrw2.ArtCode) and (SHrw.SerialNr==SHrw2.SerialNr)) then begin
                RecordCheckError(1242,"",i,"SerialNr");      
                res = -1; 
                goto LSHVcRecordCheck;
              end;
            end;
          end;
        end;
      end;
      end;
    end;
  end;
  if (SHp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("SHVc");
    if (newnr!=-1) then begin
       newnr = SRRec.LastShipNr;
    end;
    SHp.SerNr = NextSerNr("SHVc",SHp.ShipDate,newnr,false,"");
  end;
  if (SerNrTestSHVc(SHp.SerNr,SHp.ShipDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LSHVcRecordCheck;
  end;
  if (check!=0) then begin
    UpdateSHFIFO(SHp);
  end;
  if (transf) then begin
    if (stat==updatemode) then begin
      sernr = SH2p.SerNr;
    end;
    if (MainStockRec.Chronology!=0) then begin 
      if (ExistStockTrans(SHp.Location,SHp.ShipDate,errcode,"SHVc", sernr,MainStockRec.Chronology)) then begin
        RecordCheckError(errcode,"",-1,"ShipDate");      
        res = -1;
        goto LSHVcRecordCheck;
      end;
    end;
    if (CanOKStockRecord==false) then begin
      RecordCheckError(1766,"",-1,"SerNr");      
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromSH(gTRp,SHp,false,RepSpec);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==SHYc)) then begin
      if (MatRowCnt(gTRp)>0) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          RecordCheckError(1085,errstr,-1,"SerNr");      
          res = -1;
          goto LSHVcRecordCheck;
        end;
        SaveTrans(gTRp);
        AddTTrans_SHVc(gTRp,SHp);
      end;
    end;    
  end;
  
LSHVcRecordCheck:;
  if (res!=0) then begin
    SHp.SerNr = oldnr;
  end;
  SHVcRecordCheck = res;
  RETURN;
END;

global
function LongInt SHVcRecordDefaults(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
      
  SHr.SerNr = -1;
  SHr.OrderNr = -1;
  SHr.ShipDate = CurrentDate;
  SHr.Prntdf = 0;
  SHr.OKFlag = 0;
  SHr.ShipMode = "";  
  SHVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SHVcRecordDuplicate(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SHr.SerNr = -1;
  SHr.OKFlag = 0;
  SHr.LocOKNr = blankval;
  SHVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt SHVcRecordSave(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;
  Integer flushcnt;

  if (SHr.OKFlag!=0) then begin
    LocOKNr = SHr.LocOKNr;
    UpdateLocOKNr(SHr.Location,LocOKNr);
    SHr.LocOKNr = LocOKNr;
  end;
  CalcSHWeight(SHr,false);
  flushcnt = -1;
  SHOK(SHr,flushcnt);
  
  SHVcRecordSave = res; 
  RETURN;
END;

updating procedure SHOKStockMovemnts(LongInt shnr)
BEGIN
  record MainWHMBlock MainWHM;
  record StockMovVc StockMovr;
  Boolean TrHs;
  Integer flushcnt;
  
/*at  the moment Pierre wants deliveries not to be OKED when there is any not OKed stockmov*/  
/*not sure it is necessry I think stock mov will be oked when info from AGV received*/  
  BlockLoad(MainWHM);
  if (MainWHM.AutOKStockMovements==0) then begin goto LSHOKStockMovemnts; end;
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (RecordAction_rlStockMovLOK(StockMovr,false)) then begin      
      end;
    end;
  end;
LSHOKStockMovemnts:;  
  RETURN;
END;

updating procedure UpdateSerialNumberQuantity(record SHVc SHr,Boolean negf)
BEGIN
  record MainStockBlock MainStockRec;
  Integer i,rwcnt;
  row SHVc SHrw;
  string 10 location,loc2;
  val t4,costp;

  goto LUpdateSerialNumberQuantity;
  BlockLoad(MainStockRec);
  if (MainStockRec.UpdateAvailable==0) then begin goto LUpdateSerialNumberQuantity; end;
  
  location = SHr.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);  
    if (nonblank(SHrw.Location)) then begin  
      loc2 = SHrw.Location;
    end else begin
      loc2 = location;
    end;
    if (negf) then begin
      t4 = -SHrw.Ship;
    end else begin
      t4 = SHrw.Ship;
    end;
    costp = blankval;
    UpdateSerStock(SHrw.ArtCode,loc2,SHrw.SerialNr,t4,costp);    
  end;
LUpdateSerialNumberQuantity:;  
  RETURN;
END;

global
updating function LongInt SHVcRecordSaveAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (SHr.OKFlag!=0) then begin
    SHUpdateItemHist(SHr);
    SHUpdateSerialNr(SHr);
    SHUpdateStock(SHr,false);
    UpdateProjFromShip(SHr);
//    SHOKStockMovemnts(SHr.SerNr);
  end;
  if (SHr.OrderNr!=-1) then begin
    if (UpdateOrderFromShip(SHr,true,SH2r,false,false)) then begin end;
  end;
  if (SHr.OKFlag==0) then begin
    SHUpdateInShipment(SHr,true,SH2r,false,false);
  end;
  UpdateSerialNumberQuantity(SHr,true);
  SHVcRecordSaveAfter = res; 
  RETURN;
END;

global
updating function LongInt SHVcRecordRemoveAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  UpdateSerialNumberQuantity(SHr,false);
  SHVcRecordRemoveAfter = res; 
  RETURN;
END;

global
updating function LongInt SHVcRecordImportAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (SHr.OKFlag!=0) then begin
    SHUpdateSerialNr(SHr);
    UpdateProjFromShip(SHr);
    if (ImportingTextBackup==false and CanOKStockRecord==true) then begin
      SHUpdateItemHist(SHr);
      SHUpdateStock(SHr,false);
    end;
  end;
  SHVcRecordImportAfter = res; 
  RETURN;
END;

global
updating function LongInt SHVcRecordUpdate(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;

  if ((SHr.OrderNr!=-1) and (SH2r.OKFlag==0)) then begin
    if (UpdateOrderFromShip(SHr,true,SH2r,true,false)) then begin end;
  end;
  if ((SH2r.OKFlag==0) and (SHr.OKFlag==0)) then begin
    SHUpdateInShipment(SHr,true,SH2r,true,false);
  end;
  if ((SHr.OKFlag!=0) and (SH2r.OKFlag==0)) then begin
    LocOKNr = SHr.LocOKNr;
    UpdateLocOKNr(SHr.Location,LocOKNr);
    SHr.LocOKNr = LocOKNr;
    UpdateStockResFromSH(SHr);
  end;
  SHVcRecordUpdate = res; 
  RETURN;
END;

global
updating function LongInt SHVcRecordUpdateAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer flushcnt;

  if ((SHr.OKFlag!=0) and (SH2r.OKFlag==0)) then begin
//    SHOKStockMovemnts(SHr.SerNr);
    SHUpdateItemHist(SHr);
    SHUpdateSerialNr(SHr);
    SHUpdateInShipment(SH2r,true,SHr,false,true); // What does this function do??
    SHUpdateStock(SHr,false);
    UpdateProjFromShip(SHr);
    flushcnt = -1;
    SHOK(SHr,flushcnt);
    SMSWhenSHOK(SHr.OrderNr,SHr.CustCode,1);
  end;
  if ((SH2r.OKFlag==0) and (SHr.OKFlag==0)) then begin
    UpdateSerialNumberQuantity(SH2r,false);
    UpdateSerialNumberQuantity(SHr,true);
  end;
  SHVcRecordUpdateAfter = res; 
  RETURN;
END;

global
function LongInt SHVcRecordRemoveTest(var record SHVc SHr,record SHVc SH2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  record ORVc ORr;

  res = 0;
  if (SHr.OKFlag==0) then begin
    res = 1;
    goto LSHVcRecordRemoveTest;
  end;
  BlockLoad(DBLockRec);
  if (SHr.ShipDate<=DBLockRec.DeleteBeforeDate) then begin        
    res = 1;
    ORr.SerNr = SHr.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin res = 0; end;
  end;
  if (res==0) then begin
    if (long3>0) then begin MessageBox(1544,""); end;
  end;  
LSHVcRecordRemoveTest:;
  SHVcRecordRemoveTest = res; 
  RETURN;
END;

updating procedure SHDeleteStockMovemnts(LongInt shnr)
BEGIN
  record MainWHMBlock MainWHM;
  record StockMovVc StockMovr;
  Boolean TrHs;
  
  BlockLoad(MainWHM);
//  if (MainWHM.AutOKStockMovements==0) then begin goto LSHDeleteStockMovemnts; end;
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (StockMovr.OKFlag==0) then begin
        RecordRemove(StockMovr);
        StepBack(StockMovr);
      end;
    end;
  end;
LSHDeleteStockMovemnts:;  
  RETURN;
END;

global
updating function LongInt SHVcRecordRemove(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (SHr.OrderNr!=-1) then begin
    if (UpdateOrderFromShip(SH2r,false,SHr,true,false)) then begin end;
  end;
  if (SHr.OKFlag==0) then begin
    SHUpdateInShipment(SHr,true,SH2r,false,true);
  end;
  if (SHr.OKFlag==0) then begin
    SHDeleteStockMovemnts(SHr.SerNr);
  end;
  SHVcRecordRemove = res; 
  RETURN;
END;

