external procedure CashSumup(record CashVc);
external function Boolean IsSessionOpen(string,string,Date,Time);
external procedure FindTimeOfLastPOSBalance(var Date,var Time,string,string,var val);
external procedure DoTheCashup(Integer,Integer,Integer,Integer,Integer,Date,Date,Time,Time,string,string,string,Integer,Boolean,Boolean,
                      var val,var val,var val,var array string,var array val,var array val,Integer,var val,var val,var array string,var array val,Integer,var record SMVc,
                      var array string,var array val,var array val,var array val,var Integer,var record SMVc);
external updating procedure POSUpdStockMn(record RepSpec);


procedure BuildMachineDrawerCombinations(string selmachine,string seldrawer,var array string amachine,var array string adrawer,var Integer amdcnt)
begin
  record LocalMachineVc LocalMachiner;
  record DrawerVc Drawerr;
  Boolean dfoundf,lfoundf;
  
  lfoundf = true;
  LocalMachiner.Code = selmachine;
  while (LoopMain(LocalMachiner,1,lfoundf)) begin
    if (nonblank(selmachine)) then begin
      if (LocalMachiner.Code!=selmachine) then begin
        lfoundf = false;
      end;
    end;
    if (lfoundf) then begin
      ResetLoop(Drawerr);
      dfoundf = true;
      Drawerr.Code = seldrawer;
      while (LoopMain(Drawerr,1,dfoundf)) begin
        if (nonblank(seldrawer)) then begin
          if (Drawerr.Code!=seldrawer) then begin
            dfoundf = false;
          end;
        end;
        if (dfoundf) then begin
          amachine[amdcnt] = LocalMachiner.Code;
          adrawer[amdcnt] = Drawerr.Code;
          amdcnt = amdcnt + 1;
        end;
      end;
    end;
  end;
  return;
end;

global
function Val GetPOSBalance(Date dat,Time tim,string machine,string drawer)
begin
  val res,totin,totout;
  array string 20 aitcode;
  array val aitsum;
  array val aitvat;
  array string 20 avatcode;
  array val avatsum;
  val totsum,totvat,avatcnt;
  Integer aitcnt;
  record SMVc SMr;
  array string 20 aitcodetot;
  array val aitsumtot,aitstartbaltot,aitvattot;
  Integer aitcnttot;
  Date d;
  Time t;
  record POSBalanceVc POSBalancer;
  record SMVc CountSMr;
  val bal;
  
  d = dat;
  t = AddMinutes(tim,-1);
  FindTimeOfLastPOSBalance(d,t,machine,drawer,bal);
  DoTheCashup(0,1,1,1,0,d,dat,t,tim,machine,drawer,"",0,false,false,res,totin,totout,aitcode,aitsum,aitvat,aitcnt,totsum,totvat,avatcode,avatsum,avatcnt,SMr,aitcodetot,aitsumtot,aitstartbaltot,aitvattot,aitcnttot,CountSMr);
  GetPOSBalance = res;
  return;
end;

function val AddWriteOff(record CashVc CashWriteOffr,string pmcode,val t)
begin
  val res;
  row CashVc Cashrw;
  Integer i,rwcnt;
  
  res = t;
  rwcnt = MatRowCnt(CashWriteOffr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CashWriteOffr,i,Cashrw);
    if (Cashrw.PMCode==pmcode) then begin
      res = res - Cashrw.Amount;
    end;
  end;
  AddWriteOff = res;
  return;
end;

global
updating procedure RunTheCashupMn(string pmachine,string pdrawer,string ppmcode,Date pdat,Time ptim,Integer pdetail,Integer prestcash,Integer pposcash,Integer pslcash,Integer pinclroomtabs)
BEGIN
  val bal,totin,totout;
  array string 20 aitcode;
  array val aitsum;
  array val aitvat;
  array string 20 avatcode;
  array val avatsum;
  val totsum,totvat;
  Integer i,aitcnt,avatcnt;
  record ITVc ITr;
  record POSEventVc PEr;
  record POSEventVc lPEr;
  record CashVc CashINr;
  record CashVc CashWriteOffr;
  record CashVc CashOUTr;
  record SMVc CountSMr;
  row CashVc Cashrw;
  row SMVc SMrw;
  record POSBalanceVc POSBalancer;
  record POSBalanceVc oldPOSBalancer;
  record VATCodeBlock VATCodeBlockr;
  row VATCodeBlock VATCodeBlockrw;
  record SMVc SMr;
  array string 20 aitcodetot;
  array val aitsumtot,aitstartbaltot,aitvattot;
  array string 20 amachine;
  array string 20 adrawer;
  Integer amdi,amdcnt;
  Integer aitcnttot;
  Integer rwcnt;
  Date dfr;
  Time tfr;
  string 30 machine,drawer;
  val t;
  Boolean addposbalf,storef;
  
  amdcnt = 0;
  BuildMachineDrawerCombinations(pmachine,pdrawer,amachine,adrawer,amdcnt);
  for (amdi=0; amdi<amdcnt; amdi=amdi+1) begin
    machine = amachine[amdi];
    drawer = adrawer[amdi];
    totsum = 0;
    totvat = 0;
    aitcnt = 0;
    while(LoopMain(ITr,1,true)) begin
      aitcode[aitcnt] = ITr.Code;    
      aitcnt = aitcnt + 1;
    end;
    BlockLoad(VATCodeBlockr);
    avatcnt = MatRowCnt(VATCodeBlockr);
    for(i=0; i<avatcnt; i=i+1) begin
      MatRowGet(VATCodeBlockr,i,VATCodeBlockrw);
      avatcode[i] = VATCodeBlockrw.VATCode;
    end;
    for(i=0; i<aitcnttot; i=i+1) begin
      aitcodetot[i] = "";
      aitsumtot[i] = 0;
      aitstartbaltot[i] = 0;
      aitstartbaltot[i] = 0;
      aitvattot[i] = 0;
    end;
    aitcnttot = 0;

    if (IsSessionOpen(machine,drawer,pdat,ptim)) then begin
      RecordNew(PEr);
      PEr.MachineName = machine;
      PEr.Drawer = drawer;
      PEr.Event = 2;
      PEr.TransDate = pdat;
      PEr.TransTime = AddSeconds(ptim,-1);
      PEr.SerNr = NextSerNr("POSEventVc",PEr.TransDate,-1,true,"");// Edit ************************** Thursday, 21 April 2011 13:50:38
      storef = true;
		  lPEr.Drawer = PEr.Drawer;
		  if (ReadLastKey("Drawer",lPEr,1,true)) then begin
		    if (lPEr.Drawer==PEr.Drawer) then begin
		      if (lPEr.Event==PEr.Event) then begin
            storef = false;
			    end;
			  end;
			end;
			if (storef) then begin
			  if (RecordInsert(PEr,true)) then begin
			  end;
			end;
    end;

    dfr = pdat;
    tfr = ptim;
    
    FindTimeOfLastPOSBalance(dfr,tfr,machine,drawer,bal);
    DoTheCashup(pdetail,prestcash,pposcash,pslcash,pinclroomtabs,dfr,pdat,tfr,ptim,machine,drawer,ppmcode,0,false,false,bal,totin,totout,aitcode,aitsum,aitvat,aitcnt,totsum,totvat,avatcode,avatsum,avatcnt,SMr,aitcodetot,aitsumtot,aitstartbaltot,aitvattot,aitcnttot,CountSMr);

    RecordNew(CashINr);
    CashINr.TransDate = pdat;
    CashINr.TransTime = AddSeconds(ptim,-1);
    CashINr.Total = blankval;
    CashINr.SkipUpdatTime = 0;
    CashINr.MachineName = machine;
    CashINr.Drawer = drawer;
    CashINr.Event = 1;
    CashINr.OKFlag = 1;
    RecordCopy(CashOUTr,CashINr);
    CashOUTr.Event = 0;
    RecordCopy(CashWriteOffr,CashINr);
    CashWriteOffr.Event = 2;

    rwcnt = MatRowCnt(CountSMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CountSMr,i,SMrw);
      Cashrw.PMCode = SMrw.Objects;
      t = SMrw.CredVal - SMrw.DebVal;
      Cashrw.Amount = t;
      MatRowPut(CashWriteOffr,MatRowCnt(CashWriteOffr),Cashrw);
    end;
    if (MatRowCnt(CashWriteOffr)>0) then begin
      CashSumup(CashWriteOffr);
      CashWriteOffr.SerNr = NextSerNr("CashVc",CashWriteOffr.TransDate,-1,true,"");
      if (RecordInsert(CashWriteOffr,true)) then begin
      end;
    end;
    addposbalf = false;
    for (i=0;i<aitcnttot;i=i+1) begin
      if (nonblank(aitcodetot[i])) or ((aitsumtot[i] - aitvattot[i])!=0) then begin
	      Cashrw.PMCode = aitcodetot[i];
	      t = AddWriteOff(CashWriteOffr,Cashrw.PMCode,aitsumtot[i] - aitvattot[i]);
	      if (t>0) then begin
	        Cashrw.Amount = t;
	        MatRowPut(CashOUTr,MatRowCnt(CashOUTr),Cashrw);
	      end else begin
	        Cashrw.Amount = aitvattot[i] - aitsumtot[i];
	        MatRowPut(CashINr,MatRowCnt(CashINr),Cashrw);
	      end;
	    end;
    end;
    if (MatRowCnt(CashOUTr)>0) then begin
      CashSumup(CashOUTr);
      CashOUTr.SerNr = NextSerNr("CashVc",CashOUTr.TransDate,-1,true,"");
      if (RecordInsert(CashOUTr,true)) then begin
      end;
      addposbalf = true;
    end;
    if (MatRowCnt(CashINr)>0) then begin
      CashSumup(CashINr);
      CashINr.SerNr = NextSerNr("CashVc",CashINr.TransDate,-1,true,"");
      if (RecordInsert(CashINr,true)) then begin
      end;
      addposbalf = true;
    end;
    if (addposbalf) then begin
      RecordNew(POSBalancer);
      POSBalancer.TransDate = pdat;
      POSBalancer.TransTime = ptim;
      POSBalancer.MachineName = machine;
      POSBalancer.Drawer = drawer;
      POSBalancer.Bal = GetPOSBalance(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
      if (RecordInsert(POSBalancer,true)) then begin
      end;
      RecordCopy(oldPOSBalancer,POSBalancer);
      POSBalancer.NLTransDone = 1;
      if (RecordUpdate(oldPOSBalancer,POSBalancer,true)==0) then begin
      end;
    end;
  end;

  RETURN;
END;

global function boolean CashupVClassOnOkWindow(integer wn)
begin
record RcVc RepSpec;
GetWindowRecord(wn,RepSpec);
If (RepSpec.flags[5]==0) then begin
  stopalert(USetStr(6));
CashupVClassOnOkWindow = false;
end
else
begin
CashupVClassOnOkWindow = true;
end;
return;
end;


global
updating procedure CashupMn(record RcVc RepSpec)
begin
  record LocalMachineBlock LMb;
  blockload(LMb);
if (RepSpec.flags[5]!=0) then
  begin
  RunTheCashupMn(RepSpec.f1,RepSpec.f4,RepSpec.f5,RepSpec.d1,RepSpec.sStartTime,RepSpec.ArtMode,RepSpec.flags[1],RepSpec.flags[2],RepSpec.flags[3],RepSpec.flags[4]);
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate & ":" & CurrentDate;
  RepSpec.FirstAcc = RepSpec.f1;
  logtext(0,RepSpec.FirstAcc);
  //RepSpec.AccStr = LMb.DefLocation;
  RepSpec.repname = "POSUpdStockMn";
  RunMaintenance(RepSpec);
  end	
  else
  begin
  MessageBox(0,USetStr(6));
  end;
  return;
end;


