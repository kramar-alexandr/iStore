remote function Integer CreateQualConFromRet(record RetVc,Integer,var record QualConVc,Integer);
external procedure PUCalcPerc(val,string,var val);
external function string 40 SerialNrSClassSpecPName(string);
remote function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
remote procedure RetRecalcCost(var record RetVc);
remote procedure RetVc_PasteSerialNr(var record RetVc,Integer,var string);
remote procedure RetVc_PastePrice(var record RetVc,Integer);
remote procedure RetVc_PasteCostPrice(var record RetVc,Integer);
remote procedure RetVc_PasteRate(var record RetVc);
remote procedure RetVc_PasteCurncyCode(var record RetVc);
remote procedure RetVc_PasteTransDate(var record RetVc);
remote function Boolean RetVc_PasteArtCode(var record RetVc,Integer,var string);
remote updating function Integer RecordAction_raPasteRetInInv(var record IVVc,LongInt);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);

global
procedure RetSumUp(var record RetVc Retp)
BEGIN
  Integer i,rwcnt;
  row RetVc Retrw;
  val totqty,cc,t,extracost,tbase;

  Retp.SumQuant = blankval;
  Retp.ExtraCost = blankval;
  rwcnt = MatRowCnt(Retp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Retp,i,Retrw);
    totqty = totqty + Retrw.Quant;
    tbase = tbase + Retrw.Quant * Retrw.BasePrice;
    PUCalcPerc(Retrw.UPrice,Retrw.Extra,cc);
    t = Retrw.Quant * cc;
    extracost = extracost + t;
  end;
  Retp.ExtraCost = Round(extracost,DefaultCurRoundOff);
  Retp.SumQuant = Round(totqty,2);
  Retp.Sum4 = Round(tbase,DefaultCurRoundOff);
  RETURN;
END;

global
updating procedure CreditIVFromRetsm()
BEGIN
  record RetVc Retr;
  record IVVc IVr;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,Retr);
    if (Retr.OKFlag!=0) then begin
      if (UserCanAction("RetToIV",true)) then begin
      		r = RecordAction_raPasteRetInInv(IVr,Retr.SerNr);      
        switch (r) begin
          case 1:
            if (MatRowCnt(IVr)!=0) then begin
            	CreateRecordLink(IVr,CurrentCompany,Retr,CurrentCompany);  
		        CreateRecordLink(Retr,CurrentCompany,IVr,CurrentCompany); 
              nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            end;
          case -1: Beep;
          case -2: MessageBox(0,USetStr(1368));
          otherwise 
            MessageBox(r,"");
        end;                
      end else begin
        MessageBox(1274,StringFromStringSet(3,"RetToIV"));
      end;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

function Boolean RetDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row RetVc Retrw;
  record RetVc Retr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Retr);
    MatRowGet(Retr,rownr,Retrw);
    Retrw.Quant = CalculateSerialNrQuantity(Retrw.ArtCode,"","",false,Retrw.UnitXval,Retrw.UnitYval,Retrw.UnitZval,Retrw.Quant);
    MatRowPut(Retr,rownr,Retrw);
    PutWindowRecord(wn,Retr);    
  end;
  RetDClassUnitXvalEFAfter = res;
  RETURN;
END;

function Boolean RetDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row RetVc Retrw;
  record RetVc Retr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Retr);
    MatRowGet(Retr,rownr,Retrw);
    Retrw.Quant = CalculateSerialNrQuantity(Retrw.ArtCode,"","",false,Retrw.UnitXval,Retrw.UnitYval,Retrw.UnitZval,Retrw.Quant);
    MatRowPut(Retr,rownr,Retrw);
    PutWindowRecord(wn,Retr);    
  end;
  RetDClassUnitYvalEFAfter = res;
  RETURN;
END;

function Boolean RetDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row RetVc Retrw;
  record RetVc Retr;
  Boolean res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Retr);
    MatRowGet(Retr,rownr,Retrw);
    Retrw.Quant = CalculateSerialNrQuantity(Retrw.ArtCode,"","",false,Retrw.UnitXval,Retrw.UnitYval,Retrw.UnitZval,Retrw.Quant);    
    MatRowPut(Retr,rownr,Retrw);
    PutWindowRecord(wn,Retr);    
  end;
  RetDClassUnitZvalEFAfter = res;
  RETURN;
END;

function Boolean RetDClassSerialNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Retr);
    RetVc_PasteSerialNr(Retr,rownr,tstr);    
    if (nonblank(tstr)) then begin
      MessageBox(0,tstr);
    end;    
    PutWindowRecord(wn,Retr);    
  end;
  RetDClassSerialNrEFAfter = res;
  RETURN;
END;

function Boolean RetDClassArtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RetVc Retr;
  string 255 inwarn;
  
  if (changed!=0) then begin
    if (rownr>=0) then begin    
      GetWindowRecord(wn,Retr);
      DeselectWindow(wn,false);
      if (RetVc_PasteArtCode(Retr,rownr,inwarn)) then begin
        PutWindowRecord(wn,Retr);
        if (nonblank(inwarn)) then begin
          MessageBox(0,inwarn);
        end;
      end else begin
        Beep;
      end;
    end;
  end;  
  RetDClassArtCodeEFAfter = true;
  RETURN;
END;

function Boolean RetDClassCustCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record CUVc CUr;
  record RetVc Retr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Retr);    
  if ((changed!=0) or ((blank(Retr.CustName)) and (nonblank(Retr.CustCode)))) then begin
    Cur.Code = Retr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      Retr.CustName = CUr.Name;
    end else begin
      Beep;
    end;
    PutWindowRecord(wn,Retr);
  end;
  RetDClassCustCodeEFAfter = true;
  return;
end;

function Boolean RetDClassTransDateEFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Retr);    
  if (DateWarned(Retr.TransDate,"RetVc")) then begin
    MessageBox(1045,"");
  end;
  if (WarnOldRecords(Retr.TransDate,"RetVc",Retr.SerNr)) then begin
    MessageBox(2020,"");
  end;
  if (changed!=0) then begin
    RetVc_PasteTransDate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassTransDateEFAfter = true;
  return;
end;

function Boolean RetDClassCurncyCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteCurncyCode(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean RetDClassFrRateEFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteRate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassFrRateEFAfter = true;
  return;
end;

function Boolean RetDClassToRateB1EFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteRate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassToRateB1EFAfter = true;
  return;
end;

function Boolean RetDClassToRateB2EFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteRate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassToRateB2EFAfter = true;
  return;
end;

function Boolean RetDClassBaseRate1EFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteRate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassBaseRate1EFAfter = true;
  return;
end;

function Boolean RetDClassBaseRate2EFAfter(Integer wn,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteRate(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean RetDClassQuantEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetSumUp(Retr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassQuantEFAfter = true;
  return;
end;

function Boolean RetDClassUPriceEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PastePrice(Retr,rownr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassUPriceEFAfter = true;
  return;
end;

function Boolean RetDClassExtraEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PastePrice(Retr,rownr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassExtraEFAfter = true;
  return;
end;

function Boolean RetDClassBasePriceEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PastePrice(Retr,rownr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassBasePriceEFAfter = true;
  return;
end;

function Boolean RetDClassCostPriceEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RetVc Retr;
  
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Retr);    
    RetVc_PasteCostPrice(Retr,rownr);
    PutWindowRecord(wn,Retr);
  end;
  RetDClassCostPriceEFAfter = true;
  return;
end;

global
function Boolean RetDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CustCode":  res = RetDClassCustCodeEFAfter(wn,changed);
    case "TransDate": res = RetDClassTransDateEFAfter(wn,changed);
    case "CurncyCode":res = RetDClassCurncyCodeEFAfter(wn,changed);
    case "FrRate":    res = RetDClassFrRateEFAfter(wn,changed);
    case "ToRateB1":  res = RetDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2":  res = RetDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = RetDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = RetDClassBaseRate2EFAfter(wn,changed);
    case "Quant":     res = RetDClassQuantEFAfter(wn,fn,rownr,changed);
    case "UPrice":    res = RetDClassUPriceEFAfter(wn,fn,rownr,changed); 
    case "Extra":     res = RetDClassExtraEFAfter(wn,fn,rownr,changed); 
    case "BasePrice": res = RetDClassBasePriceEFAfter(wn,fn,rownr,changed); 
    case "CostPrice": res = RetDClassCostPriceEFAfter(wn,fn,rownr,changed); 
    case "ArtCode":   res = RetDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "SerialNr":  res = RetDClassSerialNrEFAfter(wn,fn,rownr,changed);
    case "UnitXval":  res = RetDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval":  res = RetDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitZval":  res = RetDClassUnitZvalEFAfter(wn,fn,rownr,changed);
  end;
  RetDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean RetDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record RetVc Retr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,Retr);    
    RetSumUp(Retr);
    PutWindowRecord(wn,Retr);    
  end;
  RetDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean RetDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record RetVc Retr;

  res = false;
  GetWindowRecord(wn,Retr);
  if (Retr.OKFlag==0) then begin
    res = true;
  end;
  RetDClassDeleteRowTest = res;
  RETURN;
END;

function Boolean RetFIFOQue()
begin 
  record CostAccBlock CAb;
  
  BlockLoad(CAb);
  RetFIFOQue = CAb.RetFIFOQue==0 and CAb.RetCostPriceFromSH==0;
  return;
end;

global
function Boolean RetDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RetVc Retr;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,Retr);
    if (Retr.OKFlag!=0) then begin
      res = false;
      switch (fieldname) begin
        case "Comment": res = true;
      end;
    end;
  end;
  switch (fieldname) begin
    case "UPrice": res = RetFIFOQue;
    case "Extra": res = RetFIFOQue;
    case "CostPrice": res = RetFIFOQue;
    case "BBCostPrice": res = false;
  end;
  RetDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean RetDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record RetVc Retr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Retr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Retr);
  end;  
  if (Retr.OKFlag!=0) then begin
    res = false;
  end;
  RetDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean RetDClassInclVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record RetVc Retr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Retr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Retr);
  end;  
  if (Retr.OKFlag!=0) then begin
    res = false;
  end;
  RetDClassInclVATButtonAction = res;
  return;
end;

global
function Boolean RetDClassUpdStockFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record RetVc Retr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Retr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Retr);
  end;  
  if (Retr.OKFlag!=0) then begin
    res = false;
  end;
  RetDClassUpdStockFlagButtonAction = res;
  return;
end;

global
function Boolean RetDClassTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record RetVc Retr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Retr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Retr);
  end;  
  if (Retr.OKFlag!=0) then begin
    res = false;
  end;
  RetDClassTypeButtonAction = res;
  return;
end;

global
function Boolean RetDClassInclVATButtonAfter(Integer wn,Boolean changedf)
begin        
  record RetVc Retr;  
  record RetVc Ret2r;
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Retr);
  RetRecalcCost(Retr);
  PutWindowRecord(wn,Retr);
  RetDClassInclVATButtonAfter = res;  
  return;
end;

global 
function Boolean RetDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record RetVc Retr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,Retr);    
    if (Retr.OKFlag!=0) then begin res = false; end;
  end;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,Retr);    
    if (Retr.OKFlag!=0) then begin res = false; end;
  end;
  RetDClassInsertRowTest = res;
  return;
end;

global
function string 40 RetDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  RetDClassSpecPasteName = psname;
  return;
end;

global
procedure QualConFromRetDsm()
begin
  Integer wn,nwn;
  Integer rownr,err;
  record RetVc Retr;
  record QualConVc QCr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,Retr);
    err = CreateQualConFromRet(Retr,rownr,QCr,0);
    if (err==0) then begin
      nwn = OpenWindow("QualConDClass",1,0,"","",QCr);
    end else begin
      MessageBox(err,"");
    end;
  end else begin
    MessageBox(22064,"");
  end;
  return;
end;
