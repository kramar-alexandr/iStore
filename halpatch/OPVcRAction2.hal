external updating procedure StoreLiqInfoFromOP(record OPVc);
external updating procedure UnOKLiqInfoFromPay(LongInt,LongInt);
external updating procedure InvalidateTR(Integer,LongInt);
external updating procedure SaveChequeLinkAndWHCertificate(record OPVc);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external procedure OPSumup(var record OPVc,Boolean);
external updating procedure OPPUpdateOP(record OPVc,Boolean,Boolean);
external updating procedure RecidAction_rlOPstat(record OPVc);
external updating procedure APUpdateOP(record OPVc,record OPVc,Boolean,Boolean,Boolean,Boolean,Boolean);
external function Integer PMCheckType(string,var string,var string);
external updating procedure DeleteTransaction(LongInt,Integer);

updating procedure InvalidateEPaymentQue(LongInt opsernr)
begin
  record EPaymentQueVc EPQr;
  Boolean found;
  
  found = true;
  EPQr.OPSerNr = opsernr;
  while (LoopKey("OPSerNr",EPQr,1,found)) begin
    if (EPQr.OPSerNr!=opsernr) then begin
      found = false;
    end;
    if (found) then begin
      if (EPQr.Status==0) then begin
        RecordDelete(EPQr);
        StepBack(EPQr);
      end;
    end;
  end;
  return;
end;

updating procedure InvalidateWHCertificates(LongInt opsernr)
begin
  record WHCertificateVc WHCr;
  record WHCertificateVc oldWHCr;
  Boolean found;
  
  found = true;
  WHCr.OPNr = opsernr;
  while (LoopKey("OPNr",WHCr,1,found)) begin
    if (WHCr.OPNr!=opsernr) then begin
      found = false;
    end;
    if (found) then begin
      RecordCopy(oldWHCr,WHCr);
      WHCr.Invalid = 1;
      if (RecordUpdate(oldWHCr,WHCr,true)) then begin end;
    end;
  end;
  return;
end;

function LongInt OPRemovTest(record OPVc OPp,LongInt errmf)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  record VIVc VIr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean delbef;
      
  res = 1;
  BlockLoad(DBLockRec);
  if (OPp.OrderedFlag!=0) then begin
    if (OPp.TransDate>DBLockRec.DeleteBeforeDate) then begin
      if (errmf>0) then begin MessageBox(1560,""); end;
      res = 0;
      goto LOPRemovTest;
    end else begin
      delbef = true;
    end;
    rwcnt = MatRowCnt(OPp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPp,i,OPrw);
      if (OPrw.ovst==0) then begin
        if (OPrw.VISerNr==-1) then begin
          if (delbef==false) then begin
            if (errmf>0) then begin MessageBox(1560,""); end;
            res = 0;
            goto L66OPRemovTest;
          end;
        end;
        VIr.SerNr = OPrw.VISerNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (errmf>0) then begin MessageBox(1560,""); end;
          res = 0;
          goto L66OPRemovTest;
        end;
      end;
    end;
L66OPRemovTest:;
  end;
LOPRemovTest:;
  OPRemovTest = res;
  RETURN;
END;

global
function LongInt OPVcRecordRemoveTest(var record OPVc OPr,record OPVc OP2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = OPRemovTest(OPr,long3);
  OPVcRecordRemoveTest = res; 
  RETURN;
END;

updating procedure DeleteOPrs(record OPVc OPp)
BEGIN
  record OPrsVc mainr;
  row OPVc OPrw;
  Integer i,rwcnt;
  string 255 tstr;
        
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);  
    switch (OPrw.stp) begin
      case 1:
        if (OPrw.ovst==0) then begin
          mainr.VECode = OPrw.VECode;
          mainr.TransDate = OPp.TransDate;
          mainr.TransNr = OPp.SerNr;
          mainr.TransType = 1;
          mainr.VINr = OPrw.VISerNr;
          if (nonblank(OPrw.PayMode)) then begin
            mainr.CheckType = PMCheckType(OPrw.PayMode,tstr,tstr);
          end else begin
            mainr.CheckType = PMCheckType(OPp.PayMode,tstr,tstr);
          end;
          mainr.ChequeNr = OPrw.ChequeNr;
          if (ReadFirstMain(mainr,0,true)) then begin
            RecordDelete(mainr);
          end;
          UnOKLiqInfoFromPay(OPp.SerNr,i);          
        end;
    end;
  end;
  RETURN;
END;

updating procedure UpdateOPrsStats(record OPVc OPp,record OPVc oldOPr)
BEGIN
  DeleteOPrs(oldOPr);
  RecidAction_rlOPstat(OPp);
  RETURN;
END;

global
updating function LongInt OPVcRecordRemove(var record OPVc OPr,record OPVc OP2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  if (OPr.OrderedFlag!=0) then begin
    APUpdateOP(OP2r,OPr,false,true,false,false,false);
  end;
  if ((OPr.OrderedFlag==0) and (OPr.DoneFlag==0)) then begin
    DeleteOPrs(OPr);
  end;
  OPVcRecordRemove = res; 
  RETURN;
END;

global
updating procedure UpdateOPChecks(record OPVc OPp,Boolean unokf)
BEGIN
  record OwnCheckVc OwnCheckr;
  record CheckVc Checkr;
  record VIVc VIr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Integer cht;
  string 10 accnr;
  string 60 objs;
  record OrdenChqVc OrdenChqr;

  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if (nonblank(OPrw.PayMode)) then begin
      cht = PMCheckType(OPrw.PayMode,accnr,objs);
    end else begin
      cht = PMCheckType(OPp.PayMode,accnr,objs);
    end;
    switch (cht) begin
      case 1:
      if (OPrw.stp==1) then begin
        Checkr.SerNr = OPrw.ChequeNr;
        if (ReadFirstMain(Checkr,1,true)) then begin
          Checkr.TargetAccNr = "";
          Checkr.TargetObjects = "";
          VIr.SerNr = OPrw.VISerNr;
          if (ReadFirstMain(VIr,1,true)) then begin
            Checkr.TargetAccNr = VIr.APAcc;
          end;
          Checkr.ClearedAmount = Checkr.Amount;
          Checkr.Openf = 4;
          if (unokf) then begin
            Checkr.OrigAccNr = "";
            Checkr.TempAccNr = "";
            Checkr.TempObjects = "";
            Checkr.CUCode = "";
            Checkr.CUName = "";
            Checkr.Openf = 1;
            Checkr.ClearedAmount = Checkr.ClearedAmount - Checkr.Amount;
            DeleteTransaction(Checkr.SerNr,CheckYc);
          end;          
          if (RecordStore(Checkr,true)) then begin end;
        end;
      end;
      case 2:
      if (OPrw.stp==1) then begin
        OwnCheckr.SerNr = OPrw.ChequeNr;
        if (ReadFirstMain(OwnCheckr,1,true)) then begin
          OwnCheckr.VECode = OPrw.VECode;
          if (blank(OwnCheckr.VEName)) then begin
            OwnCheckr.CurncyCode = OPrw.BankCurncy;
          end;
          OwnCheckr.TransDate = OPp.PayDate;
          VIr.SerNr = OPrw.VISerNr;
          if (ReadFirstMain(VIr,1,true)) then begin
            OwnCheckr.VEName = VIr.VEName;
            OwnCheckr.OrigAccNr = VIr.APAcc;
          end else begin
            OwnCheckr.VEName = OPrw.Comment;
          end;
          if (blank(OwnCheckr.TempAccNr)) then begin OwnCheckr.TempAccNr = accnr; end;
          if (blank(OwnCheckr.TempObjects)) then begin OwnCheckr.TempObjects = objs; end;
          OrdenChqr.Code = OPrw.VECode;
          if (ReadFirstMain(OrdenChqr,1,true)) then begin
            OwnCheckr.VEName = OrdenChqr.Comment;
          end;
          if (OPrw.RecVal<0) then begin
            OwnCheckr.Openf = 5;
          end else begin
            if (OwnCheckr.ChkMode==2) then begin
              OwnCheckr.Openf = 2;
              OwnCheckr.ClearingDate = CurrentDate;
            end else begin
              OwnCheckr.Openf = 1;
            end;
          end;
          if (unokf) then begin
            OwnCheckr.OrigAccNr = "";
            OwnCheckr.VEName = "";
            OwnCheckr.TempAccNr = "";
            OwnCheckr.TempObjects = "";
            OwnCheckr.Openf = 0;
            DeleteTransaction(OwnCheckr.SerNr,OwnCheckYc);
          end;                    
          if (RecordStore(OwnCheckr,true)) then begin end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt OPVcRecordSave(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OPr.OrderedFlag!=0) then begin
    APUpdateOP(OPr,OP2r,true,false,false,false,false);
  end;  
  if ((OPr.DoneFlag!=0) and (OPr.OrderedFlag!=0)) then begin
    OPPUpdateOP(OPr,false,false);
  end;
  if (OPr.DoneFlag==1) then begin
//      ( (OPr.OrderedFlag==1) and (SupportTempBook(OPp,OPVc)) ) ) then begin //not needed I think
    UpdateOPChecks(OPr,false);
  end;
  OPVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt OPVcRecordSaveAfter(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OPr.StatFlag==0) then begin
    RecidAction_rlOPstat(OPr);
  end;
  if (OPr.DoneFlag<>0) then begin
    SaveChequeLinkAndWHCertificate(OPr);
    StoreLiqInfoFromOP(OPr);
  end;
  OPVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt OPVcRecordImportAfter(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OPr.StatFlag==0) then begin
    RecidAction_rlOPstat(OPr);
  end;
  OPVcRecordImportAfter = res;
  RETURN;
END;

updating procedure RemovePrepaymentError(record OPVc OPp)
BEGIN
  Integer rwcnt,i,j;
  record OPVc OPr;
  row OPVc OPrw;
  string 5 curncy;
  val feesum;
  record BaseCurBlock bascur;
  Boolean iserror;
  Boolean a,b,c;

  a = false;
  b = false;
  c = false;
  iserror = false;
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if (i>0) then begin
      if (OPrw.stp==7) then begin
        if ((nonblank(OPrw.Comment)) or (nonblank(OPrw.BankAcc))) then begin a = true; end;
        if (OPrw.VISerNr!=-1) then begin c = true; end;
        if (i==1) then begin
          feesum = OPrw.RecVal;
          curncy = OPrw.RecCurncy;
        end else begin
          if ((curncy==OPrw.RecCurncy) and (feesum==OPrw.RecVal)) then begin
            b = true;
          end else begin
            b = false;
          end;
        end;
      end;
    end;
    MatRowPut(OPr,i,OPrw);
  end;
  for (i=1;i<rwcnt;i=i+2) begin
    MatRowGet(OPp,i,OPrw);
    if (OPrw.stp!=7) then begin goto LRemovePrepaymentError; end;
  end;
  if (i!=rwcnt+1) then begin goto LRemovePrepaymentError; end;
  if ((a==false) and (b==false) and (c==false)) then begin goto LRemovePrepaymentError; end;
  BlockLoad(bascur);
  j = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.stp==7) then begin
      if (i==rwcnt-1) then begin
        OPrw.VISerNr = -1;
        OPrw.Comment = "";
        OPrw.BankAcc = "";
        OPrw.PInvCurncy = bascur.BaseCur1;
        OPrw.BankCurncy = bascur.BaseCur1;
        OPrw.RecCurncy = bascur.BaseCur1;
        MatRowPut(OPp,j,OPrw);
        j = j + 1;
      end;
    end else begin
      MatRowPut(OPp,j,OPrw);
      j = j + 1;
    end;
  end;
LRemovePrepaymentError:;
  RETURN;
END;

procedure ConvertOPtoDualBase(record OPVc OPp)
BEGIN
  record BaseCurBlock bascur;
  row OPVc OPrw;
  Integer rwcnt,i;

  BlockLoad(bascur);
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if (blank(OPrw.PInvCurncy)) then begin
      OPrw.PInvCurncy = bascur.BaseCur1;
    end;
    if (blank(OPrw.RecCurncy)) then begin
      OPrw.RecCurncy = bascur.BaseCur1;
    end;
    if (blank(OPrw.BankCurncy)) then begin
      OPrw.BankCurncy = bascur.BaseCur1;
    end;
    MatRowPut(OPp,i,OPrw);
  end;
  OPSumup(OPp,false);
  RETURN;
END;

/*global
updating function LongInt OPVcRecordImport(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record OPVc lOPr;
  record ConvMasterBlock cvm;
  Boolean gToDualBase;
  
  lOPr.SerNr = OPr.SerNr;
  if ((ReadFirstMain(lOPr,1,true)==false) or (Importing==false)) then begin
    if (OPr.Invalid==0) then begin
    BlockLoad(cvm);
    if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
    if (gToDualBase) then begin
      ConvertOPtoDualBase(OPr);
    end;
//    RemovePrepaymentError(OPr);
    OPr.StatFlag = 0;
    if ((OPr.RejectedFlag==0) and (OPr.OrderedFlag!=0)) then begin
      APUpdateOP(OPr,OP2r,true,false,false,true,false);
    end;
    if (OPr.DoneFlag==1) then begin
      OPr.OrderedFlag = 1;
    end;
    if ((OPr.DoneFlag!=0) and (OPr.OrderedFlag!=0)) then begin
      OPPUpdateOP(OPr,false,true);
    end;
    OPr.StatFlag = 0;
    end;      
  end;      
  if (OPr.DoneFlag==1) then begin
//    SaveChequeLinkAndWHCertificate(OPr);// on import ??, done on update and on save
  end;
  OPVcRecordImport = res;
  RETURN;
END;*/

updating procedure DeleteWHCertificates(LongInt opnr)
BEGIN
  record WHCertificateVc WHCerfr;
  Boolean found;
  
  found = true;
  WHCerfr.OPNr = opnr;
  while (LoopKey("OPNr",WHCerfr,1,found)) begin
    if (WHCerfr.OPNr!=opnr) then begin found = false; end;
    if (found) then begin
      RecordDelete(WHCerfr);
      StepBack(WHCerfr);
    end;
  end;
  RETURN;
END;

global
updating function LongInt OPVcRecordUpdate(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  OPr.StatFlag = 0;
  if ((OPr.DoneFlag!=0) and (OPr.OrderedFlag!=0)) and (OP2r.DoneFlag==0) then begin
    OPPUpdateOP(OPr,false,false);
  end;
  if (OPr.OrderedFlag!=0) then begin
    if (OP2r.OrderedFlag!=0) then begin
      APUpdateOP(OPr,OP2r,true,true,false,false,false);
    end else begin
      APUpdateOP(OPr,OP2r,true,false,false,false,false);
    end;  
  end;
  if ((OPr.DoneFlag!=0) and (OP2r.DoneFlag==0)) then begin
//      ((OP2r.OrderedFlag==0) and ((OPr.OrderedFlag==1)   and (SupportTempBook(OPp,OPVc))) ) or//not needed I think
//      ((OP2r.RejectedFlag==0) and ((OPr.RejectedFlag==1) and (SupportTempBook(OPp,OPVc))) )) then begin//not needed I think
    UpdateOPChecks(OPr,false);
  end;
  if ((OPr.DoneFlag==0) and (OP2r.DoneFlag!=0)) then begin//unok
    OPPUpdateOP(OPr,true,false);
    DeleteTransaction(OPr.SerNr,OPYc);
    UpdateOPChecks(OPr,true);
    DeleteWHCertificates(OPr.SerNr);
  end;
  if ((OPr.OrderedFlag==0) and (OP2r.OrderedFlag!=0)) then begin//unok
    APUpdateOP(OP2r,OPr,false,true,true,false,true);
  end;  
  OPVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt OPVcRecordUpdateAfter(var record OPVc OPr,record OPVc OP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((OPr.DoneFlag==0) and (OP2r.DoneFlag==0)) then begin
    UpdateOPrsStats(OPr,OP2r);
  end;
  if ((OPr.DoneFlag!=0) and (OP2r.DoneFlag==0)) then begin
    if (OPr.StatFlag==0) then begin
      RecidAction_rlOPstat(OPr);
    end;
    SaveChequeLinkAndWHCertificate(OPr);
    StoreLiqInfoFromOP(OPr);
  end;
  if ((OPr.DoneFlag==0) and (OP2r.DoneFlag!=0)) then begin//unok
    DeleteOPrs(OPr);
    OPr.StatFlag = 0;
    StoreUnOKHistory("OPVc",OPr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
  end;
  if ((OPr.Invalid!=0) and (OP2r.Invalid==0)) then begin
    if (OP2r.DoneFlag!=0 or OP2r.OrderedFlag!=0) then begin
      InvalidateTR(OPYc,OPr.SerNr);
      OPPUpdateOP(OPr,true,false);
      APUpdateOP(OP2r,OPr,false,true,true,false,false);
      InvalidateWHCertificates(OPr.SerNr);
      InvalidateEPaymentQue(OPr.SerNr);
    end;
  end;
  OPVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt OPVcRecordReset(var record OPVc OPr,record OPVc OP2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  OPr.DoneFlag = 0;
  OPVcRecordReset = res;
  RETURN;
END;

global
function LongInt OPVcRecordProtectFields(var record OPVc OPr,record OPVc OP2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  OP2r.StatFlag = OPr.StatFlag;
  OPVcRecordProtectFields = res;
  RETURN;
END;

global
function LongInt OPVcRecordInvalidateTest(var record OPVc OPr,record OPVc OP2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record ARVc ARr;
  record DBLockBlock DBLockRec;
  val t;
  row OPVc OPrw;
  Integer i,rwcnt;
  record OPPVc OPPr;
  record EPaymentQueVc EPQr;
  
  res = 1;
  if (UserCanAction("OPInvalid",true)==false) then begin
    res = 0;
    goto LOPVcRecordInvalidateTest;
  end;
  if (OPr.Invalid!=0) then begin
    res = 0;
    goto LOPVcRecordInvalidateTest;
  end;
  if (OPr.DoneFlag==0 and OPr.OrderedFlag==0) then begin
    res = 0;
    goto LOPVcRecordInvalidateTest;
  end;
  EPQr.OPSerNr = OPr.SerNr;
  if (ReadFirstKey("OPSerNr",EPQr,1,true)) then begin
    if (EPQr.Status!=0) then begin
      res = 0;
      goto LOPVcRecordInvalidateTest;
    end;
  end;
  BlockLoad(DBLockRec);
  if (OPr.DoneFlag!=0) then begin
    if (OPr.TransDate<=DBLockRec.SLLock) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LOPVcRecordInvalidateTest;
    end;
    if (OPr.TransDate<=DBLockRec.SLWarn) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
    end;
  end;
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.PrepayNr>0) then begin
      OPPr.SerNr = OPrw.PrepayNr;
      if (ReadFirstMain(OPPr,1,true)) then begin
      end;
      if (OPPr.PPVal!=OPrw.RecVal) then begin
        MessageBox(20102,"");
        res = 0;
        goto LOPVcRecordInvalidateTest;
      end;
    end;
  end;
  OPr.Invalid = 1;
LOPVcRecordInvalidateTest:;
  OPVcRecordInvalidateTest = res;  
  RETURN;
END;