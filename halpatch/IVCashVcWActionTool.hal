external function val MulRateToBase1(var string,val,val,val,val,val,val,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetPDVRebt(string,var val);
external function string 255 FindINObjects(string,string);
external function val MulWithRateToBase1(var string,Date,val,Integer);
external procedure Base1ToBase2(var val,Date,var val);
external function val FindVAT(string,val,Integer,Integer);
external procedure GetCurncyRoundoff(string,string,var Integer,var LongInt,var Integer);
remote function Boolean PasteCustInOR(var record ORVc);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function Boolean ORDchrsum(var record ORVc,Integer);
external procedure ORSumup(var record ORVc);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Boolean IVCashVc_ExplodeRecepy(record INVc,val,record RetVc,string,Integer);
external function Boolean QtyDepPriceL(string);
external procedure IVCashSumup(var record IVCashVc,Boolean);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Boolean IVCashDchrsum(record IVCashVc,Integer,Integer);
external procedure IVCashMultiLineText(record IVCashVc,record INVc,string,Integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure IVCashVcGetCalcItemPrice(record INVc,record IVCashVc,Integer,var val);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Integer GetVATLaw();
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,
                                                string,Boolean,var Boolean,string,var string,var val,string);

global
procedure IVCashDUpdatePrices(record IVCashVc IVCashp)
BEGIN
  row IVCashVc IVCashrw;
  record INVc INr; //
  Integer i,rwcnt;
  Boolean calcprice,dummyf;
  string 255 tstr,tax2code;
  val price,baseprice,tax2prc;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (nonblank(IVCashrw.ArtCode)) then begin
      IVCashrw.Price = blankval;
      if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashp.CurncyCode,
        IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,
        IVCashp.LangCode,IVCashp.CustCat,IVCashp.PriceList,IVCashp.RebCode,
        price,tstr,IVCashrw.vRebate,IVCashrw.VATCode,baseprice,
        IVCashrw.SalesAcc,0,calcprice,IVCashp.TransDate,IVCashp.CustCode,true,dummyf,IVCashp.PayDeal,tax2code,tax2prc,"")) then begin end;
      IVCashrw.Price = price;  
      IVCashrw.BasePrice = baseprice;
      IVCashrw.ArtCode = INr.Code;
      MatRowPut(IVCashp,i,IVCashrw);
      if (IVCashDchrsum(IVCashp,i,GenOptRec.UseDiscount)) then begin
        IVCashDchsum(IVCashp,i);
      end;
    end;
  end;
  RETURN;
END;

procedure IVCash2Sumup(record IVCashVc IVCashp,record SMVc SMr,Integer vatcnt,var val s0,var val s1,var val s2,var val s3,var val s4,var val TotGP)
BEGIN
  Integer i,rwcnt;
  record INVc INr;
  row IVCashVc IVCashrw;
  val tax1sum,t,rowsum;

  s0 = blankval;
  s1 = blankval;
  s2 = blankval;
  s3 = blankval;
  s4 = blankval;
  IVCashp.TotQty = blankval;
  IVCashp.TotWeight = blankval;
  IVCashp.TotVolume = blankval;
  
  TotGP = 0;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    rowsum = 0;
    if (IVCashrw.stp==1) then begin
      TotGP = TotGP + IVCashrw.rowGP;
      if (IVCashrw.DownPaidSum!=0) then begin
        rowsum = IVCashrw.DownPaidSum;
        t = IVCashrw.Quant-IVCashrw.OrdQuant;
        if (t>0) then begin
          rowsum = rowsum + t*IVCashrw.Price;
        end;        
        if (IVCashp.InclVAT==0) then begin
          rowsum = rowsum - FindVAT(IVCashrw.VATCode,rowsum,1,0);
        end;
      end else begin
        rowsum = IVCashrw.Sum;
      end;
      if (IVCashp.InclVAT==0) then begin/* 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay */        
        s1 = rowsum + s1;
        t = FindVAT(IVCashrw.VATCode,rowsum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
        if (t==0) then begin
          s2 = rowsum + s2;
        end;    
        s3 = t + s3;
        AddVATBase(SMr,IVCashrw.VATCode,rowsum,blankval,vatcnt,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
      end else begin/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
        s4 = rowsum + s4;
        t = FindVAT (IVCashrw.VATCode,rowsum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
        s3 = t + s3;
        AddVATBase(SMr,IVCashrw.VATCode,rowsum,blankval,vatcnt,IVCashp.InclVAT,IVCashp.NoTAXonVAT);        
        if (t==0) then begin
          s2 = rowsum + s2;
        end else begin
          s1 = rowsum + s1;
        end;  
      end;
      IVCashp.TotQty = IVCashp.TotQty + IVCashrw.Quant;
      INr.Code = IVCashrw.ArtCode;
      if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
        t = IVCashrw.Quant * INr.Volume;
        IVCashp.TotVolume = t + IVCashp.TotVolume;
        t = IVCashrw.Quant * INr.Weight;
        IVCashp.TotWeight = t + IVCashp.TotWeight;
      end;                    
    end;
  end;
  RETURN;  
END;

global
procedure CalculatePOSCashBack(var record IVCashVc IVCashr)
BEGIN
  val t;

  if ((IVCashr.RecValue!=0) or (IVCashr.RecValue2!=0) or (IVCashr.RecValue3!=0) or (IVCashr.CashValue!=0) or (IVCashr.CashValueCur!=0)) then begin// Edit ************************** Monday, 15 April 2013 16:52:30
    t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.RecValue3 + IVCashr.CashValue + MulWithRateToBase1(IVCashr.POSCurncyCode,IVCashr.InvDate,IVCashr.CashValueCur,DefaultCurRoundOff);
    IVCashr.RetValue = t - IVCashr.Sum4; 
    Base1ToBase2(IVCashr.RetValue,IVCashr.InvDate,t); 
    IVCashr.RetValueB2 = t;
    Base1ToBase2(IVCashr.CashValue,IVCashr.InvDate,t); 
    IVCashr.CashValueB2 = t;
  end;
  RETURN;
END;

global
procedure IVCashSumup(var record IVCashVc IVCashp,Boolean roundof)
BEGIN
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt;
  val s0,s1,s2,s3,s4,TotGP;
  val tax1sum,t,discountval;
  Integer rndtotal,roundvat;
  LongInt roundlines;
  string 255 tstr;
  val FrBase,FrGP,FrPrice;
  record DefCashBlock DCr;
  
  BlockLoad(DCr); // Annoying...
  SetupVATBase(SMr,vatcnt);
  GetPDVRebt(IVCashp.PayDeal,discountval);
  s0 = IVCashp.Sum0;
  s1 = IVCashp.Sum1;
  s2 = IVCashp.Sum2;
  s3 = IVCashp.Sum3;
  s4 = IVCashp.Sum4;
  IVCash2Sumup(IVCashp,SMr,vatcnt,s0,s1,s2,s3,s4,TotGP);  
  IVCashp.Sum0 = s0;
  IVCashp.Sum1 = s1;
  IVCashp.Sum2 = s2;
  IVCashp.Sum3 = s3;
  IVCashp.Sum4 = s4;
  IVCashp.TotGP = TotGP;  
  CalcVATBaseVAT(SMr,IVCashp.InclVAT,IVCashp.NoTAXonVAT,vatcnt,s3,tax1sum);
  GetCurncyRoundoff(IVCashp.CurncyCode,DCr.DefCashPayMode,rndtotal,roundlines,roundvat);
  if (roundof) then begin
    s3 = Round(s3,roundvat);
  end else begin
    rndtotal = 2;
  end;
  if (IVCashp.InclVAT!=0) then begin
    s4 = tax1sum + s4;
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    IVCashp.Sum0 = t + IVCashp.Sum0;
  end else begin
    s4 = s1 + s3;
    s4 = tax1sum + s4;
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    IVCashp.Sum0 = t + IVCashp.Sum0;
  end;
  IVCashp.Sum0 = Round(IVCashp.Sum0,DefaultCurRoundOff);
  s1 = Round(s1,DefaultCurRoundOff);
  s2 = Round(s2,DefaultCurRoundOff);
  if (nonblank(IVCashp.CurncyCode)) then begin
    IVCashp.BaseSum4 = MulRateToBase1(IVCashp.CurncyCode,s4,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
  end;
/*  
  t = IVCashp.RecValue + IVCashp.RecValue2;
  t = t + IVCashp.CashValue;
  t = t + MulWithRateToBase1(IVCashp.POSCurncyCode,IVCashp.InvDate,IVCashp.CashValueCur,DefaultCurRoundOff);
  IVCashp.RetValue = t - IVCashp.Sum4;
  Base1ToBase2(IVCashp.RetValue,IVCashp.InvDate,t);
  IVCashp.RetValueB2 = t;
  Base1ToBase2(IVCashp.CashValue,IVCashp.InvDate,t);
  IVCashp.CashValueB2 = t;
*/
  IVCashp.Sum1 = s1;
  IVCashp.Sum2 = s2;
  IVCashp.Sum3 = s3;
  IVCashp.Sum4 = s4;  
  CalculatePOSCashBack(IVCashp);  
  if ((GetVATLaw==13) and (blank(IVCashp.PayDeal)) and (blank(IVCashp.PayDeal2)) and (blank(IVCashp.PayDeal3))) then begin//vatFinnish
    IVCashp.Sum4 = Round(IVCashp.Sum4,10);
  end;
  RETURN;
END;


global
function Boolean IVCashVc_PasteArtCode1(var record IVCashVc IVCashr,Integer rownr,var string warning)
BEGIN
  Boolean res;
  row IVCashVc IVCashrw;
  record INVc INr;
  string 255 salesacc,vatcode,curitemname,tax2code,tempVatCode;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  record CUVc CUr;
  record ITVc ITr;

  MatRowGet(IVCashr,rownr,IVCashrw);
  BlockLoad(GenOptRec);
  IVCashrw.Price = blankval;
  IVCashrw.vRebate = blankval;
  vatcode = IVCashrw.VATCode;
  if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                          IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                          IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                          price,curitemname,vreb,vatcode,baseprice,salesacc,
                          0,calcpricef,IVCashr.TransDate,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"")) then 
  begin
    res = true;
    IVCashrw.Price     = price;
    IVCashrw.BasePrice = baseprice;
    IVCashrw.vRebate     = vreb;
    IVCashrw.ArtCode   = INr.Code;
    IVCashrw.VATCode = vatcode;
    IVCashrw.SalesAcc = salesacc;
    IVCashrw.Spec = curitemname;
    MatRowPut(IVCashr,rownr,IVCashrw);      
    if (nonblank(INr.WarnText1)) then begin
      warning = INr.WarnText1;
    end;      
    if (calcpricef) then begin
      t = -1;
      IVCashVcGetCalcItemPrice(INr,IVCashr,rownr,t);
    end;    
//**************************************************************************************************    
   
   
   MatRowGet(IVCashr,rownr,IVCashrw);
    if (nonblank(IVCashr.CustVATCode)) then begin
      IVCashrw.VATCode = IVCashr.CustVATCode;
      
    ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (nonblank(ITr.VATCodeDom)) then begin
          IVCashrw.VATCode = ITr.VATCodeDom;
          end;
          end;
    
    if (nonblank(INr.VATCode)) then begin IVCashrw.VATCode = INr.VATCode; end;
    
//**************************************************************************************************    
    
    end;
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      IVCashrw.Recepy = INr.Recepy;
    end else begin
      IVCashrw.Recepy = "";
    end;  
    if (GetItemNameStr(1,curitemname,IVCashr.LangCode,INr.Name,INr.Code)) then begin
    end;
    IVCashrw.Spec = curitemname;
//?    IVCashVcCheckItemPrice(IVCashr,IVCashrw,false);
    if (IVCashrw.Quant==0) then begin
      IVCashrw.Quant = 1;
    end;
    IVCashrw.Coefficient = INr.UnitCoefficient;
    IVCashrw.Objects = FindINObjects(INr.Objects,INr.Group);
    IVCashrw.PriceFactor = INr.PriceFactor;
    MatRowPut(IVCashr,rownr,IVCashrw);
    chrsum = true;
    if ((INr.ExplodeRec==1) and (nonblank(IVCashrw.Recepy))) then begin	
      IVCashMultiLineText(IVCashr,INr,IVCashr.LangCode,rownr);
    end;      
    if (nonblank(INr.InvRecepy)) then begin
//?            Do_InvoiceRecepy(IVCashr,&INr,row+1);??
      IVCashDUpdatePrices(IVCashr);
      chsum = true;
    end;       
  end;
  if (chrsum) then begin
    chsum = IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount);
  end;
  if (chsum) then begin
    IVCashDchsum(IVCashr,rownr);
    IVCashSumup(IVCashr,true);
  end;   
  IVCashVc_PasteArtCode1 = res;  
  RETURN;
END;

function Boolean IVCashPasteDClassSum(var record IVCashVc IVCashr,Integer rownr)
BEGIN
  row IVCashVc IVCashrw;
  record INVc INr;
  val t,s;
  record GeneralOptionBlock GenOptRec;
  
  matrowget(IVCashr,rownr,IVCashrw);
  
	BlockLoad(GenOptRec);
	if ((IVCashrw.Quant!=0) and (IVCashrw.Price!=0)) then begin
		INr.Code = IVCashrw.ArtCode;
		if (ReadFirstMain(INr,1,true)) then begin
		end;
		if (INr.PriceFactor!=0) then begin
			t = IVCashrw.Price/INr.PriceFactor;
		end else begin
			t = IVCashrw.Price;
		end;
		s = IVCashrw.Sum/IVCashrw.Quant;
		s = t - s;
		s = s*100;
		s = s/t;
		IVCashrw.vRebate = Round(s,3);// Edit ************************** Thursday, 21 June 2012 10:35:26
		MatRowPut(IVCashr,rownr,IVCashrw);
	end;
	if (IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount)) then begin
		IVCashDchsum(IVCashr,rownr);
		IVCashSumup(IVCashr,true);
	end;
  IVCashPasteDClassSum = true;
  RETURN;
END;

global
function Boolean IVCashVc_PasteArtCode(var record IVCashVc IVCashr,Integer rownr,var string warning)
BEGIN
  Boolean res;
  row IVCashVc IVCashrw;
  record INVc INr;
  record RecVc Recr;
  row RecVc Recrw;
  integer i,mtrw,k,wn;
  //messagebox(0,1);

	MatRowget(IVCashr,rownr,IVCashrw);
  INr.Code = IVCashrw.ArtCode;
  readfirstmain(INr,1,true);
  if((INr.ItemType==2) and (nonblank(INr.Recepy)))then begin
  		Recr.Code = INr.Recepy;
  		if(readfirstmain(Recr,1,true))then begin
  			mtrw = matrowcnt(Recr);
  			if(mtrw>0)then begin
  				matrowdelete(IVCashr,rownr);
  			end;
  			For(i=mtrw-1;i>=0;i=i-1) begin
	  			matrowget(Recr,i,Recrw);
	  			IVCashrw.ArtCode = Recrw.Item;
	  			MatRowInsert(IVCashr,rownr,IVCashrw);
	  			res = IVCashVc_PasteArtCode1(IVCashr,rownr,warning);
	  			matrowget(IVCashr,rownr,IVCashrw);

	  			IVCashrw.Sum = Recrw.ExtraCost;
	  			
	  			matrowput(IVCashr,rownr,IVCashrw);
	  			IVCashPasteDClassSum(IVCashr,rownr);
			end; 
  		end;
  end else begin
  		res = IVCashVc_PasteArtCode1(IVCashr,rownr,warning);
  end;

  IVCashVc_PasteArtCode = res;  
  RETURN;
END;

global
function Boolean IVCashVc_PasteQuant(var record IVCashVc IVCashr,Integer rownr)
BEGIN
  Boolean res;
  record INVc INr;
  string 255 salesacc,vatcode,curitemname,tax2code;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;
  row IVCashVc IVCashrw;
  Boolean dummyf;
record ITVc ITr;

  MatRowGet(IVCashr,rownr,IVCashrw);
  BlockLoad(GenOptRec);
  vreb = IVCashrw.vRebate;  
  price = IVCashrw.Price;
  if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                            IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                            IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            0,calcpricef,IVCashr.TransDate,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"")) then 
  begin
    res = true;
    if (baseprice<>0) then begin
      IVCashrw.BasePrice = baseprice;
    end;
    IVCashrw.vRebate = vreb;
    IVCashrw.ArtCode   = INr.Code;
    IVCashrw.VATCode = vatcode;
    IVCashrw.SalesAcc = salesacc;
    IVCashrw.Spec = curitemname;
    IVCashrw.ArtCode = INr.Code;
    if (nonblank(IVCashr.PriceList)) then begin
      if (QtyDepPriceL(IVCashr.PriceList) == true) then begin
        IVCashrw.Price = price;
      end;  
    end;
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (calcpricef) then begin
      t = -1;
      IVCashVcGetCalcItemPrice(INr,IVCashr,rownr,t);
    end;
   //**************************************************************************************************    
   
   
   MatRowGet(IVCashr,rownr,IVCashrw);
    if (nonblank(IVCashr.CustVATCode)) then begin
      IVCashrw.VATCode = IVCashr.CustVATCode;
    
    
   
    ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (nonblank(ITr.VATCodeDom)) then begin
          IVCashrw.VATCode = ITr.VATCodeDom;
          end;
          end;
          
    if (nonblank(INr.VATCode)) then begin IVCashrw.VATCode = INr.VATCode; end;
    
          
//**************************************************************************************************    
   
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        IVCashrw.Recepy = INr.Recepy;
      end else begin
        IVCashrw.Recepy = "";
      end;
    end;
    MatRowPut(IVCashr,rownr,IVCashrw);
    chrsum = true;
    if ((INr.ExplodeRec!=0) and (nonblank(IVCashrw.Recepy))) then begin
      if (IVCashVc_ExplodeRecepy(INr,IVCashrw.Quant,IVCashr,IVCashrw.Recepy,rownr)) then begin
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashrw.Recepy = "";
        MatRowPut(IVCashr,rownr,IVCashrw);
      end;
    end;
  end;
  if (chrsum) then begin
    chsum = IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount);
  end;
  if (chsum) then begin
    IVCashDchsum(IVCashr,rownr);
    IVCashSumup(IVCashr,true);
  end;       
  IVCashVc_PasteQuant = res;  
  RETURN;
END;

global
updating function Boolean CreateLateDeliveryORFromIVCash(var record IVCashVc IVCashr,var record ORVc ORr)
BEGIN
  Boolean res;
  row ORVc ORrw;
  record IVCashVc oldIVCashr;
  row IVCashVc IVCashrw;
  Integer wn,nwn;
  Integer i,rwcnt,ori;
  val downpaid,t,s,downpaidsum;
  Boolean testf;
  Integer rndtotal,rndvat,vatcnt;
  LongInt rndline;
  record SMVc VATr;

  SetupVATBase(VATr,vatcnt);          
  RecordCopy(oldIVCashr,IVCashr);
  RecordNew(ORr);
  ORr.CustCode = IVCashr.CustCode;
  if (PasteCustInOR(ORr)) then begin end;
  ORr.PayDeal = IVCashr.PayDeal;
  ORr.CreditCard = IVCashr.CreditCard;
  ORr.AuthorizationCode = IVCashr.AuthorizationCode;
  ORr.Sum3 = IVCashr.Sum3;
  ORr.Sum1 = IVCashr.Sum1;
  ORr.Sum4 = IVCashr.Sum4;
  ORr.OrdDate = CurrentDate;
  ORr.OurContact = IVCashr.OurContact;
//    ORr.ClientContact = IVCashr.ClientContact;
  ORr.SalesMan = IVCashr.SalesMan;
  ORr.Location = IVCashr.Location;
  ORr.PriceList = IVCashr.PriceList;
  ORr.RebCode = IVCashr.RebCode;
  ORr.LangCode = IVCashr.LangCode;
  ORr.Comment = IVCashr.InvComment;
  ORr.TotQty = IVCashr.TotQty;
  ORr.TotWeight = IVCashr.TotWeight;
  ORr.TotVolume = IVCashr.TotVolume;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.OrdQuant!=0) then begin
      ClearRow(ORr,ORrw,1);
      ORrw.ArtCode = IVCashrw.ArtCode;
      ORrw.Quant = IVCashrw.OrdQuant;
      ORrw.Spec = IVCashrw.Spec;
      ORrw.SerialNr = IVCashrw.SerialNr;
      ORrw.Price = IVCashrw.Price;
      ORrw.vRebate = IVCashrw.vRebate;
      ORrw.Sum = IVCashrw.Sum;
      ORrw.VATCode = IVCashrw.VATCode;
      downpaidsum = IVCashrw.DownPaidSum;
      if (downpaidsum!=0) then begin
        if (IVCashr.InclVAT==0) then begin
          downpaidsum = downpaidsum - FindVAT(IVCashrw.VATCode,downpaidsum,1,0);
        end;
        downpaid = downpaid + downpaidsum;
        AddVATBase(VATr,ORrw.VATCode,downpaidsum,blankval,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);      
      end else begin
        downpaid = downpaid + IVCashrw.Sum;
        AddVATBase(VATr,ORrw.VATCode,IVCashrw.Sum,blankval,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);
      end;
      MatRowPut(ORr,ori,ORrw);
      testf = ORDchrsum(ORr,ori);
      IVCashrw.OrdRow = ori;
      MatRowPut(IVCashr,i,IVCashrw);
      ori = ori + 1;
    end;
  end;
  CalcVATBaseVAT(VATr,ORr.InclVAT,ORr.NoTAXonVAT,vatcnt,s,t);
  GetCurncyRoundoff(ORr.CurncyCode,ORr.PayDeal,rndtotal,rndline,rndvat);
  ORr.Sum3 = Round(s,rndvat);
  ORr.DownPaySent = downpaid;// + ORr.Sum3;
  ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,ORr.LangCode);
  if (ORr.SerNr!=-1) then begin
    ORSumup(ORr);
    if (RecordStore(ORr,false)) then begin
      IVCashr.OrderNr = ORr.SerNr;
      if (RecordUpdate(oldIVCashr,IVCashr,true)==0) then begin
        res = true;
      end;
    end;
  end;
  CreateLateDeliveryORFromIVCash = res;
  RETURN;
END;

