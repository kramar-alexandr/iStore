external procedure IPGetVATCodeTAX1AccNumbers(record VATCodeBlock,string,var string,var string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function val FindTAX2(val,val,Integer);
external function string 20 GetTax2Acc(string);
external function string 5 AddVATCodeToVATAccRows(string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,Integer);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure GetVATCodeAccNumbers(string,var string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,Integer);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external procedure ConvertSalesAcc(var string,Integer);
external function Integer GetVATLaw();
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetVATCodeVatAcc(string,var string);

procedure FindIPCurncyRate(LongInt prepnr,var val from,var val to1,var Date tdp)// we need BankCurncy in ARPayView and ARPayHistView
BEGIN
  record ARPayHistVc ARPayHistr;
  record BaseCurBlock bcur;
  record IPVc IPr;
  
  BlockLoad(bcur);
  ARPayHistr.FileName = "IPVc";
  ARPayHistr.CUPNr = prepnr;
  if (ReadFirstMain(ARPayHistr,2,true)) then begin
    if (((blank(ARPayHistr.BankCurncy)) or (ARPayHistr.BankCurncy==bcur.BaseCur1)) and (ARPayHistr.CurncyCode!=ARPayHistr.BankCurncy)) then begin
      to1 = ARPayHistr.BookVal/ARPayHistr.Val;//what if rate to base curncy 2
      from = 1;
      tdp = ARPayHistr.TransDate;
    end;
  end;  
  RETURN;
END;     

global     
function Boolean CheckVATLaws()
BEGIN  
  Boolean res;
    
  if ((GetVATLaw!=LangLatvian) and (GetVATLaw!=LangRussian) and 
      (GetVATLaw!=LangLithuanian) and (GetVATLaw!=LangEstonian)) then 
    begin
      res = true;
  end;      
  CheckVATLaws = res;
  RETURN;
END;

global
procedure GetVATCodePrelVATAcc(string vatcode,var string vatacc)
BEGIN
  record VATCodeBlock VATRec;
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);  
  vatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      vatacc = vatrw.PaySalesVATAcc;
      i = rwcnt;
    end;  
  end;  
  RETURN;
END;

global
function Integer AddIVPrePayRow(var record TRVc gTRp,record IVVC IVp,Integer rownr,string object,val frrate,val torate1,val torate2,
                                val baserate1,val baserate2,Boolean dc1,Boolean dc2,var string tstr,var val TotSum,
                                record SMVc VATr,Integer vatcnt,record TRGenBlock TRGenRec,record AccBlock ARAccRec)
BEGIN
  record CUVc CUr;
  record CCatVc CCatr;
  record INVc INr;
  record ARPayVc ARPayr;
  record RoundBlock RBr;
  val trev,tvat,btvat,t1,rs;
  row IVVc IVrw;
  string 255 objstr,vatobjstr,taccnumber,psvatacc,tax1acc;
  Boolean infound,foundarp;
  Integer errstrno;
  string 2 vatcod;
  string 10 vatacc,revacc;
  string 255 tstr2;
  val baseprep,diff,bookrs,coff;
  val pfr,pto1,pto2,pbr1,pbr2;
  Integer gain;
  val nilv;
  Date td;
  Integer err;
  record VATCodeBlock VATCodeb;

  BlockLoad(VATCodeb);
  nilv = -1;
  errstrno = 1085; // Transaction could not be generated 
  MatRowGet(IVp,rownr,IVrw);
  revacc = "";
  CUr.Code = IVp.CustCode; 
  if (ReadFirstMain(CUr,1,true)) then begin
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin
      revacc = CCatr.OnAccAcc;
    end;
  end;
  if (blank(revacc)) then begin
    revacc = ARAccRec.OnAccAcc;
  end;  
  vatcod = IVrw.VATCode;
  if (IVrw.stp==6) then begin
    ARPayr.CUPNr = IVrw.CUPNr;
    foundarp = ReadFirstMain(ARPayr,1,true);
    GetVATCodeVatAcc(vatcod,vatacc);
    trev = IVrw.Sum;
    MulVATIV(vatcod,trev,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);
    AddVATBase(VATr,vatcod,IVrw.Sum,blankval,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
    objstr = object;
    GetFullCurncyRate(ARPayr.CurncyCode,ARPayr.PayDate,pfr,pto1,pto2,pbr1,pbr2);
    if (CheckVATLaws) then begin
      FindIPCurncyRate(ARPayr.CUPNr,pfr,pto1,td);
    end;    
    baseprep = IVrw.BasePrice;//MulBaseRate(ARPayr.CurncyCode,&trev,&pfr,&pto1,&pto2,&pbr1,&pbr2,&baseprep,NIL,DefaultCurRoundOff);
    rs = MulRateToBase1(IVp.CurncyCode,trev,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    baseprep = rs;// Edit ************************** Monday, 16 July 2012 17:29:36
    diff = rs - baseprep;
    if (diff<0) then begin gain = -1; end;
    if (diff>0) then begin gain = 1; end;
    ConvertSalesAcc(revacc,IVp.ExportFlag);
    if (gain!=-1) then begin//tofollow corsp rules
      err = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,59,IVp.CurncyCode);
      
      tstr = tstr & " "; // To get a different comment 
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,objstr,dc1,taccnumber,0)) then begin end;
      if (IVp.ARonTR!=0) then begin
         AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,blankval,false,dc1,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,trev,nilv,
                                 IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,IVp.InvType==3,"","","");
      end else begin
        AddEuroCurncyTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,false,dc1,TotSum,IVp.CurncyCode,
                 frrate,torate1,torate2,baserate1,baserate2,trev,nilv,-1,IVp.InvType==3,taccnumber);
      end;
    end;
    if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
  // make sure it is not needed to have a sales account on every row, only those that contain a sum 
      if (baseprep!=0) then begin
        errstrno = GetAccNamCurVAT(revacc,tstr,tstr2,60,IVp.CurncyCode);
        if (errstrno!=0) then begin
          errstrno = 1901;
          goto LAddIVPrePayRow;
        end;
        if (CheckTTRPerRow("IVVc",revacc,objstr,dc2,taccnumber,0)) then begin end;
        if (IVp.ARonTR!=0) then begin
           AddEuroCurncyNomARTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,blankval,false,dc2,TotSum,
                                   ARPayr.CurncyCode,pfr,pto1,pto2,pbr1,pbr2,trev,nilv,
                                   IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,IVp.InvType==3,taccnumber,"","");
        end else begin
          AddEuroCurncyTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,false,dc2,TotSum,ARPayr.CurncyCode,
                         pfr,pto1,pto2,pbr1,pbr2,trev,nilv,-1,IVp.InvType==3,taccnumber);
        end;

      end;
      btvat = MulRateToBase1(IVp.CurncyCode,tvat,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if ((IVp.InclVAT>0) and (ARAccRec.RevInclVAT!=0)) then begin
        if (btvat!=0) then begin
          errstrno = GetAccNamCurVAT(ARAccRec.VATBAcc,tstr,tstr2,60,IVp.CurncyCode);
          if (errstrno!=0) then begin
            errstrno = 1903;
            goto LAddIVPrePayRow;
          end;
          if (CheckTTRPerRow("IVVc",ARAccRec.VATBAcc,"",dc1,taccnumber,0)) then begin end;
          AddEuroCurncyTrRow(gTRp,ARAccRec.VATBAcc,"",AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,btvat,false,dc1,TotSum,//vataccadd?
                             IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tvat,nilv,-1,IVp.InvType==3,taccnumber);
        end;
      end;
    end else begin
      if (baseprep!=0) then begin
        errstrno = GetAccNamCurVAT(revacc,tstr,tstr2,60,IVp.CurncyCode);
        if (errstrno!=0) then begin
          errstrno = 1901;
          goto LAddIVPrePayRow;
        end;
        if (CheckTTRPerRow("IVVc",revacc,objstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,false,dc2,TotSum,ARPayr.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,trev,nilv,-1,IVp.InvType==3,taccnumber);
      end;
    end;
    if (gain==-1) then begin//tofollow corsp rules
      err = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,59,IVp.CurncyCode);
      tstr = tstr & " "; // To get a different comment 
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,objstr,dc1,taccnumber,0)) then begin end;
      AddEuroCurncyTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,false,dc1,TotSum,IVp.CurncyCode,
                         frrate,torate1,torate2,baserate1,baserate2,trev,nilv,-1,IVp.InvType==3,taccnumber);
    end;
    if (gain==-1) then begin
      if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1918;
        goto LAddIVPrePayRow;
      end;
      AddEuroTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,diff,baserate1,baserate2,false,dc2,TotSum,IVp.InvType==3,"","","");
    end;
    if (gain==1) then begin
      if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LAddIVPrePayRow;
      end;
      AddEuroTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,diff,baserate1,baserate2,false,dc2,TotSum,IVp.InvType==3,"","","");
    end;
    if (ARPayr.VATVal!=0) then begin
      vatobjstr = ""; 
      if (ARAccRec.VATUseObj!=0) then begin
        vatobjstr = IVp.Objects;
      end;    
      rs = ARPayr.VATVal;
      bookrs = ARPayr.VATBookVal;
      if (trev<ARPayr.RVal) then begin
        coff = trev/ARPayr.RVal;
        BlockLoad(RBr);
        rs = Round(ARPayr.VATVal*coff,RBr.RndVat);
        bookrs = Round(ARPayr.VATBookVal*coff,RBr.RndVat);
      end;
      if ((ARAccRec.IPBookVAT==0) and (ARAccRec.PreIPBookVAT!=0)) or
         ((ARAccRec.IPBookVAT!=0) and (ARAccRec.PreIPBookVAT!=0)) then begin
        if (GetAccName(ARAccRec.OnAccVATAcc,tstr,60)==false) then begin 
          errstrno = 2137;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",ARAccRec.OnAccVATAcc,vatobjstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,ARAccRec.OnAccVATAcc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc1,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==3,taccnumber);

        GetVATCodeVATAcc(ARPayr.VATCode,vatacc);            
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 1903;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,ARAccRec.PreIPBookVAT,dc2,TotSum,IVp.CurncyCode,//used to be false, Agnieszka says should be true for all, must be true for Ukraine for sure
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==3,taccnumber);

      end;
      if ((ARAccRec.IPBookVAT!=0) and (ARAccRec.PreIPBookVAT==0)) then begin
        GetVATCodePrelVATAcc(ARPayr.VATCode,vatacc);
        if (blank(vatacc)) then begin
          vatacc = ARAccRec.VATBAcc;
        end;
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 2137;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc1,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==3,taccnumber);

        GetVATCodeVATAcc(ARPayr.VATCode,vatacc);            
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 1903;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc2,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==3,taccnumber);
//jjtodo        
      end;
    end else begin
      if ((ARAccRec.IPBookVAT!=0) and (ARAccRec.PreIPBookVAT==0)) then begin
//jjtodo        
      end;
    end;

    if (IVrw.TAX1Reb!=0) then begin
      IPGetVATCodeTAX1AccNumbers(VATCodeb,ARPayr.VATCode,tax1acc,psvatacc);
      if (GetAccName(ARAccRec.Tax1TmpAcc,tstr,60)==false) then begin 
        errstrno = 2170;
        goto LAddIVPrePayRow;
      end;
      if (CheckTTRPerRow("IVVc",ARAccRec.Tax1TmpAcc,"",dc1,taccnumber,0)) then begin end;
      AddEuroTrRow(gTRp,ARAccRec.Tax1TmpAcc,"","",tstr,IVrw.TAX1Reb,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");         

      if (GetAccName(tax1acc,tstr,60)==false) then begin 
        errstrno = 20078;
        goto LAddIVPrePayRow;
      end;
      if (CheckTTRPerRow("IVVc",tax1acc,"",dc2,taccnumber,0)) then begin end;
      AddEuroTrRow(gTRp,tax1acc,"","",tstr,IVrw.TAX1Reb,baserate1,baserate2,false,dc2,TotSum,false,taccnumber,"","");         
    end;

  end;
  errstrno = 0;
LAddIVPrePayRow:;
  AddIVPrePayRow = errstrno;
  RETURN;
END;

global
procedure GetInvoicedQty(LongInt curivnr,LongInt OrderNr,Integer rownr,var val resp,record MainStockBlock MainStockRecp)
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs;

  resp = blankval;
  if (OrderNr!=-1) then begin             
    TrHs = true;
    IVr.SerNr = OrderNr;
    while (LoopKey("OrderNr",IVr,1,TrHs)) begin
      if (IVr.OrderNr!=OrderNr) then begin TrHs = false; end;
      if ((TrHs) and (IVr.SerNr!=curivnr)) then begin 
        if (rownr<MatRowCnt(IVr)) then begin
          MatRowGet(IVr,rownr,IVrw);
          resp = resp + IVrw.Quant;
        end;
      end;
    end;  
    ORr.SerNr = OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin    
      if (rownr<MatRowCnt(ORr)) then begin
        MatRowGet(ORr,rownr,ORrw);
        if (ORr.InvBeforeShip!=0) then begin
          resp = resp + ORrw.Invd;
        end else begin
          resp = resp + ORrw.Shipd2;
        end;
      end;
    end;
  end;  
  RETURN;
END;

function Integer IVVc_GiftCertificateReceive(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,row IVVc IVrw,string cuobj,
                                             val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  Integer errstrno;
  string 255 tstr,tstr2;
  val rs,tvat,t1;
  string 255 svatacc,pvatacc,lcuobj,taccnumber;

  errstrno = 1085; // Transaction could not be generated 
  switch (IVp.InvType) begin
//    case 2:
    otherwise
      errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1908;
        goto LIVVc_GiftCertificateReceive;
      end;
      rs = IVrw.Sum;
//      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);//currency??      
      if (ARAccRec.ARUseObj!=0) then begin
        lcuobj = cuobj;
      end;
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc2,taccnumber,1)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==3,taccnumber,"","");
      end else begin
        AddEuroTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==3,taccnumber,"","");
      end;    
      MulVATIV(IVrw.VATCode,IVrw.Sum,tvat,t1,1,0);
      rs = IVrw.Sum - tvat;
      if (blank(IVrw.SalesAcc)) then begin
        errstrno = 1901;
        goto LIVVc_GiftCertificateReceive;
      end;
      errstrno = GetAccNamCurVAT(IVrw.SalesAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1901;
        goto LIVVc_GiftCertificateReceive;
      end;
      if (CheckTTRPerRow("IVVc",IVrw.SalesAcc,cuobj,dc1,taccnumber,1)) then begin end;
      AddEuroTrRow(gTRp,IVrw.SalesAcc,cuobj,"",tstr,rs,baserate1,baserate2,false,dc1,TotSum,IVp.InvType==3,taccnumber,"","");
      if (tvat!=0) then begin
        GetVATCodeAccNumbers(IVrw.VATCode,svatacc,pvatacc);
        if (GetAccName(svatacc,tstr,60)==false) then begin 
          errstrno = 1902;
          goto LIVVc_GiftCertificateReceive;
        end;
        if (CheckTTRPerRow("IVVc",svatacc,cuobj,dc1,taccnumber,1)) then begin end;
        AddEuroTrRow(gTRp,svatacc,cuobj,AddVATCodeToVATAccRows(IVrw.VATCode),tstr,tvat,baserate1,baserate2,false,dc1,TotSum,IVp.InvType==3,taccnumber,"","");
      end;
  end;  
  errstrno = 0;
LIVVc_GiftCertificateReceive:;
  IVVc_GiftCertificateReceive = errstrno;
  RETURN;
END;

function Integer IVVc_CASHRow(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,row IVVc IVrw,string cuobj,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  Integer errstrno;
  string 255 tstr,lcuobj,taccnumber;
  row PMBlock PMrw;
  val rs,ors;
  val rs2,ors2;
  val rategain,rategain2,rd,rd2;
  val rateloss,rateloss2;
  record BaseCurBlock bascur;
  Boolean accf;

  BlockLoad(bascur);
  errstrno = 1085; // Transaction could not be generated
  switch (IVrw.stp) begin
    case 15:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
    case 16:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
  end;
  if (GetAccName(PMrw.AccNr,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_CASHRow;
  end;
/*  
  if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_CASHRow;
  end;
*/  
  rs = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  rs2 = MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
/*
  if (IVp.ARonTR!=0) then begin
    AddEuroCurncyNomARTrRow(gTRp,PMrw.AccNr,cuobj,"",tstr,rs,blankval,true,dc1,TotSum,
                      IVrw.CurncyCode,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,
                      IVrw.BaseRate2,IVrw.Sum,blankval,
                      IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==3,"","","");
  end else begin
*/
    AddEuroCurncyTrRow(gTRp,PMrw.AccNr,cuobj,"",tstr,rs,false,dc1,TotSum,
                       IVrw.CurncyCode,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,
                       IVrw.BaseRate2,IVrw.Sum,blankval,-1,IVp.InvType==3,"");
//  end;      
    
  if (GetAccName(IVp.ARAcc,tstr,60)==false) then begin
    errstrno = 1908;
    goto LIVVc_CASHRow;
  end;
  if (ARAccRec.IPTransBankRowPerCU!=0) then begin
    accf = true;
  end;
  ors = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  ors2 = MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  if (ARAccRec.ARUseObj!=0) then begin
    lcuobj = cuobj;
  end;
  if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc2,taccnumber,0)) then begin end;
  if (IVp.ARonTR!=0) then begin
    AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,ors,blankval,true,dc2,TotSum,
                            IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                            IVp.BaseRate2,IVrw.Sum,blankval,
                            IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==3,taccnumber,"","");//0
  end else begin
    AddEuroCurncyTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,ors,true,dc2,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVrw.Sum,blankval,-1,IVp.InvType==3,taccnumber);//0
  end;

  if (IVrw.stp==15) then begin
    rd = ors - rs;
    rd2 = ors2 - rs2;    
    if (rd<0) then begin
      rategain = rd;
      rategain2 = rd2;
    end;
    if (rd>0) then begin
      rateloss = rd;
      rateloss2 = rd2;
    end;
    if (rategain<0) then begin
      if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LIVVc_CASHRow;
      end;
      AddEuroCurncyTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rategain,true,dc1,TotSum,
                         bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rategain2,blankval,-1,IVp.InvType==3,"");
    end;
    if (rateloss>0) then begin
      if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1918;
        goto LIVVc_CASHRow;
      end;
      AddEuroCurncyTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rateloss,true,dc2,TotSum,
                           bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rateloss2,blankval,-1,IVp.InvType==3,"");
    end;
/*
    if (TotSum!=0) then begin
      rs = TotSum;
      if (TotSum>0) then begin
        if (GetAccName(ARAccRec.BankRateGainAcc,tstr,60)) then begin
          AddEuroTrRow(gTRp,ARAccRec.BankRateGainAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,true,TotSum,IVp.InvType==3,"","","");
        end;
      end else begin
        if (GetAccName(ARAccRec.BankRateLossAcc,tstr,60)) then begin
          AddEuroTrRow(gTRp,ARAccRec.BankRateLossAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,false,TotSum,IVp.InvType==3,"","","");
        end;
      end;
      if (totsum!=0) then begin
        if (GetAccName(ARAccRec.RateRndOffAcc,tstr,60)==false) then begin
          errstrno = 1904;
          goto LIVVc_CASHRow;
        end;
        AddEuroTrRow(gTRp,ARAccRec.RateRndOffAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,dc2,TotSum,IVp.InvType==3,"","","");
      end;  
    end;
*/    
  end;
    
  errstrno = 0;
LIVVc_CASHRow:;
  IVVc_CASHRow = errstrno;
  RETURN;
END;

global
function Integer IVVc_AddPaymentRows(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,Integer rownr,string cuobj,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  row IVVc IVrw;
  Integer errstrno;
  
  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case 14: errstrno = IVVc_GiftCertificateReceive(gTRp,ARAccRec,IVp,IVrw,cuobj,baserate1,baserate2,dc1,dc2,TotSum);
    case 15: errstrno = IVVc_CASHRow(gTRp,ARAccRec,IVp,IVrw,cuobj,dc1,dc2,TotSum);
    case 16: errstrno = IVVc_CASHRow(gTRp,ARAccRec,IVp,IVrw,cuobj,dc1,dc2,TotSum);
  end;
  IVVc_AddPaymentRows = errstrno;
  RETURN;
END;

global
function Integer IVVc_CashBack(record TRVc gTRp,Integer ARUseObj,string cashback,string cuobj,record IVVc IVp,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  string 255 tstr,lcuobj,taccnumber;
  val rs;
  Integer errstrno;
  Boolean testf;
  
  if (IVp.RetnValue==0) then begin goto LIVVc_CashBack; end;
  if (GetAccName(IVp.ARAcc,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_CashBack;
  end;
  rs = MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  if ((IVp.InvType==1) or (IVp.InvType==4) or (IVp.InvType==2) or (IVp.InvType==3)) then begin 
    if (IVp.RetnValue>0) then begin    
      testf = true; 
    end;
  end;
  if (testf) then begin
    if (ARUseObj!=0) then begin
      lcuobj = cuobj;
    end;
    if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc1,taccnumber,0)) then begin end;
    if (IVp.ARonTR!=0) then begin
      AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,blankval,true,dc1,TotSum,
                            IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                            IVp.BaseRate2,IVp.RetnValue,blankval,
                            IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==3,taccnumber,"","");//0
    end else begin
      AddEuroCurncyTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,true,dc1,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVp.RetnValue,blankval,-1,IVp.InvType==3,taccnumber);//0
    end;
    if (GetAccName(cashback,tstr,60)==false) then begin
      errstrno = 1907;
      goto LIVVc_CashBack;
    end;
    if (CheckTTRPerRow("IVVc",cashback,cuobj,dc2,taccnumber,0)) then begin end;
    AddEuroCurncyTrRow(gTRp,cashback,cuobj,"",tstr,rs,true,dc2,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVp.RetnValue,blankval,-1,IVp.InvType==3,taccnumber);//0
  end;
LIVVc_CashBack:;  
  IVVc_CashBack = errstrno;
  RETURN;
END;

global
updating procedure CreateCommisionInvoice(record IVVc IVr)
begin
  record CUToCUVc CUToCUr;
  Boolean found;

  found = true;
  CUToCUr.ToCU = IVr.CustCode;  
  while (LoopKey("ToCU",CUToCUr,1,found)) begin
    
  end;
  return;
end;

global
function Integer AddTAX2Row(var record TRVc gTRp,record IVVc IVp,Integer rownr,
                            val frrate,val torate1,val torate2,val baserate1,val baserate2,
                            Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  Integer errstrno;
  row IVVc IVrw;
  string 20 accstr,taccnumber;
  string 255 tstr;
  val t,rs;
  
  MatRowGet(IVp,rownr,IVrw);
  if (IVrw.stp!=1) then begin goto LAddTAX2Row; end;
  if (blank(IVrw.TAX2Code)) then begin goto LAddTAX2Row; end;
  errstrno = 1085; // Transaction could not be generated 
  accstr = IVrw.TAX2Acc;
  if (blank(accstr)) then begin
    accstr = GetTax2Acc(IVrw.TAX2Code);
  end;  
  if (GetAccName(accstr,tstr,60)==false) then begin
    errstrno = 20074;
    goto LAddTAX2Row;
  end;
  t = FindTAX2(IVrw.TAX2Prc,IVrw.Sum,IVp.InclVAT);
  if (IVrw.TAX2Reb!=0) then begin
    t = t - (t*IVrw.TAX2Reb)/100;
  end;
  t = Round(t,2);    
  rs = MulRateToBase1(IVp.CurncyCode,t,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  if (CheckTTRPerRow("IVVc",accstr,"",dc2,taccnumber,0)) then begin end;
  AddEuroCurncyTrRow(gTRp,accstr,"","",tstr,rs,true,dc2,TotSum,
                     IVp.CurncyCode,frrate,torate1,torate2,baserate1,
                     baserate2,t,blankval,-1,IVp.InvType==3,taccnumber);
  errstrno = 0;
LAddTAX2Row:;                     
  AddTAX2Row = errstrno;
  return;
end;