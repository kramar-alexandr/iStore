// 5.4-9-12 07/08/2009

remote updating function Boolean SynkMachineRegister(string,var record SynkDBIDRegVc);
external function Integer OpenMasterWClass();
remote updating procedure CreateInvoiceFromPOSSales_OnServer(record POSSalesVc,record POSSalesVc,string,string,Integer,Integer);
external function Integer GetPOSOffLineCompNo();
remote procedure POSServToOffLine_ReadLocalMachineSettings(string,var record LocalMachineIBVc,var record LocalMachineITLVc,var record LocalMachineLoginVc,var record LocalMachineSetVc,var record LocalMachineSPVc);
remote function Boolean POSOffline_ShouldItemUpdateStock(string,string);
remote updating procedure POSServToOffLine_SynchRegisters(Integer,Integer,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,string);
remote updating procedure POSServToOffLine_SynchBefSettings(Integer,Integer,
                        var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,
                        var LongInt);
remote function boolean fileonserver(string);
remote updating function boolean SaveIVCashToServ(integer,integer,record IVCashVc);


procedure SetupSynkLastNumber(var record SynkDBIDRegVc SynkDBIDRegr)
begin
  row SynkDBIDRegVc SynkDBIDRegrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SynkDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkDBIDRegr,i,SynkDBIDRegrw);
    SynkDBIDRegrw.LastNumber = NextSerNr(SynkDBIDRegrw.FileName,CurrentDate,SynkDBIDRegrw.From,false,"");
    if (SynkDBIDRegrw.LastNumber>0) then begin
      SynkDBIDRegrw.LastNumber = SynkDBIDRegrw.LastNumber - 1;
    end;
    if (SynkDBIDRegrw.LastNumber==-1) then begin
      SynkDBIDRegrw.LastNumber = SynkDBIDRegrw.To;
    end;
    MatRowPut(SynkDBIDRegr,i,SynkDBIDRegrw);
  end;
  return;
end;

updating procedure SetupSynkMachine(var record SynkDBIDRegVc SynkDBIDRegr)
begin
  record SynkDBIDRegVc oldSynkDBIDRegr;
  
  oldSynkDBIDRegr.DBIDCode = SynkDBIDRegr.DBIDCode;
  if (ReadFirstMain(oldSynkDBIDRegr,1,true)) then begin
    if (RecordUpdate(oldSynkDBIDRegr,SynkDBIDRegr,false)==0) then begin
    end;
  end else begin
    if (RecordStore(SynkDBIDRegr,false)) then begin
    end;
  end;
  UpdateSyncNumberSeries(SynkDBIDRegr);
  return;
end;

global
function Boolean CheckIfOfflineCompanyExists(Integer offlinecomp)
BEGIN
  Boolean res;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer i,rwcnt;
  
  BlockLoad(CompaniesRec);
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (StringToInt(comprw.CompCode)==offlinecomp) then begin
      if (blank(comprw.TCPIP)) then begin
        res = true;
      end;
    end;
  end;
  CheckIfOfflineCompanyExists = res;
  RETURN;
END;

function LongInt ThisMachineLastIVCashNr(record LastSerNrBlock LastSerNrRec,string LocalMachineCode)
BEGIN
  LongInt res;
  row LastSerNrBlock LastSerNrrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(LastSerNrRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LastSerNrRec,i,LastSerNrrw);
    if (LastSerNrrw.LocalMachineCode==LocalMachineCode) then begin
      res = LastSerNrrw.LastIVCashNr;
      i = rwcnt;
    end;
  end;
  ThisMachineLastIVCashNr = res;
  RETURN;
END;

updating procedure POSServToOffLine_SaveLocalMachineSettings(string localmachinecode,record LocalMachineIBVc LMIBr,record LocalMachineITLVc LMITLr,record LocalMachineLoginVc LMLr,record LocalMachineSetVc LMSr,record LocalMachineSPVc LMSPr)
begin
  row LocalMachineIBVc LMIBrw;
  row LocalMachineITLVc LMITLrw;
  row LocalMachineLoginVc LMLrw;
  Integer i,rwcnt;
  row ItemButtonsBlock IBbrw;
  row ItemTileLabelBlock ITLbrw;
  row LocalLoginBlock LLbrw;
  record ItemButtonsBlock IBb;
  record ItemTileLabelBlock ITLb;
  record LocalLoginBlock LLb;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
  
  rwcnt = MatRowCnt(LMIBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMIBr,i,LMIBrw);
    ClearRow(IBb,IBbrw,1);
    IBbrw.Label = LMIBrw.Label;
    IBbrw.ArtCode = LMIBrw.ArtCode;
    IBbrw.colnr = LMIBrw.colnr;
    IBbrw.TileNr = LMIBrw.TileNr;
    IBbrw.ButtonType = LMIBrw.ButtonType;
    MatRowPut(IBb,i,IBbrw);
  end;

  rwcnt = MatRowCnt(LMITLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMITLr,i,LMITLrw);
    ClearRow(ITLb,ITLbrw,1);
    ITLbrw.Label = LMITLrw.Label;
    ITLbrw.colnr = LMITLrw.colnr;
    ITLbrw.TileNr = LMITLrw.TileNr;
    MatRowPut(ITLb,i,ITLbrw);
  end;

  rwcnt = MatRowCnt(LMLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMLr,i,LMLrw);
    ClearRow(LLb,LLbrw,1);
    LLbrw.Code = LMLrw.Code;
    LLbrw.colnr = LMLrw.colnr;
    LLbrw.OnLoginWindow = LMLrw.OnLoginWindow;
    MatRowPut(LLb,i,LLbrw);
  end;
  if (nonblank(LMSr.LocalMachine)) then begin
    LMb.LocalMachineCode = LMSr.LocalMachine;
    LMb.DefLocation = LMSr.DefLocation;
    LMb.DefPrinter = LMSr.DefPrinter;
    LMb.WarnOnDelete = LMSr.WarnOnDelete;
    LMb.NoToolTips = LMSr.NoToolTips;
    LMb.OneBarTabWindow = LMSr.OneBarTabWindow;
    LMb.NoBackGround = LMSr.NoBackGround;
    LMb.WideScrollBars = LMSr.WideScrollBars;
    LMb.TouchScreenLook = LMSr.TouchScreenLook;
    LMb.DefExpCodepage = LMSr.DefExpCodepage;
    LMb.FiscalPrinter = LMSr.FiscalPrinter;
    LMb.DefCustCode = LMSr.DefCustCode;
    LMb.DefRestDisp = LMSr.DefRestDisp;
    LMb.entryFont = LMSr.entryFont;
    LMb.reportFont = LMSr.reportFont;
    LMb.reportFontSize = LMSr.reportFontSize;
    LMb.MirrorWindow = LMSr.MirrorWindow;
    LMb.NoServerModeIdle = LMSr.NoServerModeIdle;
    LMb.UseDisplay = LMSr.UseDisplay;
    LMb.LimitedProdEntry = LMSr.LimitedProdEntry;
    LMb.DefReturnLocation = LMSr.DefReturnLocation;
    LMb.TerminalID = LMSr.TerminalID;
  end;

  BlockLoad(SPb);
  SPb.BaudRate = LMSPr.BaudRate;
  SPb.ByteSize = LMSPr.ByteSize;
  SPb.Parity = LMSPr.Parity;
  SPb.StopBits = LMSPr.StopBits;
  SPb.OutCtsFlow = LMSPr.OutCtsFlow;
  SPb.OutDsrFlow = LMSPr.OutDsrFlow;
  SPb.DtrControl = LMSPr.DtrControl;
  SPb.OutXOn = LMSPr.OutXOn;
  SPb.OutXOff = LMSPr.OutXOff;
  SPb.Printer = LMSPr.Printer;
  SPb.Port = LMSPr.Port;
  SPb.Codepage = LMSPr.Codepage;

  
  BlockStore(IBb);
  BlockStore(ITLb);
  BlockStore(LLb);
  if (nonblank(LMSr.LocalMachine)) then begin
    BlockStore(LMb);
  end;
  BlockStore(SPb);
  RETURN;
END;

global
updating procedure SynchServToOfflineSettingGOsm()
BEGIN
  Integer offlinecomp,curcomp;
  record LocalOffLineNrBlock LastRecNr;
  LongInt AccVcSeqNr,OTVcSeqNr,ObjVcSeqNr,LocationVcSeqNr,AccessVcSeqNr;
  LongInt DIVcSeqNr,UnitVcSeqNr,PLQVcSeqNr,RebVcSeqNr;
  LongInt ITVcSeqNr,PLVcSeqNr,INVcSeqNr,CUVcSeqNr,ModifiersVcSeqNr,PDVcSeqNr;
  LongInt PLDefVcSeqNr,UserVcSeqNr,CTypeVcSeqNr,StyleVcSeqNr,DocVcSeqNr,ArtUpdStockVcSeqNr;
  LongInt RecVcSeqNr,CCatVcSeqNr,VGVcSeqNr,CurncyCodeVcSeqNr,DrawerVcSeqNr,ItemStatusVcSeqNr;  
  LongInt Custom1VcSeqNr,Custom2VcSeqNr,Custom3VcSeqNr,Custom4VcSeqNr,Custom5VcSeqNr,Custom6VcSeqNr;
  LongInt Custom7VcSeqNr,Custom8VcSeqNr,Custom9VcSeqNr,Custom10VcSeqNr;
  record SeqNrBlock SeqnrRec;
  record LocalMachineBlock LocalMachineRec;
  record LastSerNrBlock LastSerNrRec;
  record OffLineSetBlock OffLb;
  record LocalMachineIBVc LMIBr;
  record LocalMachineITLVc LMITLr;
  record LocalMachineLoginVc LMLr;
  record SynkDBIDRegVc SynkDBIDRegr;
//when SynchroniseBlock working coment out
  record VATCodeBlock VATCodeRec;
  record CYBlock CYRec;
  record LangBlock LangRec;
  record IVCashDefBlock IVCashDefRec;
  record IVCashSerBlock IVCashSerRec;//------------
  row IVCashSerBlock IVCashSerRow;  
  record CashierDefBlock CDb;
  record CashPrintBlock CashPrintRec;
  record CostAccBlock CAb;
  record DefCashBlock DCb;
  record PMBlock PMRec;
  record MainStockBlock MainStockRec;
  record POSCommandsBlock POScb;
  record SysFormatBlock SFb;
  record LocalMachineSetVc LMSr;
  record LocalMachineSPVc LMSPr;
  record ModuleBlock MBb;
  record RoundBlock Rb;
  record CurncyRoundOffBlock CRBb;
  Boolean setupsf;
  longint firstno,lastno,currentno;
  record SynkAutoSerVc SASr;
  row SynkAutoSerVc SASrw;
  record POSCurncyBlock PCb;// Edit ************************** Wednesday, 13 April 2011 12:27:35
  record LocalMachineAccBlock LMAb;// Edit ************************** Thursday, 20 October 2011 11:13:16
  row LocalMachineAccBlock LMArw;// Edit ************************** Thursday, 20 October 2011 11:13:16
  record AccBlock ACCb;// Edit ************************** Wednesday, 6 June 2012 14:48:56
  integer mtrw,i;// Edit ************************** Wednesday, 6 June 2012 14:48:56
  record POSEventVc POSEr;// Edit ************************** Wednesday, 6 June 2012 14:58:19
  record LocalMachineVc LMronline,LMroffline;
  string 20 drawer;
  
  offlinecomp = GetPOSOffLineCompNo;
  curcomp = CurrentCompany;
  if (offlinecomp<=0) then begin goto LSynchServToOfflineSettingsm; end;
  if (CheckIfOfflineCompanyExists(offlinecomp)==false) then begin goto LSynchServToOfflineSettingsm; end;

  SetServerCompany(offlinecomp);
  BlockLoad(LocalMachineRec);  
  BlockLoad(SeqnrRec);
  SetServerCompany(curcomp);

  BlockLoad(OffLb);  

  if (blank(LocalMachineRec.LocalMachineCode)) then begin goto LSynchServToOfflineSettingsm; end;
  
  LMronline.Code = LocalMachineRec.LocalMachineCode;
  readfirstmain(LMronline,1,true);
  
  BeginSync;

//when SynchroniseBlock working coment out
  BlockLoad(PCb);// Edit ************************** Wednesday, 13 April 2011 12:55:59
  BlockLoad(LMAb);// Edit ************************** Thursday, 20 October 2011 11:13:32
  BlockLoad(ACCb);// Edit ************************** Wednesday, 6 June 2012 14:23:09
  BlockLoad(VATCodeRec);
  BlockLoad(CYRec);  
  BlockLoad(LangRec);
  BlockLoad(IVCashDefRec);
//  BlockLoad(IVCashSerRec);
  BlockLoad(CDb);
  BlockLoad(CashPrintRec);
  BlockLoad(CAb);
  BlockLoad(CRBb);
  BlockLoad(DCb);
  BlockLoad(PMRec);
  BlockLoad(MainStockRec);
  BlockLoad(POScb);
  BlockLoad(SFb);
  BlockLoad(MBb);
  BlockLoad(LastSerNrRec);
  BlockLoad(Rb);
  
  mtrw = matrowcnt(LMAb);
  for(i=0;i<mtrw;i=i+1)begin
    matrowget(LMAb,i,LMArw);
    if(LMArw.LocalMachine==LocalMachineRec.LocalMachineCode)then begin
      DCb.DefCashPayMode = LMArw.CashID;
      DCb.DefCCPayMode = LMArw.TermID;
      DCb.DefGCSPayMode = LMArw.SertID;
      DCb.DefGCRPayMode = LMArw.Oth01ID;// Edit ************************** Monday, 15 April 2013 17:38:57
      drawer = LMArw.Drawer;
    end;
  end;

  AccVcSeqNr = SeqnrRec.AccVcSeqNr;
  OTVcSeqNr = SeqnrRec.OTVcSeqNr;
  ObjVcSeqNr = SeqnrRec.ObjVcSeqNr;
  LocationVcSeqNr = SeqnrRec.LocationVcSeqNr;
  AccessVcSeqNr = SeqnrRec.AccessVcSeqNr;
  DocVcSeqNr = SeqnrRec.DocVcSeqNr;
  CCatVcSeqNr = SeqnrRec.CCatVcSeqNr;
  VGVcSeqNr = SeqnrRec.VGVcSeqNr;
  CurncyCodeVcSeqNr = SeqnrRec.CurncyCodeVcSeqNr;
  ModifiersVcSeqNr = SeqnrRec.ModifiersVcSeqNr;
  PDVcSeqNr = SeqnrRec.PDVcSeqNr;

  POSServToOffLine_SynchBefSettings(curcomp,offlinecomp,AccVcSeqNr,OTVcSeqNr,ObjVcSeqNr,LocationVcSeqNr,AccessVcSeqNr,DocVcSeqNr,
                                    CCatVcSeqNr,VGVcSeqNr,CurncyCodeVcSeqNr,ModifiersVcSeqNr,PDVcSeqNr);
  SeqnrRec.AccVcSeqNr = AccVcSeqNr;
  SeqnrRec.OTVcSeqNr = OTVcSeqNr;
  SeqnrRec.ObjVcSeqNr = ObjVcSeqNr;
  SeqnrRec.LocationVcSeqNr = LocationVcSeqNr;
  SeqnrRec.AccessVcSeqNr = AccessVcSeqNr;
  SeqnrRec.DocVcSeqNr = DocVcSeqNr;
  SeqnrRec.CCatVcSeqNr = CCatVcSeqNr;
  SeqnrRec.VGVcSeqNr = VGVcSeqNr;
  SeqnrRec.CurncyCodeVcSeqNr = CurncyCodeVcSeqNr;
  SeqnrRec.ModifiersVcSeqNr = ModifiersVcSeqNr;
  SeqnrRec.PDVcSeqNr = PDVcSeqNr;


	SASr.UserCode = LocalMachineRec.LocalMachineCode;
	ReadFirstmain(SASr,1,true);
	MatRowGet(SASr,0,SASrw);
	if (SASrw.FileName == "IVCashVc") then begin
		firstno = SASrw.NumberSeries;
		lastno = SASrw.NrsRangeQty+SASrw.NumberSeries;
		currentno = SASrw.NrsMinimum;
	end;

  SetServerCompany(offlinecomp);
  
  BlockStore(SeqnrRec);
  OffLb.OffLineComp = "";
  BlockStore(OffLb);

//when SynchroniseBlock working coment out
// Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 6 June 2012 15:01:16
	
  if(CountRecords("POSEventVc")==0)then begin
    recordNew(POSEr);
    POSEr.SerNr = 1;
    POSEr.Drawer = drawer;
    POSEr.MachineName = LocalMachineRec.LocalMachineCode;
    POSEr.TransDate = CurrentDate;
    POSEr.TransTime = CurrentTime;
    POSEr.Event = 1;
    RecordStore(POSEr,false);
  end;
  
  if(CountRecords("LocalMachineVc")==0)then begin
    
    recordCopy(LMroffline,LMronline);
    
    RecordStore(LMroffline,false);
  end;
  
  
	// Edit End ---------------------------------------------- Edit End
	
  BlockStore(PCb);// Edit ************************** Wednesday, 13 April 2011 12:56:28
  BlockStore(LMAb);// Edit ************************** Thursday, 20 October 2011 11:13:48
  
  BlockStore(ACCb);// Edit ************************** Wednesday, 6 June 2012 14:45:21
  BlockStore(VATCodeRec);
  BlockStore(CYRec);
  BlockStore(LangRec);
  BlockStore(IVCashDefRec);
//  BlockStore(IVCashSerRec);
  BlockStore(CDb);
  BlockStore(CashPrintRec);
  BlockStore(CAb);
  BlockStore(CRBb);
  BlockStore(DCb);
  BlockStore(PMRec);
  BlockStore(MainStockRec);
  BlockStore(POScb);
  BlockStore(SFb);
  BlockStore(MBb);
  BlockLoad(SeqnrRec);
  BlockStore(Rb);

//----------------------------------DBID
 /* SynkDBIDRegr.DBIDCode = DatabaseID;
  if (ReadFirstMain(SynkDBIDRegr,1,true)==false) then begin
    RecordNew(SynkDBIDRegr);
    SynkDBIDRegr.DBIDCode = DatabaseID;
  end;
  SetupSynkLastNumber(SynkDBIDRegr);*/
//-----------------------------------DBIDEND
  SetServerCompany(curcomp);

  DIVcSeqNr = SeqnrRec.DIVcSeqNr;
  UnitVcSeqNr = SeqnrRec.UnitVcSeqNr;
  PLQVcSeqNr = SeqnrRec.PLQVcSeqNr;
  RebVcSeqNr = SeqnrRec.RebVcSeqNr;
  ITVcSeqNr = SeqnrRec.ITVcSeqNr;
  PLVcSeqNr = SeqnrRec.PLVcSeqNr;
  INVcSeqNr = SeqnrRec.INVcSeqNr;
  CUVcSeqNr = SeqnrRec.CUVcSeqNr;
  PLDefVcSeqNr = SeqnrRec.PLDefVcSeqNr;
  UserVcSeqNr = SeqnrRec.UserVcSeqNr;
  CTypeVcSeqNr = SeqnrRec.CTypeVcSeqNr;
  StyleVcSeqNr = SeqnrRec.StyleVcSeqNr;
  ArtUpdStockVcSeqNr = SeqnrRec.ArtUpdStockVcSeqNr;
  RecVcSeqNr = SeqnrRec.RecVcSeqNr;
  DrawerVcSeqNr = SeqnrRec.DrawerVcSeqNr;
  ItemStatusVcSeqNr = SeqnrRec.ItemStatusVcSeqNr;
// Custom is for customised purpouse, use it.
  Custom1VcSeqNr = SeqnrRec.Custom1VcSeqNr;
  Custom2VcSeqNr = SeqnrRec.Custom2VcSeqNr;
  Custom3VcSeqNr = SeqnrRec.Custom3VcSeqNr;
  Custom4VcSeqNr = SeqnrRec.Custom4VcSeqNr;
  Custom5VcSeqNr = SeqnrRec.Custom5VcSeqNr;
  Custom6VcSeqNr = SeqnrRec.Custom6VcSeqNr;
  Custom7VcSeqNr = SeqnrRec.Custom7VcSeqNr;
  Custom8VcSeqNr = SeqnrRec.Custom8VcSeqNr;
  Custom9VcSeqNr = SeqnrRec.Custom9VcSeqNr;
  Custom10VcSeqNr = SeqnrRec.Custom10VcSeqNr;

  POSServToOffLine_SynchRegisters(curcomp,offlinecomp,DIVcSeqNr,UnitVcSeqNr,PLQVcSeqNr,RebVcSeqNr,
                                  ITVcSeqNr,PLVcSeqNr,INVcSeqNr,CUVcSeqNr,PLDefVcSeqNr,UserVcSeqNr,
                                  CTypeVcSeqNr,StyleVcSeqNr,ArtUpdStockVcSeqNr,RecVcSeqNr,DrawerVcSeqNr,
                                  ItemStatusVcSeqNr,Custom1VcSeqNr,Custom2VcSeqNr,Custom3VcSeqNr,
                                  Custom4VcSeqNr,Custom5VcSeqNr,Custom6VcSeqNr,Custom7VcSeqNr,
                                  Custom8VcSeqNr,Custom9VcSeqNr,Custom10VcSeqNr,LocalMachineRec.DefLocation);
  SeqnrRec.DIVcSeqNr = DIVcSeqNr;
  SeqnrRec.UnitVcSeqNr = UnitVcSeqNr;
  SeqnrRec.PLQVcSeqNr = PLQVcSeqNr;
  SeqnrRec.RebVcSeqNr = RebVcSeqNr;
  SeqnrRec.ITVcSeqNr = ITVcSeqNr;
  SeqnrRec.PLVcSeqNr = PLVcSeqNr;
  SeqnrRec.INVcSeqNr = INVcSeqNr;
  SeqnrRec.CUVcSeqNr = CUVcSeqNr;
  SeqnrRec.PLDefVcSeqNr = PLDefVcSeqNr;
  SeqnrRec.UserVcSeqNr = UserVcSeqNr;
  SeqnrRec.CTypeVcSeqNr = CTypeVcSeqNr;
  SeqnrRec.StyleVcSeqNr = StyleVcSeqNr;
  SeqnrRec.ArtUpdStockVcSeqNr = ArtUpdStockVcSeqNr;
  SeqnrRec.RecVcSeqNr = RecVcSeqNr;
  SeqnrRec.DrawerVcSeqNr = DrawerVcSeqNr;
  SeqnrRec.ItemStatusVcSeqNr = ItemStatusVcSeqNr;
  SeqnrRec.Custom1VcSeqNr = Custom1VcSeqNr;
  SeqnrRec.Custom2VcSeqNr = Custom2VcSeqNr;
  SeqnrRec.Custom3VcSeqNr = Custom3VcSeqNr;
  SeqnrRec.Custom4VcSeqNr = Custom4VcSeqNr;
  SeqnrRec.Custom5VcSeqNr = Custom5VcSeqNr;
  SeqnrRec.Custom6VcSeqNr = Custom6VcSeqNr;
  SeqnrRec.Custom7VcSeqNr = Custom7VcSeqNr;
  SeqnrRec.Custom8VcSeqNr = Custom8VcSeqNr;
  SeqnrRec.Custom9VcSeqNr = Custom9VcSeqNr;
  SeqnrRec.Custom10VcSeqNr = Custom10VcSeqNr;

  POSServToOffLine_ReadLocalMachineSettings(LocalMachineRec.LocalMachineCode,LMIBr,LMITLr,LMLr,LMSr,LMSPr);
  
 // setupsf = SynkMachineRegister(CurrentUser,SynkDBIDRegr);//--------???

  SetServerCompany(offlinecomp);
  
  BlockLoad(IVCashSerRec);
		matrowget(IVCashSerRec,0,IVCashSerRow);
		
			if (IVCashSerRow.TSerStart!=firstno) then begin IVCashSerRow.TSerStart=firstno; end;
			if (IVCashSerRow.TSerEnd!=lastno) then begin IVCashSerRow.TSerEnd=lastno; end;
			if (blank(IVCashSerRow.DonotGenTrans)) then begin IVCashSerRow.DonotGenTrans=0; end;
	
		matrowput(IVCashSerRec,0,IVCashSerRow);
  BlockStore(IVCashSerRec);

  BlockLoad(LastRecNr);
			 if (LastRecNr.LastIVCashNr<currentno) then begin
				LastRecNr.LastIVCashNr = currentno;
			 end;
			 
			 if (LastRecNr.LastIVCashNr==lastno) then begin
				MessageBox(0,"END of NumberSeries");
			 end;
			 currentno = LastRecNr.LastIVCashNr;
   BlockStore(LastRecNr);

  /*if (setupsf) then begin
    SetupSynkMachine(SynkDBIDRegr);//--------???
  end;
  
  
  if (LastRecNr.LastIVCashNr<=0) then begin
    LastRecNr.LastIVCashNr = ThisMachineLastIVCashNr(LastSerNrRec,LocalMachineRec.LocalMachineCode);
    BlockStore(LastRecNr);
  end;*/
  BlockStore(SeqnrRec);

  POSServToOffLine_SaveLocalMachineSettings(LocalMachineRec.LocalMachineCode,LMIBr,LMITLr,LMLr,LMSr,LMSPr);


  SetServerCompany(curcomp);
  
  SASr.UserCode = LocalMachineRec.LocalMachineCode;
	ReadFirstmain(SASr,1,true);
	MatRowGet(SASr,0,SASrw);
	if (SASrw.FileName == "IVCashVc") then begin
		SASrw.NrsMinimum = currentno;
	end;
	matrowput(SASr,0,SASrw);
	REcordStore(SASr,true);
  

  EndSync;
LSynchServToOfflineSettingsm:;
  RETURN;
END;


global// Edit ************************** Tuesday, 5 June 2012 10:42:40// Edit ************************** Tuesday, 5 June 2012 10:42:40
updating procedure SynchServToOfflineSettingsm()
BEGIN
record LocalMachineBlock LocalMachineRec;
record CompaniesBlock CompaniesRec,CRr;
row CompaniesBlock comprw,crrw;
record LocalMachineAccBlock LMAb;
row LocalMachineAccBlock LMArw;
record OffLineSetBlock OSb;
Boolean res;
Integer i,rwcnt,k;
string 10 compcode;
  

  res = false;
  BlockLoad(OSb);
  if (CheckIfOfflineCompanyExists(stringtoint(OSb.OffLineComp))==false) then begin 
    blockload(CompaniesRec);
    matrowget(CompaniesRec,currentcompany-1,comprw);
    compcode = comprw.CompCode;
    rwcnt = matrowcnt(CompaniesRec);
    k=0;
    for(i=0;i<rwcnt;i=i+1)begin
      matrowget(CompaniesRec,i,comprw);
      
      if(i==stringtoint(OSb.OffLineComp)-1)then begin
        ClearRow(CRr,crrw,0);
        crrw.CompCode = OSb.OffLineComp;
        crrw.CompName = "Offline";
        crrw.ShortName = "Offline";
        crrw.TCPIP = "";
        crrw.Port = "";
        MATROWput(CRr,k,crrw);
        k=k+1;
      end;
      if(comprw.CompCode!=compcode)then begin
        comprw.ActiveStatus=1;
      end;
      MATROWput(CRr,k,comprw);
      k=k+1;
    end;
    blockstore(CRr);
    goto LSynchServToOfflineSettingsm;
  end else begin
    blockload(LocalMachineRec);
    if(blank(LocalMachineRec.LocalMachineCode))then begin
      blockLoad(LMAb);
      rwcnt = matrowcnt(LMAb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LMAb,i,LMArw);
        if(LMArw.UserCode==CurrentUser)then begin
          LocalMachineRec.LocalMachineCode = LMArw.LocalMachine;
          LocalMachineRec.DefLocation = LMArw.DefLoc;
          LocalMachineRec.DefCustCode = LMArw.CustCode;
          LocalMachineRec.DefReturnLocation = LMArw.DefLoc;
          LocalMachineRec.NoServerModeIdle = 1;
          res = true;
        end;
      end;
      blockstore(LocalMachineRec);
    end else begin
      blockLoad(LMAb);
      rwcnt = matrowcnt(LMAb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LMAb,i,LMArw);
        if(LMArw.UserCode==CurrentUser)then begin
          res = true;
        end;
      end;
    end;
  end;
  
  if(clientmode)then begin
  end else begin
    res = false;
  end;
  
  if(res)then begin
    SynchServToOfflineSettingGOsm;
  end;
  
LSynchServToOfflineSettingsm:;
return;
end;
// Edit ************************** Tuesday, 5 June 2012 10:42:42// Edit ************************** Tuesday, 5 June 2012 10:42:43// Edit ************************** Tuesday, 5 June 2012 10:42:44
procedure AddIVCashRowToPOSSales(row IVCashVc IVCashrw,string location,record POSSalesVc POSSalesr)
begin
  Integer i,rwcnt;
  row POSSalesVc POSSalesrw;

  rwcnt = MatRowCnt(POSSalesr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSSalesr,i,POSSalesrw);
    if ((POSSalesrw.ArtCode==IVCashrw.ArtCode) and (POSSalesrw.VATCode==IVCashrw.VATCode)) then begin
      POSSalesrw.Quant = IVCashrw.Quant + POSSalesrw.Quant;
      POSSalesrw.Sum = IVCashrw.Sum + POSSalesrw.Sum;            
      if (POSSalesrw.Quant!=0) then begin
        POSSalesrw.Price = POSSalesrw.Sum / POSSalesrw.Quant;
      end;
      MatRowPut(POSSalesr,i,POSSalesrw);
      goto LAddIVCashRowToPOSSales;
    end;
  end;
  ClearRow(POSSalesr,POSSalesrw,0);
  POSSalesrw.ArtCode = IVCashrw.ArtCode;
  POSSalesrw.Quant = IVCashrw.Quant;
  POSSalesrw.Spec = IVCashrw.Spec;
  POSSalesrw.Sum = IVCashrw.Sum;
  POSSalesrw.VATCode = IVCashrw.VATCode;          
  if (POSSalesrw.Quant!=0) then begin
    POSSalesrw.Price = POSSalesrw.Sum / POSSalesrw.Quant;
    if (POSSalesrw.Price<0) then begin
      POSSalesrw.Price = -POSSalesrw.Price;
    end;
  end;
  if (POSOffline_ShouldItemUpdateStock(IVCashrw.ArtCode,location)==false) then begin
    POSSalesrw.NotUpdStockFlag = 1;
  end else begin
    POSSalesrw.NotUpdStockFlag = 0;
  end;
  MatRowPut(POSSalesr,rwcnt,POSSalesrw);          
LAddIVCashRowToPOSSales:;  
  RETURN;
END;

updating procedure CreateSummaryPOSInvoice(var record POSSalesVc POSSalesr,var record POSSalesVc POSReturnr)
begin
  Boolean found,testf,firstf;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Array LongInt acash_ser_nos;
  LongInt acnt;
  Array LongInt aretcash_ser_nos;
  LongInt aretcnt;

  acnt = 0;
  firstf = true;
  RecordNew(POSSalesr);

  IVCashr.POSSalesNo = -1;
  found = true;
  while(LoopKey("POSSalesNo",IVCashr,1,found)) begin
    if (IVCashr.POSSalesNo!=-1) then begin
     found = false;
    end;
    if (firstf==false) then begin
/*lookhere*/    
      if (IVCashr.TransDate!=POSSalesr.TransDate) then begin
        found = false;
      end;
    end;
    testf = found;
    if (blank(IVCashr.Location)) then begin
      testf = false;
    end;    
    if (testf) then begin
      rwcnt = MatRowCnt(IVCashr);
      if (IVCashr.Sum4>0) then begin
        for(i=0;i<rwcnt;i=i+1) begin     
          MatRowGet(IVCashr,i,IVCashrw);
          AddIVCashRowToPOSSales(IVCashrw,IVCashr.Location,POSSalesr);         
        end;
        POSSalesr.CashValue = POSSalesr.CashValue + IVCashr.CashValue;
        POSSalesr.RecValue = POSSalesr.RecValue + IVCashr.RecValue;
        POSSalesr.RetValue = POSSalesr.RetValue + IVCashr.RetValue;
        POSSalesr.Sum1 = POSSalesr.Sum1 + IVCashr.Sum1;
        POSSalesr.Sum2 = POSSalesr.Sum2 + IVCashr.Sum2;
        POSSalesr.Sum3 = POSSalesr.Sum3 + IVCashr.Sum3;
        POSSalesr.Sum4 = POSSalesr.Sum4 + IVCashr.Sum4;
        POSSalesr.Location = IVCashr.Location;
  /*lookhere , what if localmachine code is diffrent, what if PayDeal is diffrent on next POS Invoice*/      
        POSSalesr.LocalMachineCode = IVCashr.LocalMachineCode;
        POSSalesr.PayDeal = IVCashr.PayDeal;
        POSSalesr.TransDate = IVCashr.TransDate;
        POSSalesr.SyncTransDate = CurrentDate;
        POSSalesr.TransTime = CurrentTime;
        POSSalesr.TotQty = POSSalesr.TotQty + IVCashr.TotQty;
        acash_ser_nos[acnt] = IVCashr.SerNr;
        acnt = acnt + 1;
        firstf = false;
      end else begin
        for(i=0;i<rwcnt;i=i+1) begin     
          MatRowGet(IVCashr,i,IVCashrw);
          AddIVCashRowToPOSSales(IVCashrw,IVCashr.Location,POSReturnr);         
        end;
        POSReturnr.CashValue = POSReturnr.CashValue + IVCashr.CashValue;
        POSReturnr.RecValue = POSReturnr.RecValue + IVCashr.RecValue;
        POSReturnr.RetValue = POSReturnr.RetValue + IVCashr.RetValue;
        POSReturnr.Sum1 = POSReturnr.Sum1 + IVCashr.Sum1;
        POSReturnr.Sum2 = POSReturnr.Sum2 + IVCashr.Sum2;
        POSReturnr.Sum3 = POSReturnr.Sum3 + IVCashr.Sum3;
        POSReturnr.Sum4 = POSReturnr.Sum4 + IVCashr.Sum4;
        POSReturnr.Location = IVCashr.Location;
  /*lookhere , what if localmachine code is diffrent, what if PayDeal is diffrent on next POS Invoice*/      
        POSReturnr.LocalMachineCode = IVCashr.LocalMachineCode;
        POSReturnr.PayDeal = IVCashr.PayDeal;
        POSReturnr.TransDate = IVCashr.TransDate;
        POSReturnr.SyncTransDate = CurrentDate;
        POSReturnr.TransTime = CurrentTime;
        POSReturnr.TotQty = POSReturnr.TotQty + IVCashr.TotQty;
        aretcash_ser_nos[aretcnt] = IVCashr.SerNr;
        aretcnt = aretcnt + 1;
        firstf = false;
      end;
    end;
  end;  
  if (POSSalesr.Sum4>0) then begin    
    POSSalesr.Synced = 1;
    POSSalesr.Type = 0;
    POSSalesr.SerNr = NextSerNr("POSSalesVc",POSSalesr.TransDate,-1,false,"");    
    if (POSSalesr.SerNr>0) then begin
      if (RecordStore(POSSalesr,false)) then begin           
        for (i=0;i<acnt;i=i+1) begin
          IVCashr.SerNr = acash_ser_nos[i];
          if (ReadFirstMain(IVCashr,1,true)) then begin
            IVCashr.POSSalesNo = POSSalesr.SerNr;
            if (RecordStore(IVCashr,true)) then begin end;
  //DBFlush?          
          end;
        end;
      end;
    end;
  end;
  if (POSReturnr.Sum4!=0) then begin    
    POSReturnr.Synced = 1;
    POSReturnr.Type = 1;
    if (POSSalesr.SerNr>0) then begin
      POSReturnr.SerNr  = POSSalesr.SerNr + 1;
    end else begin
      POSReturnr.SerNr = NextSerNr("POSSalesVc",POSReturnr.TransDate,-1,false,"");        
    end;
    if (POSReturnr.SerNr>0) then begin
      if (RecordStore(POSReturnr,false)) then begin     
        for (i=0;i<acnt;i=i+1) begin
          IVCashr.SerNr = aretcash_ser_nos[i];
          if (ReadFirstMain(IVCashr,1,true)) then begin
            IVCashr.POSSalesNo = POSReturnr.SerNr;
            if (RecordStore(IVCashr,true)) then begin end;
  //DBFlush?          
          end;
        end;
      end;
    end;
  end;  
  return;
end;

updating procedure POSOffLineToServ_SynchRegisters(Integer servcomp,Integer offlinecomp,Integer SyncSumPOS)
begin
  LongInt seqnr;
  Integer curcomp;
  Boolean TrHs;
  record IVCashVc IVCashr;
  record POSSalesVc POSSalesr;
  record POSSalesVc POSReturnr;
  record SeqNrBlock Seqnrb;
  record LocalMachineBlock LMb;
  area SyncArea;
  
  
  curcomp = CurrentCompany;
  switch (SyncSumPOS) begin
    case 0:
      SetServerCompany(offlinecomp);
      seqnr = SynchroniseRegister("IVCashVc",offlinecomp,servcomp,-1,"");
      //seqnr = 1;
      if (seqnr>=0) then begin
        TrHs = true;
        

        while (LoopMain(IVCashr,1,TrHs)) begin
          //AddRecordToArea(IVCashr,"IVCashVc",SyncArea); //-------Customizat
          if (SaveIVCashToServ(curcomp,offlinecomp,IVCashr)) then begin
						LogText(0,"Synchronized POS invoices " & IVCashr.LocalMachineCode & "  " & IVCashr.SerNr);
						RecordDelete(IVCashr);
						StepBack(IVCashr);
          end;
        end;
       

      end;
      SetServerCompany(curcomp);
      /*if (fileonserver("import/POS.txt")) then begin
        SetServerCompany(offlinecomp);
        Delete_File("import/POS.txt");
        SetServerCompany(curcomp);
      end;*/
      
    case 1:
      SetServerCompany(offlinecomp);
      CreateSummaryPOSInvoice(POSSalesr,POSReturnr);
      BlockLoad(Seqnrb);
      Seqnrb.POSSalesVcSeqNr = SynchroniseRegister("POSSalesVc",offlinecomp,servcomp,Seqnrb.POSSalesVcSeqNr,"");
      BlockStore(Seqnrb);
      BlockLoad(LMb);
      SetServerCompany(curcomp);
      
      CreateInvoiceFromPOSSales_OnServer(POSSalesr,POSReturnr,LMb.DefCustCode,LMb.DefReturnLocation,servcomp,offlinecomp);
  end;
  return;
end;

updating procedure SynchOfflineToServsm()
BEGIN
  Integer offlinecomp,curcomp;
  record OffLineSetBlock OffLb;
  
  BlockLoad(OffLb);
  offlinecomp = StringToInt(OffLb.OffLineComp);
  curcomp = CurrentCompany;
  if (offlinecomp<=0) then begin goto LSynchOfflineToServsm; end;  
  BeginSync;
  POSOffLineToServ_SynchRegisters(curcomp,offlinecomp,OffLb.SyncSumPOS);
  EndSync;
LSynchOfflineToServsm:;
  RETURN;
END;

global 
updating procedure YesOffLineToServAClasssm()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  SynchOfflineToServsm;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

global 
updating procedure NoOffLineToServAClasssm()
BEGIN
  Integer wn;

  wn = CurWindow;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

global 
updating procedure YesOffLineFromServAClasssm()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  SynchServToOfflineSettingsm;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;

global 
updating procedure NoOffLineFromServAClasssm()
BEGIN
  Integer wn;

  wn = CurWindow;
  CloseWindow(wn);
  wn = OpenMasterWClass;
  RETURN;  
END;
