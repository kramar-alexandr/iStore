external procedure FindOTforAcc(string,var string);
remote updating function Boolean MakeActFromWS(record WSVc,var record ActVc);
external procedure NormalizeObjstr(var string);
external procedure GetACShortAccount(string,var string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Integer CheckSerialStatus(string,string,var string);
external function string 40 SerialNrSClassSpecPName(string);
remote function Integer GetItemType(LongInt,LongInt,string,Integer);
//external function Integer PasteWOItemType(LongInt,string);
remote function Boolean WSVc_PasteArtCode(var record WSVc,Integer);
remote procedure WSVc_PasteQuant(var record WSVc,Integer);
remote procedure WSVc_PasteEMCode(var record WSVc);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(string,val,Integer,Integer,var val);
remote updating function Boolean PasteWOInWS(var record WOVc,var record WSVc);
remote function Boolean PasteCUInWS(var record WSVc,var string);
external procedure RecordActionWS_Print(var record WSVc,string);
external procedure SendArtStat(string,string,string,val,val,val,Date);
external procedure WSSumup(record WSVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RoundRowSum(string,string,var val);

global
function Boolean WSDchrsum(record WSVc WSr,Integer rownr,Integer UseDiscount)
begin
  Boolean chsum;
  row WSVc WSrw;
  val s,v,nilv;

  MatRowGet(WSr,rownr,WSrw);
  CalcSum(WSrw.Quant,WSrw.Price,nilv,WSrw.vRebate,s,UseDiscount);
  if (s!=WSrw.Sum) then begin
    chsum = true;
    RoundRowSum(WSr.CurncyCode,"",s);
    WSrw.Sum = s;
    MatRowPut(WSr,rownr,WSrw);
  end;      
  WSDchrsum = chsum;
  return;
end;

function Boolean WSDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,WSr);
    if (WSVc_PasteArtCode(WSr,rownr)) then begin
      PutWindowRecord(wn,WSr);
    end else begin
      Beep;
    end;
  end;
  WSDClassArtCodeEFAfter = true;
  return;
end;

function Boolean WSDClassQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,WSr);
    WSVc_PasteQuant(WSr,rownr);
    PutWindowRecord(wn,WSr);
  end;
  WSDClassQuantEFAfter = true;
  return;
end;

function Boolean WSDClassRecepyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassRecepyEFAfter = true;
  return;
end;

function Boolean WSDClassPriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassPriceEFAfter = true;
  return;
end;

function Boolean WSDClassvRebateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassvRebateEFAfter = true;
  return;
end;

function Boolean WSDClassBasePriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassBasePriceEFAfter = true;
  return;
end;

function Boolean WSDClassVATCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassVATCodeEFAfter = true;
  return;
end;

function Boolean WSDClassSumEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  row WSVc WSrw;
  record GeneralOptionBlock GenOptRec;
  val s;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,WSr);
    MatRowGet(WSr,rownr,WSrw);
    if ((WSrw.Quant!=0) and (WSrw.Price!=0)) then begin
      s = WSrw.Sum/WSrw.Quant;
      s = WSrw.Price - s;
      s = s*100;
      s = s/WSrw.Price;
      WSrw.vRebate = Round(s,1);
      MatRowPut(WSr,rownr,WSrw);
    end;    
    if (WSDchrsum(WSr,rownr,GenOptRec.UseDiscount)) then begin
      WSSumup(WSr);    
    end;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassSumEFAfter = true;
  return;
end;

function Boolean WSDClassMotherNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record WSVc WSr;
  row WSVc WSrw;

  if (changedf!=0) then begin
    GetWindowRecord(wn,WSr);
    MatRowGet(WSr,rownr,WSrw);
    WSrw.ItemType = GetItemType(WSr.SVONr,WSr.WONr,WSrw.MotherNr,WSrw.ItemType);
//    WSrw.ItemType = PasteWOItemType(WSr.WONr,WSrw.MotherNr);
    MatRowPut(WSr,rownr,WSrw);
    PutWindowRecord(wn,WSr);
  end;
  WSDClassMotherNrEFAfter = true;
  return;
end;

function Boolean WSDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record WSVc WSr;
  string 255 warning;

  GetWindowRecord(wn,WSr);   
  if ((changed!=0) or ((blank(WSr.Addr0)) and (nonblank(WSr.CustCode)))) then begin
    GetWindowRecord(wn,WSr);    
    DeselectWindow(wn,false);
    if (PasteCUInWS(WSr,warning)) then begin
      WSSumup(WSr);
      PutWindowRecord(wn,WSr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  WSDClassCustCodeEFAfter = true;
  return;
end;

updating function Boolean WSDClassWONrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record WSVc WSr;
  record WOVc WOr;
  string 255 warning;

  if (changed!=0) then begin
    GetWindowRecord(wn,WSr);    
    DeselectWindow(wn,false);
    WOr.SerNr = WSr.WONr;
    if (ReadFirstMain(WOr,1,true)) then begin
      if (PasteWOInWS(WOr,WSr)) then begin
        if (PasteCUInWS(WSr,warning)) then begin
          WSSumup(WSr);
          PutWindowRecord(wn,WSr);
          if (nonblank(warning)) then begin
            MessageBox(0,warning);
          end;
        end else begin
          Beep;
        end;
      end else begin
        Beep;
      end;
    end;
  end;
  WSDClassWONrEFAfter = true;
  return;
end;

function Boolean WSDClassCustContactEFAfter(Integer wn,Integer changed)
BEGIN
  record WSVc WSr;
  record CUVc ContactCUr;
  string 255 warning;

  if (changed!=0) then begin
    GetWindowRecord(wn,WSr);    
    DeselectWindow(wn,false);
    if (FindCustomerRelation(WSr.CustCode,WSr.CustContact,ContactCUr)) then begin
      WSr.Phone = ContactCUr.Phone;
      WSr.Fax = ContactCUr.Fax;
    end;
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassCustContactEFAfter = true;
  return;
end;

function Boolean WSDClassEMCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record WSVc WSr;
  string 255 warning;

  if (changed!=0) then begin
    GetWindowRecord(wn,WSr);    
    DeselectWindow(wn,false);
    WSVc_PasteEMCode(WSr);
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassEMCodeEFAfter = true;
  return;
end;

function Boolean WSDClassPriceListEFAfter(Integer wn,Integer changed)
BEGIN
  record WSVc WSr;
  record PLDefVc PLDefr;
  string 255 warning;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WSr);    
    PLDefr.Code = WSr.PriceList;
    if (ReadFirstMain(PLDefr,1,true)) then begin
      WSr.InclVAT = PLDefr.InclVAT;
    end;
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassPriceListEFAfter = true;
  return;
end;

function Boolean WSDClassSerialNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  row WSVc WSrw;
  record WSVc WSr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,WSr);
    MatRowGet(WSr,rownr,WSrw);
    if (CheckSerialStatus(WSrw.ArtCode,WSrw.SerialNr,tstr)==1) then begin
      MessageBox(0,tstr);
    end;
    MatRowPut(WSr,rownr,WSrw);
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassSerialNrEFAfter = res;
  RETURN;
END;

function Boolean WSVc_PasteACShort(var record WSVc WSr,Integer rownr)
BEGIN
  row WSVc WSrw;
  string 255 tstr,obj;
  Boolean res;
  
  if (rownr>=0) then begin
    MatRowGet(WSr,rownr,WSrw);
    GetACShortAccount(WSrw.ACShort,tstr,obj);
    WSrw.CostAcc = tstr;
    WSrw.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(WSrw.Objects) then begin
        if (obj<>WSrw.Objects) then begin
          obj = obj & "," & WSrw.Objects;
          NormalizeObjstr(obj);
        end;  
	  end;				
      WSrw.Objects = obj;
    end;
    MatRowPut(WSr,rownr,WSrw);
    res = true;
  end else begin
    GetACShortAccount(WSr.ACShort,tstr,obj);
    WSr.CostAcc = tstr;
    WSr.Objects = obj;
    if nonblank(obj) then begin
      if nonblank(WSr.Objects) then begin
        if (obj<>WSr.Objects) then begin
          obj = obj & "," & WSr.Objects;
          NormalizeObjstr(obj);
        end;  
	  end;				
      WSr.Objects = obj;
    end;
    res = true;
    
  end;  
  WSVc_PasteACShort = res;
  RETURN;
END;

function Boolean WSDClassACShortEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record WSVc WSr;
  Boolean res;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WSr);
    res = WSVc_PasteACShort(WSr,rownr);
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassACShortEFAfter = res;
  RETURN;
END;

function Boolean WSDClassLocationEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed) //Edit***************************Sasha2,17:43 19.06.2014
BEGIN
  record WSVc WSr;
  row WSVc WSrw;
  record LocationVc Locationr;
  record ObjectsAccBlock OAb;
  row ObjectsAccBlock OArw;
  Boolean res;
  integer i, j, rwcnt, mtrw;
  string 255 salesacc;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WSr);
    	Locationr.Code = WSr.Location;    	
    	if (ReadFirstMain(Locationr,1,true)) then begin
    		WSr.Objects = Locationr.Objects;
    		    		
    	  blockload(OAb);                                                    
		    mtrw = matrowcnt(OAb);
		    For(j=0;j<mtrw;j=j+1)begin
		      matrowget(OAb,j,OArw);
		      if(setinset(OArw.Objects,WSr.Objects))then begin
		        salesacc = OArw.AccCode;
		        j = mtrw;                      
		      end;
		    end;

    		rwcnt = MatRowCnt(WSr);
      		for (i=0;i<rwcnt;i=i+1) begin
	        	MatRowGet(WSr,i,WSrw);
	        	if (NonBlank(WSrw.ArtCode)) then begin
	        		WSrw.CostAcc = salesacc;
	        	end;	
	        	MatRowPut(WSr,i,WSrw);
      		end;
    	end;
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassLocationEFAfter = res;
  RETURN;
END;//Edit***************************Sasha2,17:44 19.06.2014

global
updating function Boolean WSDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = WSDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = WSDClassQuantEFAfter(wn,rownr,changed);
    case "Recepy": res = WSDClassRecepyEFAfter(wn,rownr,changed);
    case "Price": res = WSDClassPriceEFAfter(wn,rownr,changed);
    case "vRebate": res = WSDClassvRebateEFAfter(wn,rownr,changed);
    case "BasePrice": res = WSDClassBasePriceEFAfter(wn,rownr,changed);
    case "VATCode": res = WSDClassVATCodeEFAfter(wn,rownr,changed);
    case "Sum": res = WSDClassSumEFAfter(wn,rownr,changed);
    case "MotherNr": res = WSDClassMotherNrEFAfter(wn,rownr,changed);    
    case "CustCode": res = WSDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "WONr": res = WSDClassWONrEFAfter(wn,fn,rownr,changed);
    case "CustContact": res = WSDClassCustContactEFAfter(wn,changed);
    case "EMCode": res = WSDClassEMCodeEFAfter(wn,changed);
    case "PriceList": res = WSDClassPriceListEFAfter(wn,changed);
    case "SerialNr": res = WSDClassSerialNrEFAfter(wn,rownr,changed!=0);
    case "ACShort": res = WSDClassACShortEFAfter(wn,fn,rownr,changed);
    case "Location": res = WSDClassLocationEFAfter(wn,fn,rownr,changed); //Edit***************************Sasha2,17:44 19.06.2014
  end;
  WSDClassAfterEditField = res;
  RETURN;
END;

global
procedure PrintWSL(Integer wn,Boolean previewf)
BEGIN
  record WSVc WSr;
  Integer i;
  
  i = 1;
  while (GetRecordFromBrowse(WSr,wn,i)) begin
    RecordActionWS_Print(WSr,previewf);
    i = i + 1;
  end;
  RETURN;
END;

global
function Boolean WSDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record WSVc WSr;  
  row WSVc WSrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy;

  res = true;
  GetWindowRecord(wn,WSr);
  rwcnt = MatRowCnt(WSr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(WSr,rownr,WSrw);
    if (WSrw.stp==1) then begin
      FindSalesExVat(WSrw.VATCode,s,0,0,rowsum);
      CalcProc(rowsum,t,tproc);    
      recepy = WSrw.Recepy;    
/*  This makes one extra call, I can see why but we need another solution
      if (blank(recepy)) then begin
        GetRecepy(WSrw.ArtCode,recepy);
      end;  
    
*/  
      SendArtStat(WSrw.ArtCode,WSr.Location,recepy,t,tproc,unitprdisc,WSr.TransDate);
    end;
  end;
  WSDClassSwitchRow = res;  
  return;
end;

global
procedure ItemStatusWSDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("ArtStatIClass",0,0,"","",RepSpec);
  testf = WSDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global
procedure OpenWOFromWSDsm()
BEGIN
  record WSVc WSr;
  record WOVc WOr;
  Integer wn,wn2;

  wn = CurWindow;
  GetWindowRecord(wn,WSr);
  WOr.SerNr = WSr.WONr;
  if (ReadFirstMain(WOr,1,true)) then begin
    wn2 = OpenWindow("WODClass",1,0,"","",WOr);
  end;
  RETURN;
END;

global
function Boolean WSDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record WSVc WSr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update  
  if (WindowState(wn)==updatemode) then begin
    res = false;
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag==0) then begin
      res = true;
      goto LWSDClassActiveEditField;
    end;
    switch (fieldname) begin
      case "LangCode": res = true;
    end;
  end;
LWSDClassActiveEditField:;  
  WSDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean WSDClassPrelOKButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record WSVc WSr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  WSDClassPrelOKButtonAction = res;
  return;
end;

global
function Boolean WSDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record WSVc WSr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  WSDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean WSDClassInvFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record WSVc WSr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  WSDClassInvFlagButtonAction = res;
  return;
end;

global 
function Boolean WSDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record WSVc WSr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin res = false; end;
  end;
  WSDClassDeleteRowTest = res;
  return;
end;

global
function Boolean WSDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record WSVc WSr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,WSr);    
    WSSumUp(WSr);
    PutWindowRecord(wn,WSr);    
  end;
  WSDClassOnOverStrike = true;
  RETURN;
END;

/* Not needed anymore...
global
procedure WSDEnterSpec(var record WSVc WSp,Integer rownr,string fieldname)
BEGIN
  row WSVc WSrw,WS1rw;
  Integer i,rwcnt;
  record UserVc Userr;
  row UserVc Userrw;
  record EGVc EGr;
  row EGVc EGrw;
  Boolean changedf;

  if (rownr<0) then begin
    goto LWSDEnterSpec;
  end;
  
//  if (fn>=sf) then begin
    MatRowGet(WSp,rownr,WSrw);
    if (rownr>0) then begin
      MatRowGet(WSp,rownr-1,WS1rw);
    end;
    switch (fieldname) begin
      case "ArtCode":
        if (rownr>0) then begin
          WSrw.ArtCode = WS1rw.ArtCode;
          WSrw.ItemType = WS1rw.ItemType;
          WSrw.MotherNr = WS1rw.MotherNr;
          MatRowPut(WSp,rownr,WSrw);
        end;
    end;    
LWSDEnterSpec:;    
  RETURN;
END;

global
function Boolean WSDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record WSVc WSr;
  
  res = false;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    GetWindowRecord(wn,WSr);
    WSDEnterSpec(WSr,rownr,fieldname);
    res = true;
    PutWindowRecord(wn,WSr);
  end;
  WSDClassOnEnterKey = true;
  RETURN;
END;
*/

global 
function Boolean WSDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record WSVc WSr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,WSr);
    if (WSr.OKFlag!=0) then begin res = false; end;
  end;
  WSDClassInsertRowTest = res;
  return;
end;

global 
function Boolean WSDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record WSVc WSr;
  Boolean res;
  Integer updatemode,rwcnt;

  if (rownr<0) then begin
    goto LWSDClassOverStrikeTest;
  end;
  GetWindowRecord(wn,WSr);
  updatemode = 2;//Rs_update
  rwcnt = MatRowCnt(WSr);
  if (WindowState(wn)!=updatemode) then begin
    MessageBox(1050,"");
    goto LWSDClassOverStrikeTest;
  end;
  if (WindowOldRowcnt(wn)==rwcnt) then begin
    MessageBox(1050,"");
    goto LWSDClassOverStrikeTest;
  end;
  if (rownr<WindowOldRowcnt(wn)) then begin res = true; end;
LWSDClassOverStrikeTest:;
  WSDClassOverStrikeTest = res;
  return;
end;

function string 40 WSDClassSpecPasteNameObjects(Integer wn)
begin
  record WSVc WSr;
  row WSVc WSrw;
  Integer rownr;
  string 200 typ;
  string 255 psname,accnr;

  GetWindowRecord(wn,WSr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(WSr,rownr,WSrw);
    accnr = WSrw.CostAcc;
  end;
  if (blank(accnr)) then begin
    accnr = WSr.CostAcc;
  end;
  FindOTforAcc(accnr,typ);
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = "ObjSClass";
  end;
  WSDClassSpecPasteNameObjects = psname;
  return;
end;

global
function string 40 WSDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": psname = WSDClassSpecPasteNameObjects(wn);
  end;
  WSDClassSpecPasteName = psname;
  return;
end;

global
function Boolean WSDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record WSVc WSr;
  Integer normalmode,updatemode;

  res = false;
  WSDClassExportFlagButtonAction = res;
  RETURN;
END;

global
updating procedure ActFromWSDsm()
begin
  record WSVc WSr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,WSr);
    if (MakeActFromWS(WSr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  return;
end;
