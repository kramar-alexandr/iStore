remote updating procedure RA_CrRepricingFromSM(record StockMovVc,var record MyRepricingVc);
remote procedure RA_MyRepricingDClassArtCodeEFAfter(var record MyRepricingVc,integer);

global
function Boolean MyLabelItemSClassOnOKWindow(Integer wn)
begin
  record MyLabelItemVc MILr;
  record MyRepricingVc MRr;
  row MyRepricingVc MRrw;
  integer mwn,rownr;
  
  mwn = MotherWindow(wn);
  getwindowrecord(mwn,MRr);
  rownr = WindowActiveRow(mwn);
  Matrowget(MRr,rownr,MRrw);
  
  ReadMarkedRecord(wn,MILr);
  MRrw.PriceList = MILr.PriceList;
  MRrw.FormCode = MILr.DefFormCode;
  MRrw.Size = MILr.Size;
  MatrowPut(MRr,rownr,MRrw);
  
  putwindowrecord(mwn,MRr);
  
  MyLabelItemSClassOnOKWindow = true;
  return;
end;


function Boolean MyLabelItemDClassArtCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record MyLabelItemVc MILr;
  record INVc INr;
  Boolean res;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,MILr);
    
    INr.Code = MILr.ArtCode;
    if(readfirstmain(INr,1,true))begin
      MILr.Name = INr.Name;
      PutWindowRecord(wn,MILr);
    end;
  end;
  MyLabelItemDClassArtCodeEFAfter = res;
  RETURN;
END;

function Boolean MyLabelItemDClassPriceListEFAfter(Integer wn,Boolean changedf)
BEGIN
  record MyLabelItemVc MILr;
  Boolean res;
  record PLDefVc PLDr;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,MILr);
    PLDr.Code = MILr.PriceList;
    if(readfirstmain(PLDr,1,true))begin
      MILr.CurncyCode = PLDr.CurncyCode;
      PutWindowRecord(wn,MILr);
    end;
  end;
  MyLabelItemDClassPriceListEFAfter = res;
  RETURN;
END;


global
function Boolean MyLabelItemDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = MyLabelItemDClassArtCodeEFAfter(wn,changed);
    case "PriceList": res = MyLabelItemDClassPriceListEFAfter(wn,changed);

  end;
  MyLabelItemDClassAfterEditField = res;
  RETURN;
END;


global
function Boolean MyRepricingDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record MyRepricingVc MRr;
  
  res = true;
  GetWindowRecord(wn,MRr);
  if (MRr.OKFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  MyRepricingDClassUpdateTest = res;
  return;
end;


global
updating function Boolean MyRepricingDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record MyRepricingVc MRr;
  Integer normalmode,tf;
  record LocalMachineBlock LMb;
  
  blockload(LMb);
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,MRr);
    MRr.Cust1 = LMb.DefCustCode;
    if (PrintDocument(MRr,"ItemLabForm1",previewf)) then begin end;
  MyRepricingDClassPrint = true;
  RETURN;
END;

global
updating function Boolean MyLabelItemDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record MyLabelItemVc MLIr;
  Integer normalmode,tf;
  record LocalMachineBlock LMb;
  
  blockload(LMb);
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,MLIr);
    MLIr.Cust1 = LMb.DefCustCode;
    if (PrintDocument(MLIr,"ItemLabForm",previewf)) then begin end;
  MyLabelItemDClassPrint = true;
  RETURN;
END;

function Boolean MyRepricingDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record MyRepricingVc MRr;
  Boolean res;
  
  res = true;
  if (changedf) then begin
    
    GetWindowRecord(wn,MRr);
    RA_MyRepricingDClassArtCodeEFAfter(MRr,rownr);
    PutWindowRecord(wn,MRr);
  end;
  MyRepricingDClassArtCodeEFAfter = res;
  RETURN;
END;

function Boolean MyRepricingDClassCust2EFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record MyRepricingVc MRr;
  record LocalMachineAccBlock LMAb;
  row LocalMachineAccBlock LMArw;
  integer mtrw,i;
  boolean res;
  
  res = true;
  if (changedf) then begin
    
    GetWindowRecord(wn,MRr);
    blockload(LMAb);
    mtrw = matrowcnt(LMAb);
    for(i=0;i<mtrw;i=i+1)begin
      matrowget(LMAb,i,LMArw);
      if(LMArw.LocalMachine==MRr.Cust2)then begin
        MRr.DefPriceCode = LMArw.Str01;
      end;
    end;
    PutWindowRecord(wn,MRr);
  end;
  MyRepricingDClassCust2EFAfter = res;
  RETURN;
END;

global
function Boolean MyRepricingDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = MyRepricingDClassArtCodeEFAfter(wn,rownr,changed);
    case "Cust2": res = MyRepricingDClassCust2EFAfter(wn,rownr,changed);

  end;
  MyRepricingDClassAfterEditField = res;
  RETURN;
END;

/*global procedure MyRepricingDClassReportDefaults(integer wn)
begin

  messagebox(0,"ag");

return;
end;*/

global
procedure MyRepricingVcRecordDefaultsClient(var record MyRepricingVc MRr,record MyRepricingVc MR2r,LongInt stat,LongInt long4)
begin
  record LocalMachineBlock LMb;
  record PLDefVc PLr;
  record LocalMachineAccBlock LMAb;
  row LocalMachineAccBlock LMArw;
  integer mtrw,i;
  
  blockload(LMb);
  blockload(LMAb);
  mtrw = matrowcnt(LMAb);
  for(i=0;i<mtrw;i=i+1)begin
    matrowget(LMAb,i,LMArw);
    if(LMArw.LocalMachine==LMb.LocalMachineCode)then begin
      MRr.DefPriceCode = LMArw.Str01;
    end;
  end;
  MRr.Cust2 = LMb.LocalMachineCode;
  //messagebox(0,LMb.LocalMachineCode);
  MRr.Location = LMb.DefLocation;
  MRr.TransDate = currentdate;
  
  
return;
end;

global
function LongInt MyRepricingVcRecordCheck(record MyRepricingVc MRr,record MyRepricingVc MR2r,LongInt stat,LongInt check)
BEGIN
		
  if(blank(MRr.TransDate))then begin
    MRr.TransDate = currentdate;
  end;
  
  if(blank(MRr.SalesMan))then begin
    MRr.SalesMan = currentuser;
  end;
  
  if(MRr.SerNr==-1)then begin
    MRr.SerNr = NextSerNr("MyRepricingVc",MRr.TransDate,-1,false,"");
  end;


return;
end;


global
function LongInt MyLabelItemVcRecordCheck(record MyLabelItemVc MLIr,record MyLabelItemVc MLI2r,LongInt stat,LongInt check)
BEGIN
longint res;
record INVc INr;
record DocVc Docr;
record PLDefVc PLDr;
record CurncyCodeVc CCr;
  res = 0;
  
  if(blank(MLIr.ArtCode))then begin
    RecordCheckError(1058,"",-1,"ArtCode");      
      res = -1;
    goto lMyLabelItemVcRecordCheck;
  end;
  
  if(nonblank(MLIr.ArtCode))then begin
    INr.Code = MLIr.ArtCode;
    if(readfirstmain(INr,1,true)==false)then begin
      RecordCheckError(1120,"",-1,"ArtCode");      
        res = -1;
      goto lMyLabelItemVcRecordCheck;
    end;
  end;
  
  if(blank(MLIr.DefFormCode))then begin
    RecordCheckError(1058,"",-1,"DefFormCode");      
      res = -1;
    goto lMyLabelItemVcRecordCheck;
  end;
  
  if(nonblank(MLIr.DefFormCode))then begin
    Docr.Code = MLIr.DefFormCode;
    if(readfirstmain(Docr,1,true)==false)then begin
      RecordCheckError(1120,"",-1,"DefFormCode");      
        res = -1;
      goto lMyLabelItemVcRecordCheck;
    end;
  end;
  
  if(blank(MLIr.PriceList))then begin
    RecordCheckError(1058,"",-1,"PriceList");      
      res = -1;
    goto lMyLabelItemVcRecordCheck;
  end;
  
  if(nonblank(MLIr.PriceList))then begin
    PLDr.Code = MLIr.PriceList;
    if(readfirstmain(PLDr,1,true)==false)then begin
      RecordCheckError(1120,"",-1,"PriceList");      
        res = -1;
      goto lMyLabelItemVcRecordCheck;
    end;
  end;
  
  
  if(blank(MLIr.CurncyCode))then begin
    RecordCheckError(1058,"",-1,"CurncyCode");      
      res = -1;
    goto lMyLabelItemVcRecordCheck;
  end;
  
  if(nonblank(MLIr.CurncyCode))then begin
    CCr.CurncyCode = MLIr.CurncyCode;
    if(readfirstmain(CCr,1,true)==false)then begin
      RecordCheckError(1120,"",-1,"CurncyCode");      
        res = -1;
      goto lMyLabelItemVcRecordCheck;
    end;
  end;
  
 // 1120
  
lMyLabelItemVcRecordCheck:;

MyLabelItemVcRecordCheck = res;
return;
end;

//**********************************************************************************************************************************************************************

global procedure PrintPU_Zebra(record RcVc RepSpec)
begin
  record PUVc PUr,newPUr;
  row PUVc PUrw,newPUrw;
  integer wn,i,mtrw,lenth,h,k;
  area aLabel;
  record INVc INr;
  boolean testf;
  record ZebraPrinterBlock ZPb;
  string 50 printername;
  
  blockload(ZPb);
  
  printername = ZPb.PrinterName;
  
  PUr.SerNr = RepSpec.long1;
  readfirstmain(PUr,1,true);
  
  recordnew(newPUr);
  k=0;
  mtrw = MatRowCnt(PUr);
  
  if(RepSpec.flags[0]==1)then begin
    if(RepSpec.flags[1]>0 and RepSpec.flags[1]<=mtrw and RepSpec.flags[2]>=RepSpec.flags[1] and RepSpec.flags[2]<=mtrw)then begin
      i=RepSpec.flags[1]-1;
      mtrw = RepSpec.flags[2];
    end else begin
      i=0;
      mtrw=0;
    end;
  end;
  
  for (i=i;i<mtrw;i=i+1) begin
    testf = true;
    MatRowGet(PUr,i,PUrw);
    if (nonblank(PUrw.ArtCode)) then begin
      INr.Code = PUrw.ArtCode;
      If(readfirstmain(INr,1,true)) then begin
        If(nonblank(INr.AlternativeCode)) then begin
          lenth = len(INr.AlternativeCode);
          if(lenth!=5)then begin testf=false; end;
          for(h=0;h<lenth;h=h+1) begin
            if((mid(INr.AlternativeCode,h,1)<"0") or (mid(INr.AlternativeCode,h,1)>"9")) then begin testf = false; end;
          end;
        end else begin
          testf = false;
        end;
        if(testf) then begin
          matrowget(newPUr,k,newPUrw);
          newPUrw.ArtCode = PUrw.ArtCode;
          newPUrw.Spec = INr.AlternativeCode;
          newPUrw.SerialNr = PUrw.SerialNr;
          matrowput(newPUr,k,newPUrw);
          k=k+1;
        end;
      end; 
    end;
  end;
  
  if(k>0)then begin
    
    SetAreaZeroSize(aLabel);
    addtexttoarea("q464" & chr(13) & chr(10),aLabel);
    addtexttoarea("Q320,16" & chr(13) & chr(10),aLabel);
    addtexttoarea("D10" & chr(13) & chr(10),aLabel);
    addtexttoarea("I8,C" & chr(13) & chr(10),aLabel);
    addtexttoarea("FK\"1\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("FS\"1\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V00,13,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V01,5,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V02,50,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V03,50,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V04,3,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("B60,26,0,E30,3,2,100,B,V00" & chr(13) & chr(10),aLabel);
    addtexttoarea("X50,145,5,408,250" & chr(13) & chr(10),aLabel);
    addtexttoarea("B115,155,0,1,3,2,60,A,V01" & chr(13) & chr(10),aLabel);
    addtexttoarea("A100,245,0,2,1,1,N,V02" & chr(13) & chr(10),aLabel);
    addtexttoarea("A100,275,0,4,1,1,N,V03" & chr(13) & chr(10),aLabel);
    addtexttoarea("PAV04" & chr(13) & chr(10),aLabel);
    addtexttoarea("FE" & chr(13) & chr(10),aLabel);
    addtexttoarea(chr(13) & chr(10),aLabel);
    
    mtrw = MatRowCnt(newPUr);
    for (i=0;i<mtrw;i=i+1) begin
      MatRowGet(newPUr,i,newPUrw);
      if (nonblank(newPUrw.ArtCode)) then begin
        addtexttoarea("FR\"1\"" & chr(13) & chr(10),aLabel);
        addtexttoarea("?" & chr(13) & chr(10),aLabel);
        addtexttoarea(newPUrw.SerialNr & chr(13) & chr(10),aLabel);
        addtexttoarea(newPUrw.Spec & chr(13) & chr(10),aLabel);
        addtexttoarea("Alt/Code: " & newPUrw.Spec & chr(13) & chr(10),aLabel);
        addtexttoarea("P/N: " & newPUrw.ArtCode & chr(13) & chr(10),aLabel);
        addtexttoarea("1" & chr(13) & chr(10),aLabel);
        addtexttoarea(chr(13) & chr(10),aLabel);
      end;
    end;
  
  CreateFile("ZebraPrint.epl");
  closefile;
  WriteAreaToFile(aLabel,"ZebraPrint.epl",0);
  millisleep(50);
  RunProgram("/usr/bin/lp","-d " & printername & " -o raw ZebraPrint.epl");
  end;
  
return;
end;

//**********************************************************************************************************************************************************************

global procedure PrintPU_ZebraBig(record RcVc RepSpec)
begin
  record PUVc PUr,newPUr;
  row PUVc PUrw,newPUrw;
  integer wn,i,mtrw,lenth,h,k,j;
  area aLabel;
  record INVc INr;
  boolean testf;
  record ZebraPrinterBlock ZPb;
  string 50 printername;
  record GigieneTextVc GGr;
  row GigieneTextVc GGrw;
  integer qty;
  
  blockload(ZPb);
  
  printername = ZPb.PrinterName;
  
  PUr.SerNr = RepSpec.long1;
  readfirstmain(PUr,1,true);
  
  recordnew(newPUr);
  k=0;
  mtrw = MatRowCnt(PUr);
  
  if(RepSpec.flags[0]==1)then begin
    if(RepSpec.flags[1]>0 and RepSpec.flags[1]<=mtrw and RepSpec.flags[2]>=RepSpec.flags[1] and RepSpec.flags[2]<=mtrw)then begin
      i=RepSpec.flags[1]-1;
      mtrw = RepSpec.flags[2];
    end else begin
      i=0;
      mtrw=0;
    end;
  end;
  
  for (i=i;i<mtrw;i=i+1) begin
    testf = true;
    MatRowGet(PUr,i,PUrw);
    if (nonblank(PUrw.ArtCode)) then begin
      INr.Code = PUrw.ArtCode;
      If(readfirstmain(INr,1,true)) then begin
        If(nonblank(INr.AlternativeCode)) then begin
          lenth = len(INr.AlternativeCode);
          if(lenth!=5)then begin testf=false; end;
          for(h=0;h<lenth;h=h+1) begin
            if((mid(INr.AlternativeCode,h,1)<"0") or (mid(INr.AlternativeCode,h,1)>"9")) then begin testf = false; end;
          end;
        end else begin
          testf = false;
        end;
        if(testf) then begin
          matrowget(newPUr,k,newPUrw);
          newPUrw.ArtCode = PUrw.ArtCode;
          newPUrw.Spec = INr.AlternativeCode;
          newPUrw.SerialNr = PUrw.SerialNr;
          newPUrw.Quant = PUrw.Quant;
          matrowput(newPUr,k,newPUrw);
          k=k+1;
        end;
      end; 
    end;
  end;
  
  if(k>0)then begin
    
    SetAreaZeroSize(aLabel);
    addtexttoarea("q600" & chr(13) & chr(10),aLabel);
    addtexttoarea("Q350,32" & chr(13) & chr(10),aLabel);
    addtexttoarea("D10" & chr(13) & chr(10),aLabel);
    addtexttoarea("S4" & chr(13) & chr(10),aLabel);
    addtexttoarea("i0" & chr(13) & chr(10),aLabel);
    addtexttoarea("I8,C" & chr(13) & chr(10),aLabel);
    addtexttoarea("FK\"1\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("FS\"1\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V00,13,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V01,5,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V02,50,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V03,50,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V04,4,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V05,4,N,\"\"" & chr(13) & chr(10),aLabel);
    
    addtexttoarea("V06,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V07,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V08,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V09,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V10,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V11,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V12,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V13,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V14,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V15,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V16,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V17,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V18,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V19,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V20,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V21,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V22,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V23,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V24,99,N,\"\"" & chr(13) & chr(10),aLabel);
    addtexttoarea("V25,99,N,\"\"" & chr(13) & chr(10),aLabel);
    
    addtexttoarea("A20,385,3,a,1,1,N,V06" & chr(13) & chr(10),aLabel);
    addtexttoarea("A40,385,3,a,1,1,N,V07" & chr(13) & chr(10),aLabel);
    addtexttoarea("A60,385,3,a,1,1,N,V08" & chr(13) & chr(10),aLabel);
    addtexttoarea("A80,385,3,a,1,1,N,V09" & chr(13) & chr(10),aLabel);
    addtexttoarea("A100,385,3,a,1,1,N,V10" & chr(13) & chr(10),aLabel);
    addtexttoarea("A120,385,3,a,1,1,N,V11" & chr(13) & chr(10),aLabel);
    addtexttoarea("A140,385,3,a,1,1,N,V12" & chr(13) & chr(10),aLabel);
    addtexttoarea("A160,385,3,a,1,1,N,V13" & chr(13) & chr(10),aLabel);
    addtexttoarea("A180,385,3,a,1,1,N,V14" & chr(13) & chr(10),aLabel);
    addtexttoarea("A200,385,3,a,1,1,N,V15" & chr(13) & chr(10),aLabel);
    addtexttoarea("A220,385,3,a,1,1,N,V16" & chr(13) & chr(10),aLabel);
    addtexttoarea("A240,385,3,a,1,1,N,V17" & chr(13) & chr(10),aLabel);
    addtexttoarea("A260,385,3,a,1,1,N,V18" & chr(13) & chr(10),aLabel);
    addtexttoarea("A280,385,3,a,1,1,N,V19" & chr(13) & chr(10),aLabel);
    addtexttoarea("A300,385,3,a,1,1,N,V20" & chr(13) & chr(10),aLabel);
    addtexttoarea("A320,385,3,a,1,1,N,V21" & chr(13) & chr(10),aLabel);
    addtexttoarea("A340,385,3,a,1,1,N,V22" & chr(13) & chr(10),aLabel);
    addtexttoarea("A360,385,3,a,1,1,N,V23" & chr(13) & chr(10),aLabel);
    addtexttoarea("A380,385,3,a,1,1,N,V24" & chr(13) & chr(10),aLabel);
    addtexttoarea("A400,385,3,a,1,1,N,V25" & chr(13) & chr(10),aLabel);
    
    addtexttoarea("B332,364,3,E30,3,2,100,B,V00" & chr(13) & chr(10),aLabel);
    addtexttoarea("X10,5,5,595,395" & chr(13) & chr(10),aLabel);
    addtexttoarea("B470,324,3,1,3,2,60,A,V01" & chr(13) & chr(10),aLabel);
    addtexttoarea("X454,15,5,546,385" & chr(13) & chr(10),aLabel);
    addtexttoarea("A536,365,3,2,1,1,N,V02" & chr(13) & chr(10),aLabel);
    addtexttoarea("A560,385,3,4,1,1,N,V03" & chr(13) & chr(10),aLabel);
    addtexttoarea("PAV04,V05" & chr(13) & chr(10),aLabel);
    addtexttoarea("FE" & chr(13) & chr(10),aLabel);
    addtexttoarea(chr(13) & chr(10),aLabel);
    
    mtrw = MatRowCnt(newPUr);
    for (i=0;i<mtrw;i=i+1) begin
      MatRowGet(newPUr,i,newPUrw);
      if (nonblank(newPUrw.ArtCode)) then begin
        addtexttoarea("FR\"1\"" & chr(13) & chr(10),aLabel);
        addtexttoarea("?" & chr(13) & chr(10),aLabel);
        addtexttoarea(newPUrw.SerialNr & chr(13) & chr(10),aLabel);
        addtexttoarea(newPUrw.Spec & chr(13) & chr(10),aLabel);
        addtexttoarea("Alt/Code: " & newPUrw.Spec & chr(13) & chr(10),aLabel);
        addtexttoarea("P/N:" & newPUrw.ArtCode & chr(13) & chr(10),aLabel);
        qty = newPUrw.Quant;
        addtexttoarea(qty & chr(13) & chr(10),aLabel);
        
        addtexttoarea(qty & chr(13) & chr(10),aLabel);
        GGr.ArtCode = newPUrw.ArtCode;
        if(readfirstmain(GGr,1,true))then begin
          for(j=0;j<20;j=j+1)begin
            matrowget(GGr,j,GGrw);
            addtexttoarea(GGrw.Str1 & chr(13) & chr(10),aLabel);
          end;
        end else begin
          for(j=0;j<20;j=j+1)begin
            addtexttoarea("" & chr(13) & chr(10),aLabel);
          end;
        end;
        addtexttoarea(chr(13) & chr(10),aLabel);
      end;
    end;
  
  CreateFile("ZebraPrint.epl");
  closefile;
  SetExportCodepage("CP1251");
  WriteAreaToFile(aLabel,"ZebraPrint.epl",0);
  millisleep(50);
  RunProgram("/usr/bin/lp","-d " & printername & " -o raw ZebraPrint.epl");
  end;
  
return;
end;

//*********************************OPISANIE*********************************************************************************************************

procedure preparetext (var string str)
begin
integer i,lenth;
string 255 res;
  
  res = "";
  lenth = len(str);
  for(i=0;i<lenth;i=i+1)begin
    if(mid(str,i,1)=="\"")then begin res = res & "\\"; end;
    res = res & mid(str,i,1);
  end;
  str = res;
return;
end;

global procedure GigieneTextZebraPrint()
begin
  integer wn,i,mtrw,lenth,h,k,j;
  area aLabel;
  boolean testf;
  record ZebraPrinterBlock ZPb;
  string 50 printername;
  record GigieneTextVc GGr;
  row GigieneTextVc GGrw;
  record RcVc RepSpec;
  string 255 printtext;
  
  blockload(ZPb);
    
  wn = CurWindow;
  deselectwindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  GGr.ArtCode = RepSpec.f1;
  ReadFirstmain(GGr,1,true);
  printername = ZPb.PrinterName;
  mtrw = matrowcnt(GGr);
    
    SetAreaZeroSize(aLabel);
    addtexttoarea("N" & chr(13) & chr(10),aLabel);
    addtexttoarea("q464" & chr(13) & chr(10),aLabel);
    addtexttoarea("Q320,16" & chr(13) & chr(10),aLabel);
    addtexttoarea("D15" & chr(13) & chr(10),aLabel);
    addtexttoarea("I8,C" & chr(13) & chr(10),aLabel);
    addtexttoarea("X10,5,5,460,305" & chr(13) & chr(10),aLabel);
    addtexttoarea("A20,18,0,a,1,1,N,\"Article: " & GGr.ArtCode & "\"" & chr(13) & chr(10),aLabel);
    k=36;
    for(i=0;i<mtrw;i=i+1)begin
      matrowget(GGr,i,GGrw);
    printtext = GGrw.Str1;
    preparetext(printtext);
    addtexttoarea("A20," & k &",0,a,1,1,N,\"" & printtext & "\"" & chr(13) & chr(10),aLabel);
    k=k+18;
    end;
    addtexttoarea("P" & RepSpec.flags[1] & chr(13) & chr(10),aLabel);
    addtexttoarea(chr(13) & chr(10),aLabel);
    
    
   
  CreateFile("ZebraPrint.epl");
  closefile;
  SetExportCodepage("CP1251");
  WriteAreaToFile(aLabel,"ZebraPrint.epl",0);
  millisleep(50);
  RunProgram("/usr/bin/lp","-d " & printername & " -o raw ZebraPrint.epl");
  
return;
end;

global procedure ZebraFont()
begin
  record LocalMachineBlock LMb;
  string 50 printername;
  
  printername = LMb.DefPrinter;
  
  RunProgram("/usr/bin/lp","-d " & printername & " -o raw arial_6.bin");
  
return;
end;

global procedure PrintPUZebra()
begin
integer wn;
record RcVc RepSpec;

  wn = CurWindow;
  deselectwindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  
  switch(RepSpec.flags[3])begin
    
    case 0:PrintPU_Zebra(RepSpec);
    case 1:PrintPU_ZebraBig(RepSpec);
    
  end;

return;
end;


function Boolean MyPrintLabelDialogTClassflagsEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
integer i,mtrw;
record RcVc RepSpec;

  getwindowrecord(wn,RepSpec);
  if(RepSpec.flags[0]!=1)then begin
    RepSpec.flags[0]=1;
    PutWindowRecord(wn,RepSpec);
  end;
  
  
return;
end;



global
function Boolean MyPrintLabelDialogTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
    
  switch (fieldname) begin
    case "flags[1]":MyPrintLabelDialogTClassflagsEFAfter(wn,rownr,changed);              
    case "flags[2]":MyPrintLabelDialogTClassflagsEFAfter(wn,rownr,changed);
  end;
  MyPrintLabelDialogTClassAfterEditField = res;
  RETURN;
END;

global procedure PrintPUZebraDsm()
begin
record RcVc RepSpec;
record PUVc PUr;
integer mtrw,i,wn;

wn = curwindow;
Getwindowrecord(wn,PUr);
mtrw = matrowcnt(PUr);

recordNew(RepSpec);

RepSpec.long1 = PUr.SerNr;
RepSpec.flags[0]=0;
RepSpec.flags[1]=1;
RepSpec.flags[2]=mtrw;
RepSpec.flags[3]=0;
OpenWindow("MyPrintLabelDialogTClass",1,0,"","",RepSpec);

return;
end;


function Boolean GigieneLabelDialogTClassflagsEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
integer i,mtrw;
record RcVc RepSpec;
  getwindowrecord(wn,RepSpec);
  if(RepSpec.flags[0]!=1)then begin
    RepSpec.flags[0]=1;
    PutWindowRecord(wn,RepSpec);
  end;
return;
end;



global
function Boolean GigieneLabelDialogTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
    
  switch (fieldname) begin
    case "flags[1]":GigieneLabelDialogTClassflagsEFAfter(wn,rownr,changed);              
  end;
  GigieneLabelDialogTClassAfterEditField = res;
  RETURN;
END;

global procedure GigieneTextZebraPrintDsm()
begin
record RcVc RepSpec;
record PUVc PUr;
integer mtrw,i,wn;
record GigieneTextVc GGr;

wn = curwindow;
Getwindowrecord(wn,GGr);

recordNew(RepSpec);

RepSpec.f1 = GGr.ArtCode;
RepSpec.flags[1]=1;

OpenWindow("GigieneLabelDialogTClass",1,0,"","",RepSpec);

return;
end;





global updating procedure CrRepricingFromSMDsm()
BEGIN
  record StockMovVc SMr;
  Integer wn,i,mtrw;
  Integer normalstate;
  record MyRepricingVc MRPr;
  
  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
  		GetWindowRecord(wn,SMr);
  		recordnew(MRPr);
  		
  		RA_CrRepricingFromSM(SMr,MRPr);
  		
  		mtrw = matrowcnt(MRPr);
  		if(mtrw>0)then begin
  			CreateRecordLink(SMr,CurrentCompany,MRPr,CurrentCompany);
			CreateRecordLink(MRPr,CurrentCompany,SMr,CurrentCompany);
  			OpenWindow("MyRepricingDClass",1,0,"","",MRPr);
  		end;
  end;
  
  RETURN;
END;

