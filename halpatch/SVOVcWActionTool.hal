external procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string);
external function Boolean GetPD(var record PDVc);
external procedure GetPriceList(string,var string,var Integer);
external procedure SetSalesMan(var string,string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer);
external function Boolean QtyDepPriceL(string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,
                                                string,Boolean,var Boolean,string,var string,var val,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function LongInt ItemInContract(string,string,Date);
external procedure SVOGetRate(record SVOVc);

SetLangMode(LangUkrainian,"UKR",0);

global
function Boolean PasteCUInSVO(var record SVOVc SVOp,var string warntext)
BEGIN
  record CUVc CUr;
  val bal;
  val limit;
  Boolean res;
  string 255 tstr;
  record PDVc PDr;
  Integer InclVAT;
  
  CUr.Code = SVOp.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0)) then begin
    SVOp.Addr0 = CUr.Name;
    SVOp.Addr1 = CUr.InvAddr0;
    SVOp.Addr2 = CUr.InvAddr1;
    SVOp.Addr3 = CUr.InvAddr2;
    SVOp.InvAddr3 = CUr.InvAddr3;
    SVOp.InvAddr4 = CUr.InvAddr4;
    SVOp.CustContact = CUr.Person;
    if ((nonblank(CUr.DelAddr0)) or
        (nonblank(CUr.DelAddr1)) or
        (nonblank(CUr.DelAddr2))) then begin
      SVOp.ShipAddr0 = CUr.Name;
      SVOp.ShipAddr1 = CUr.DelAddr0;
      SVOp.ShipAddr2 = CUr.DelAddr1;
      SVOp.ShipAddr3 = CUr.DelAddr2;
      SVOp.DelAddr3 = CUr.DelAddr3;
      SVOp.DelAddr4 = CUr.DelAddr4;
    end else begin
      SVOp.ShipAddr0 = "";
      SVOp.ShipAddr1 = "";
      SVOp.ShipAddr2 = "";
      SVOp.ShipAddr3 = "";
      SVOp.DelAddr3 = "";
      SVOp.DelAddr4 = "";
    end;
    SVOp.InvoiceToCode = CUr.InvoiceToCode;
    SVOp.ExportFlag = CUr.ExportFlag;
    SVOp.PayDeal = CUr.PayDeal;
    SVOp.Objects = CUr.Objects;
    SVOp.CustCat = CUr.CustCat;
    SetSalesMan(tstr,CUr.SalesMan);
    SVOp.SalesMan = tstr;
    SVOp.LangCode = CUr.LangCode;
// Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 1 June 2010 2:05:41 PM
    if(nonblank(CUr.CurncyCode)) then begin
      SVOp.CurncyCode = CUr.CurncyCode;
    end;
	// Edit End ---------------------------------------------- Edit End
	
    SVOp.ShipDeal = CUr.ShipDeal;
    SVOp.ShipMode = CUr.ShipMode;
    SVOp.Comment1 = CUr.OrderComment;
    SVOp.RebCode = CUr.RebCode;
    SVOp.CustVATCode = CUr.VATCode;
    SVOp.Phone = CUr.Phone;
    SVOp.Fax = CUr.Fax;
    SVOp.VATNr = CUr.VATNr;
    tstr = CUr.PLCode;
    InclVAT = SVOp.InclVAT;
    GetPriceList(SVOp.CustCat,tstr,InclVAT);
    SVOp.InclVAT = InclVAT;
    SVOp.PriceList = tstr;
    if (blank(SVOp.PriceList)) then begin
      PDr.Code = SVOp.PayDeal;
      if (GetPD(PDr)) then begin
        SVOp.PriceList = PDr.PriceList;
      end;
    end;    
    SVOp.RebCode = CUr.RebCode;
    warntext = CUr.WarnText1;
    SVOGetRate(SVOp);
    res = true;
  end;
  PasteCUInSVO = res;
  RETURN;
END;

procedure SVOMultiLineText(record SVOVc SVOr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row SVOVc SVOrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(SVOr,SVOrw,1);
    SVOrw.Spec = tstr;
    MatRowInsert(SVOr,arow+tcnt-1,SVOrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure SVOGetRate(record SVOVc SVOp)
BEGIN
  val from,to1,to2,base1,base2;
  string 10 curncy;  
 
  curncy = SVOp.CurncyCode;
  GetFullCurncyRate(curncy,SVOp.TransDate,from,to1,to2,base1,base2);
  SVOp.CurncyCode = curncy;
  SVOp.FrRate = from;
  SVOp.ToRateB1 = to1;
  SVOp.ToRateB2 = to2;
  SVOp.BaseRate1 = base1;
  SVOp.BaseRate2 = base2;
  RETURN;
END;

global
function Boolean GetSVOSerialItem(string incode,string sernr,record SVOSerVc SVOSerp)
BEGIN
  Boolean res;
  Integer keys;
  
  keys = 2;
  if (nonblank(incode)) then begin
    SVOSerp.ItemCode = incode;
  end else begin
    keys = 1;
  end;
  SVOSerp.SerialNr = sernr;
  if (ReadFirstMain(SVOSerp,keys,true)) then begin
    if (SVOSerp.SerialNr==sernr) then begin
//      if (SVOSerp.InStock>0) then begin // Hmm, this might be a problem...
        if (nonblank(incode)) then begin
          if (SVOSerp.ItemCode==incode) then begin res = true; end;
        end else begin
          res = true;
        end;
//      end;  
    end;
  end;
  GetSVOSerialItem = res;
  RETURN;
END;

global
procedure SVOVc_PasteTransDate(var record SVOVc SVOp)
BEGIN
  SVOGetRate(SVOp);
  RETURN;
END;

global
procedure SVOVc_PasteContractNr(var record SVOVc SVOp,Integer rownr)
BEGIN
  record COVc COr;
  row SVOVc SVOrw;
    
  MatRowGet(SVOp,rownr,SVOrw);
  COr.SerNr = SVOrw.ContractNr;
  if (ReadFirstMain(COr,1,true)) then begin
    if (COr.CustCode!=SVOp.CustCode) then begin
      MessageBox(1218,"");
    end;
    if (COr.endDate>=SVOp.TransDate) then begin
      SVOrw.ItemType = 3;
    end else begin
      MessageBox(1999,"");
    end;
  end;  
  if (SVOrw.ItemType==3) then begin
    if (SVOrw.ContractNr==-1) then begin
      SVOrw.ItemType = 0;
    end;  
  end;
  MatRowPut(SVOp,rownr,SVOrw);
  RETURN;
END;

global
function Boolean PasteItemInSVO(var record SVOVc SVOp,Integer rownr)
BEGIN
  row SVOVc SVOrw;
  record INVc INr;
  string 255 tstr;
  val fr,to1,to2,br1,br2;
  Boolean res,calcpricef;
  string 255 curitemname,salesacc,vatcode,tax2code;
  val t,s,rowsum,price,vreb,baseprice,tax2prc;
  Boolean dummyf;

  MatRowGet(SVOp,rownr,SVOrw);
  GetFullCurncyRate(tstr,SVOp.TransDate,fr,to1,to2,br1,br2);
  if (GetItemPriceDiscount3(SVOrw.ArtCode,SVOrw.Quant,INr,SVOp.CurncyCode,
                              SVOp.FrRate,SVOp.ToRateB1,SVOp.ToRateB2,SVOp.BaseRate1,SVOp.BaseRate2,
                              SVOp.LangCode,SVOp.CustCat,SVOp.PriceList,SVOp.RebCode,
                              price,curitemname,vreb,vatcode,baseprice,salesacc,
                              0,calcpricef,SVOp.TransDate,SVOp.CustCode,true,dummyf,SVOp.PayDeal,tax2code,tax2prc,"")) then 
  begin              
    SVOrw.Price     = price;
    SVOrw.ArtCode   = INr.Code;
    SVOrw.VATCode = vatcode;
    SVOrw.SalesAcc = salesacc;
    SVOrw.Spec = curitemname;
    if (nonblank(SVOp.CustVATCode)) then begin
      SVOrw.VATCode = SVOp.CustVATCode;
    end;
    if (GetItemNameStr(1,curitemname,SVOp.LangCode,INr.Name,INr.Code)) begin      
      SVOrw.Spec = curitemname;
    end;
    SVOrw.WOSerNr = -1;
    MatRowPut(SVOp,rownr,SVOrw);
    res = true;
    SVOMultiLineText(SVOp,INr,SVOp.LangCode,rownr);
  end;
  PasteItemInSVO = res;
  RETURN;
END;
 
global
function Boolean SVO_PasterSerialNr(var record SVOVc SVOp,Integer rownr,var string warntext)
BEGIN
  record SVOSerVc SVOSerr;
  row SVOVc SVOrw;
  Boolean res;

  if (rownr<MatRowCnt(SVOp)) then begin  
    MatRowGet(SVOp,rownr,SVOrw);
    if (nonblank(SVOrw.SerialNr)) then begin
      SVOrw.ContractNr = ItemInContract(SVOrw.ArtCode,SVOrw.SerialNr,SVOp.TransDate);
      if (SVOrw.ContractNr>-1) then begin
        SVOrw.ItemType = 3;
      end else begin
        if (SVOrw.ItemType==3) then begin SVOrw.ItemType = 1; end;
      end;
      if (GetSVOSerialItem(SVOrw.ArtCode,SVOrw.SerialNr,SVOSerr)) then begin
        res = true;
        if (blank(SVOp.CustCode)) then begin
          SVOp.CustCode = SVOSerr.CustCode;
          if (PasteCUInSVO(SVOp,warntext)) then begin
          end;
        end;
        if ((blank(SVOrw.ArtCode)) or (blank(SVOrw.Spec))) then begin
          if (blank(SVOrw.ArtCode)) then begin
            SVOrw.ArtCode = SVOSerr.ItemCode;
            SVOrw.Quant = 1;
          end;
          MatRowPut(SVOp,rownr,SVOrw);
          if (PasteItemInSVO(SVOp,rownr)) then begin end;
//          MatRowGet(SVOp,rownr,SVOrw);
        end;
        if (SVOSerr.WarrantyUntil>=SVOp.TransDate) then begin
          MatRowGet(SVOp,rownr,SVOrw);
          SVOrw.ItemType = 2;
          MatRowPut(SVOp,rownr,SVOrw);
        end;
      end;
    end;
  end;
  SVO_PasterSerialNr = res;
  RETURN;
END;

global
function Boolean SVOVc_PasteArtCode(var record SVOVc SVOp,Integer rownr,Boolean changedf)
BEGIN
  Boolean res,chrsum;
  row SVOVc SVOrw;

  MatRowGet(SVOp,rownr,SVOrw);
  if ((changedf) or (blank(SVOrw.Spec) and (nonblank(SVOrw.ArtCode)))) then begin
    chrsum = PasteItemInSVO(SVOp,rownr);
    MatRowGet(SVOp,rownr,SVOrw);
    SVOrw.ItemType = 1;
    SVOrw.ContractNr = ItemInContract(SVOrw.ArtCode,SVOrw.SerialNr,SVOp.TransDate);
    SVOrw.Quant = 1;
    if (SVOrw.ContractNr>-1) then begin
      SVOrw.ItemType = 3;
    end else begin
      if (SVOrw.ItemType==3) then begin SVOrw.ItemType = 1; end;
    end;
    MatRowPut(SVOp,rownr,SVOrw);
    res = true;
  end;
  SVOVc_PasteArtCode = res;
  RETURN;
END;


global
function Boolean SVOVc_PasteQuant(var record SVOVc SVOp,Integer rownr)
BEGIN
  Boolean res,calcpricef;
  record INVc INr;
  row SVOVc SVOrw;
  string 255 tstr,vatcode,salesacc,tax2code;
  val price,vreb,baseprice,tax2prc;
  val fr,to1,to2,br1,br2;
  Boolean dummyf;

  MatRowGet(SVOp,rownr,SVOrw);

  price = SVOrw.Price;
  GetFullCurncyRate(tstr,SVOp.TransDate,fr,to1,to2,br1,br2);
  if (GetItemPriceDiscount3(SVOrw.ArtCode,SVOrw.Quant,INr,SVOp.CurncyCode,
                            fr,to1,to2,br1,br2,
                            SVOp.LangCode,SVOp.CustCat,SVOp.PriceList,SVOp.RebCode,
                            price,tstr,vreb,vatcode,baseprice,salesacc,
                            SVOp.ExportFlag,calcpricef,SVOp.TransDate,SVOp.CustCode,true,dummyf,SVOp.PayDeal,tax2code,tax2prc,"")) then
  begin
    SVOrw.ArtCode = INr.Code;
    if (nonblank(SVOp.PriceList)) then begin
      if (QtyDepPriceL(SVOp.PriceList)) then begin
        SVOrw.Price = price;
      end;
    end;
    if (calcpricef) then begin
      MatRowPut(SVOp,rownr,SVOrw);
      MatRowGet(SVOp,rownr,SVOrw);
    end;
    if (nonblank(SVOp.CustVATCode)) then begin
      SVOrw.VATCode = SVOp.CustVATCode;
    end;
  end;
  MatRowPut(SVOp,rownr,SVOrw);
  SVOVc_PasteQuant = res;
  RETURN;
END;

global
function Boolean PasteInvoiceToCodeInSVO(var record SVOVc SVOp,var string warntext)
BEGIN
  record CUVc CUr;
  val bal;
  val limit;
  Boolean res;
  
  warntext = "";
  CUr.Code = SVOp.InvoiceToCode;
  if (blank(CUr.Code)) then begin CUr.Code = SVOp.CustCode; end;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0)) then begin
    SVOp.Addr1 = CUr.InvAddr0;
    SVOp.Addr2 = CUr.InvAddr1;
    SVOp.Addr3 = CUr.InvAddr2;
    SVOp.InvAddr3 = CUr.InvAddr3;
    SVOp.InvAddr4 = CUr.InvAddr4;
    SVOp.Phone = CUr.Phone;
    SVOp.Fax = CUr.Fax;
    res = true;
  end;
  PasteInvoiceToCodeInSVO = res;
  RETURN;
END;

global
procedure SVOVc_PasteDelAddrCode(var record SVOVc SVOp)
begin
  string 255 name,a0,a1,a2,a3,a4,region;
  
  SetDelAddr(SVOp.CustCode,SVOp.DelAddrCode,name,a0,a1,a2,a3,a4,region);
  SVOp.ShipAddr0 = name;
  SVOp.ShipAddr1 = a0;
  SVOp.ShipAddr2 = a1;
  SVOp.ShipAddr3 = a2;
  SVOp.DelAddr3 = a3;
  SVOp.DelAddr4 = a4;
  SVOp.Region = region;
  return;
end;


global updating procedure AttachNoteToSVO(record SVOVc SVOr, var Record NotepadVc Noter,integer compnr,string user)
begin
  record RLinkVc RLinkr;
  Integer notenr;
  boolean findf;
  record UserVc Userr;
  
  Userr.Code = user;
  readfirstmain(Userr,1,true);
  
  Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  Noter.Classification = 1;
  Noter.CompanyNr = compnr;
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(SVOr,compnr,Noter,compnr);
    notenr = 1;
    while (ReadRecordLink(SVOr,notenr,Noter,RLinkr)) begin
      notenr = notenr + 1;
    end;
    if (ReadRecordLink(SVOr,notenr-1,Noter,RLinkr)) then begin
      RLinkr.Comment = Userr.Name;//"Printed Docs";   
      if (RecordStore(RLinkr,true)) then begin  end;
    end;
  END;

return;
end;
