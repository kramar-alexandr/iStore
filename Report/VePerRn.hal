external procedure VEPer_PrintTransaction(record RcVc,record CUVc,record OPrsVc,val,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val);
external procedure VEPer_PrintPayment(record RcVc,record CUVc,record OPrsVc,record BaseCurBlock,
                             var array string,var array val,var array val,var array val,var Integer,
                             var Boolean,var val,var val,var val,var val,var val);
external procedure VEPer_PrintInvoice(record RcVc,record CUVc,record BaseCurBlock,LongInt,
                             var array string,var array val,var array val,var array val,var Integer,
                             var val,var val,var val,var val,var val);
external procedure VEPer_PrintDataForInvoice(record RcVc,record CUVc,record BaseCurBlock,LongInt,
                             val,var Boolean,
                             var array string,var array val,var array val,var array val,var Integer,
                             var val,var val,var val,var val,var val);
external procedure HT2Per(Date, Date , var string);
external procedure VendListTransCLInRevPrepVE(record RcVc,record OPrsVc,record CUVc,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val);
external procedure VendListTransCLIn(record RcVc,record OPrsVc,record CUVc,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val);
external procedure VendListTransCLOut(record RcVc,record OPrsVc,record CUVc,var val,var val,record BaseCurBlock,Integer,var array string,var array val,var array val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,Integer);
external procedure BeginCurncyTotals(var Integer);
external procedure AddCurncyTotals(var array string,var array val,var Integer,string,val);
external procedure PrintCurncyTotals(array string,array val,array val,array val,Integer,Integer,Integer,Integer,Integer,Boolean,Integer);
external procedure GetBaseCurncy(Integer,var string);
external procedure HTDetailLevel(Integer, var string);
external procedure HTVends(string, string, var string);
external procedure HTLevCat(string, var string);
external function Integer GetProgramMode();
external procedure VEGetStartBalance(record CUVc,string,Date ,var val);
external procedure HTCustClass(string,var string);
external procedure HTCustClassType(string,var string);
external function Boolean SetInSet2(string,string);
external procedure ClassTypef(string,string,var Boolean);

procedure VEPer_PrintTotals(record RcVc RepSpec,Boolean custout,Boolean printf,
                            val balp,val totgain,val totloss,val SumDebet,val SumCredit)
BEGIN
  val v;
  
  v = SumCredit - SumDebet;   
  if (custout and (printf or RepSpec.flags[2]==0)) then begin
    Black_Divider(9,1);
    StartFormat(15);
    OutString(6,0,USetStr(3192),false);
    OutVal(3,0,SumDebet,M4Val,true);
    OutVal(4,0,SumCredit,M4Val,true);
    EndFormat;
    if ((RepSpec.flags[2]==0) or (RepSpec.flags[2]==1)) then begin  
      if (totgain<>0) then begin                                          
        StartFormat(15);
        OutString(6,0,USetStr(3200),false);
        OutVal(3,0,totgain,M4Val,true);
        EndFormat;
        v = v + totgain;
      end;  
      if (totloss<>0) then begin                                          
        StartFormat(15);
        OutString(6,0,USetStr(3201),false);
        OutVal(4,0,totloss,M4Val,true);
        EndFormat;
        v = v + totloss;
      end;  
    end;  
  end;  
  StartFormat(5);
  EndFormat;
  v = -v;
  if (printf or RepSpec.flags[2]==0) then begin
    StartFormat(15);
    OutString(6,0,USetStr(3194),false);
    OutVal(3,0,v,M4DVal,true);
    OutVal(4,0,v,M4CVal,true);
    EndFormat;
    StartFormat(15);
    OutString(6,0,USetStr(3195),false);
    OutVal(1,0,balp,M4Val,true);
    EndFormat;      
  end;  
  Gray_Divider(0,1);       
  RETURN;
END;

function val OrderedOPSum(record RcVc RepSpec,record CUVc VEr)
BEGIN
  record BaseCurBlock bascur;
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val res;

  BlockLoad(bascur);
  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (OPrsr.TransType==1) then begin      
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          testf = true;
          if (OPr.RejectedFlag==1) then begin testf = false; end;
          if (OPrsr.TransDate<>OPr.TransDate) then begin testf = false; end;          
          if (OPr.DoneFlag!=0) then begin testf = false; end;          
          if (OPr.OrderedFlag==0) then begin testf = false; end;          
          if (testf) then begin
            rwcnt = MatRowCnt(OPr);
            for (i = 0; i<rwcnt; i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.ovst<>0) then begin goto LORDEREDOPSUMSKIPROW; end;
              if ((OPrw.VISerNr==OPrsr.VINr) and (OPrw.VECode==VEr.Code)) then begin
                if (((OPrw.stp==1) or (OPrw.stp==5)) and (OPrw.ovst==0)) then begin  
                  res = res + OPrw.BankVal;                   
                end;
              end;
LORDEREDOPSUMSKIPROW:;                
            end;
          end;//testf                
        end;
      end;
    end;
  end;
  OrderedOPSum = res;
  return;
END;

global
procedure VendHead(record CUVc VEr,var val startbalp,Integer inbase)
BEGIN
  string 10 curncy;

  StartFormat(15);
  EndFormat;  
  StartFormat(15);  
  OutString(0,"DblCUVc",VEr.Code,false);
  OutString(2,0,VEr.Name,false);        
  OutString(350,0,VEr.VATNr,false);        
  if ((nonblank(VEr.VECurncyCode)) and (inbase==1)) then begin
    OutString(1,0,VEr.VECurncyCode,true);
  end else begin
    GetBaseCurncy(1,curncy);
    OutString(1,0,curncy,true);
  end;  
  EndFormat;    
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(3184),false);
  OutString(90,0,USetStr(2435),false);
  OutString(140,0,USetStr(2436),false);
  OutString(3,0,USetStr(4190),true);
  OutString(4,0,USetStr(4191),true);
  if (inbase==0) then begin
    OutString(420,0,USetStr(3201) & "/" & USetStr(3200),true);
  end;
  OutString(1,0,USetStr(4189),true);
  OutString(1,0,USetStr(2514),true);
  OutString(1,0,USetStr(2445),true);
  OutString(1,0,USetStr(2545),true);
  EndFormat;  
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(6,0,USetStr(4192),false);
  OutVal(1,0,startbalp,M4Val,true);
  EndFormat;  
  RETURN;
END;

procedure VendHead1(record CUVc VEr,var val startbalp,Integer inbase,record RcVc RepSpec)
BEGIN
  string 10 curncy;

  StartFormat(15);
  EndFormat;  
  // Edit Start ---------------------------------------------- Edit Start
	//Thursday, 18 October 2012 13:02:24
	if(RepSpec.Media==2 or RepSpec.Media==20)then begin 
    StartFormat(15); 
    OutString(0,"DblCUVc",VEr.Code,false);
    OutString(2,0,VEr.Name,false);        
    OutString(350,0,VEr.VATNr,false);        
    if ((nonblank(VEr.VECurncyCode)) and (inbase==1)) then begin
      OutString(1,0,VEr.VECurncyCode,true);
    end else begin
      GetBaseCurncy(1,curncy);
      OutString(1,0,curncy,true);
    end;  
    EndFormat;    
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(3184),false);
    OutString(90,0,USetStr(2435),false);
    OutString(140,0,USetStr(2436),false);
    OutString(3,0,USetStr(4190),true);
    OutString(4,0,USetStr(4191),true);
    if (inbase==0) then begin
      OutString(420,0,USetStr(3201) & "/" & USetStr(3200),true);
    end;
    OutString(1,0,USetStr(4189),true);
    OutString(1,0,USetStr(2514),true);
    OutString(1,0,USetStr(2445),true);
    OutString(1,0,USetStr(2545),true);
    EndFormat;  
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(6,0,USetStr(4192),false);
    OutString(1,0,"",true);
    OutString(1,0,"",true);
    
    OutString(1,0,"",true);
    OutString(1,0,"",true);
    OutVal(1,0,startbalp,M4Val,true);
    EndFormat;  
  end else begin
    StartFormat(15); 
    OutString(0,"DblCUVc",VEr.Code,false);
    OutString(2,0,VEr.Name,false);        
    OutString(350,0,VEr.VATNr,false);        
    if ((nonblank(VEr.VECurncyCode)) and (inbase==1)) then begin
      OutString(1,0,VEr.VECurncyCode,true);
    end else begin
      GetBaseCurncy(1,curncy);
      OutString(1,0,curncy,true);
    end;  
    EndFormat;    
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(0,0,USetStr(3184),false);
    OutString(90,0,USetStr(2435),false);
    OutString(140,0,USetStr(2436),false);
    OutString(3,0,USetStr(4190),true);
    OutString(4,0,USetStr(4191),true);
    if (inbase==0) then begin
      OutString(420,0,USetStr(3201) & "/" & USetStr(3200),true);
    end;
    OutString(1,0,USetStr(4189),true);
    EndFormat;  
	// Edit End ---------------------------------------------- Edit End
	
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(6,0,USetStr(4192),false);
    OutVal(1,0,startbalp,M4Val,true);
    EndFormat;  
  end;
  RETURN;
END;

procedure VendListTrans(var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,record CUVc VEr,var val balp,record RcVc RepSpec)
BEGIN
  record OPrsVc OPrsr;
  record BaseCurBlock bascur;
  val StartBal;
  val SumDebet,SumCredit;
  Boolean custout;
  Boolean found;
  val totgain,totloss;
  Boolean printf; 
  
  BlockLoad(bascur);
  custout = false;
  printf = true;
  StartBal = balp;
  if ((RepSpec.flags[1]==0) or (balp<>0)) then begin
    VendHead1(VEr,balp,RepSpec.flags[2],RepSpec);
    custout = true;
  end;

  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
      if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (custout==false) then begin
        VendHead1(VEr,balp,RepSpec.flags[2],RepSpec);
        custout = true;
      end;
      if (OPrsr.TransType==0) then begin
        VEPer_PrintInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit);        
      end;
      if (OPrsr.TransType==1) then begin      
        VEPer_PrintPayment(RepSpec,VEr,OPrsr,bascur,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit);          
      end;
      if (OPrsr.TransType==2) then begin
        VEPer_PrintTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit);        
      end;
      if (OPrsr.TransType==3) then begin
        VendListTransCLOut(RepSpec,OPrsr,VEr,balp,SumDebet,bascur,curcnt,acur,av2,av3);
      end;    
      if (OPrsr.TransType==4) then begin
        VendListTransCLIn(RepSpec,OPrsr,VEr,balp,SumCredit,bascur,curcnt,acur,av2,av3);
      end;    
      if (OPrsr.TransType==5) then begin
        VendListTransCLInRevPrepVE(RepSpec,OPrsr,VEr,balp,SumDebet,bascur,curcnt,acur,av2,av3);
      end;    
    end;
  end;
  VEPer_PrintTotals(RepSpec,custout,printf,balp,totgain,totloss,SumDebet,SumCredit);
//L99:;
  RETURN;
END;

procedure VendListTrans_SortOnInvoice(var array string acur,var array val av1,var array val av2,var array val av3,var Integer curcnt,record CUVc VEr,var val balp,record RcVc RepSpec)
BEGIN
  record OPrsVc OPrsr;
  record BaseCurBlock bascur;
  val StartBal;
  val SumDebet,SumCredit;
  Boolean custout;
  Boolean found;
  val totgain,totloss;
  Boolean printf; 
  
  BlockLoad(bascur);
  custout = false;
  printf = true;
  StartBal = balp;
  if ((RepSpec.flags[1]==0) or (balp<>0)) then begin
    VendHead1(VEr,balp,RepSpec.flags[2],RepSpec);
    custout = true;
  end;

  OPrsr.VECode = VEr.Code;
  OPrsr.TransDate = RepSpec.sStartDate;
  found = true;  
  while (LoopMain(OPrsr,2,found)) begin
    if (found) then begin
      if (OPrsr.VECode<>VEr.Code) then begin
        found = false;
      end;
    end;    
    if (found) then begin
        if (OPrsr.TransDate>RepSpec.sEndDate) then begin found = false; end;
    end;    
    if (found) then begin
      if (custout==false) then begin
        VendHead1(VEr,balp,RepSpec.flags[2],RepSpec);
        custout = true;
      end;
      if (OPrsr.TransType==0) then begin
        if (OPrsr.VINr==OPrsr.TransNr) then begin
          VEPer_PrintInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit);        
          VEPer_PrintDataForInvoice(RepSpec,VEr,bascur,OPrsr.TransNr,StartBal,custout,acur,av1,av2,av3,curcnt,balp,totgain,totloss,SumDebet,SumCredit);
        end;
      end;
      if (OPrsr.TransType==1) then begin      
        if (OPrsr.VINr<=0) then begin
          VEPer_PrintPayment(RepSpec,VEr,OPrsr,bascur,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit);          
        end;
      end;
      if (OPrsr.TransType==2) then begin
        if (OPrsr.VINr<=0) then begin
          VEPer_PrintTransaction(RepSpec,VEr,OPrsr,StartBal,acur,av1,av2,av3,curcnt,custout,balp,totloss,totgain,SumDebet,SumCredit);        
        end;
      end;
      if (OPrsr.TransType==3) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLOut(RepSpec,OPrsr,VEr,balp,SumDebet,bascur,curcnt,acur,av2,av3);
        end;
      end;    
      if (OPrsr.TransType==4) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLIn(RepSpec,OPrsr,VEr,balp,SumCredit,bascur,curcnt,acur,av2,av3);
        end;
      end;    
      if (OPrsr.TransType==5) then begin
        if (OPrsr.VINr<=0) then begin
          VendListTransCLInRevPrepVE(RepSpec,OPrsr,VEr,balp,SumDebet,bascur,curcnt,acur,av2,av3);
        end;
      end;    
    end;
  end;
  VEPer_PrintTotals(RepSpec,custout,printf,balp,totgain,totloss,SumDebet,SumCredit);
  RETURN;
END;

global
procedure VePerRn(record RcVc RepSpec)
BEGIN
  record CUVc VEr;
  record VSVc VSr;
  Boolean TrHs,stfound,testf;
  val sum1;
  val StartBal;
  val DiffBal,EndBal,EndBalPlus,EndBalMinus;
  string 255 frcc,tocc;
  val TotStartBal;
  val TotEndBal;
  val v,t;
  string 255 tstr;
  Integer rw;
  Boolean L33f;
  Integer ProgramType;
  array val av1;
  array val av2;
  array val av3;
  array string 20 acur;
  Integer curcnt;
  record BaseCurBlock bcur;
  
  BlockLoad(bcur);
  ProgramType = GetProgramMode;    
  frcc = FirstInRange(RepSpec.f1,20);
  tocc = LastInRange(RepSpec.f1,20);
  
  BeginCurncyTotals(curcnt);
  StartReportJob(USetStr(4180));
   rw = 1;
   HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;      
   HTDetailLevel(RepSpec.ArtMode,tstr);
   Header(rw,tstr,0);          
   HTVends(frcc,tocc,tstr);
   Header(rw,tstr,1);
   rw = rw + 1;         
   if (nonblank(RepSpec.f2)) then begin
     HTLevCat(RepSpec.f2,tstr);
     Header(rw,tstr,1);
     rw = rw + 1;          
   end;
   if (RepSpec.flags[1]==1) then begin
     tstr = USetStr(6651);
     Header(rw,tstr,1);
     rw = rw + 1;          
   end;
   HTCustClass(RepSpec.f4,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end; 
   HTCustClassType(RepSpec.f5,tstr);
   if (nonblank(tstr)) then begin
     Header(rw,tstr,1);
     rw = rw + 1;
   end;
   if ((RepSpec.flags[2]==1) and (ProgramType<>4)) then begin
     tstr = USetStr(6650);
     Header(rw,tstr,1);
     rw = rw + 1;         
   end;
   if (RepSpec.flags[2]==0) then begin
     tstr = USetStr(2369);
     Header(rw,tstr,1);
     rw = rw + 1;         
   end;
  EndHeader;
  if (RepSpec.wholemonthf==0) then begin
    StartFormat(15);
      OutString(0,0,USetStr(1163),false);
    EndFormat;
    goto L99;
  end;
  
  SetRepCol(2,40);
  SetRepCol(3,288);
  if (RepSpec.ArtMode==0) or (RepSpec.flags[2]==1) then begin
    SetRepCol(4,384);
  end else begin
    SetRepCol(4,358);
  end;
  SetRepCol(5,293);
  SetRepCol(6,50);
  SetRepCol(7,293);
  SetRepCol(8,389);  
  SetRepCol(9,221);  
  if (RepSpec.ArtMode==0) then begin
  StartFormat(15);
  OutString(0,0,USetStr(5223),false);
  OutString(2,0,USetStr(2483),false);
  OutString(3,0,USetStr(2495),true);
  OutString(4,0,USetStr(2496),true);
  OutString(1,0,USetStr(2489),true);
  EndFormat;
    Gray_Divider(0,1);
  end;

  VEr.Code = frcc;
  TrHs = true;
  while (LoopMain(VEr,1,TrHs)) begin
    testf = true;
 // Edit Start ---------------------------------------------- Edit Start
	//Wednesday, 15 June 2011 13:20:31
	 if(currentcompany == 2)then
	begin  
    if((currentuser=="SHEVCHUK") or (currentuser=="MAKAROV"))then begin
      if(VEr.Code!="AIAIAI_IPOINT" and VEr.Code!="DUBLON_IPOINT" and VEr.Code!="SMOBILE_IPOINT" 
      							and VEr.Code!="iCenter" and VEr.Code!="ICENTER_E"  and VEr.Code!="IBEST"  
      							and VEr.Code!="ISTORE"  and VEr.Code!="RADIOLINE"  and VEr.Code!="SB_1995" 
      							and VEr.Code!="PRESTIGE" and VEr.Code!="SRV" and VEr.Code!="ICENTER_SHOPS" 
      							and VEr.Code!="JP" and VEr.Code!="OFI" and VEr.Code!="OFI_E" 
      							and VEr.Code!="OFI_SHOPS" and VEr.Code!="ORION" and VEr.Code!="SE" 
      							and VEr.Code!="TECHNOPORT" and VEr.Code!="MEGABITE" and VEr.Code!="TAXAFON"
      							and VEr.Code!= "UG-KONTRAKT" and VEr.Code != "UG-KONTRAKT_P") then 
      begin
      		testf = false;
      end;
    end;
    end;
    
	// Edit End ---------------------------------------------- Edit End
	
    if (nonblank(tocc)) then begin
      if (VEr.Code>tocc) then begin
        TrHs = false;
      end;
    end;      
    if (TrHs) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>VEr.VECat) then begin testf = false; end;
      end;
    end;    
    if (TrHs==false) then begin testf = false; end;
    if (VEr.VEType==0) then begin testf = false; end;
    if (testf==true) then begin 
      if (nonblank(RepSpec.f4)) then begin
        if (SetInSet2(RepSpec.f4,VEr.Classification)==false) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f5)) then begin
        if (testf) then begin
          testf = false;
          ClassTypef(RepSpec.f5,VEr.Classification,testf);
        end;
      end;
    end;
    if (testf) then begin
      VSr.VECode = VEr.Code;
      stfound = ReadFirstMain(VSr,1,true);
      if (stfound==true) then begin
        if ((RepSpec.flags[2]==1) and (nonblank(VEr.VECurncyCode))) then begin
          VEGetStartBalance(VEr,"vesalesinclvat",RepSpec.sStartDate,StartBal);
          VEGetStartBalance(VEr,"vepaidvalue",RepSpec.sStartDate,v);
          StartBal = StartBal + v;
          EndBal = GetBalance(VEr,"vesalesinclvat",RepSpec.sEndDate);
          v = GetBalance(VEr,"vepaidvalue",RepSpec.sEndDate);
          EndBal = EndBal + v;
          DiffBal = StartBal - EndBal;
        end else begin
          VEGetStartBalance(VEr,"vebalance",RepSpec.sStartDate,StartBal);
          EndBal = GetBalance(VEr,"vebalance",RepSpec.sEndDate);
          DiffBal = StartBal - EndBal;
        end;
      end else begin
        StartBal = 0;
        EndBal = 0;
        DiffBal = 0;
      end;
      TotStartBal = TotStartBal + StartBal;      
      if (RepSpec.ArtMode==0) then begin   
          if (RepSpec.flags[3]==0) then begin
            t = OrderedOPSum(RepSpec,VEr);
            DiffBal = DiffBal - t;
            EndBal = EndBal + t;
          end;
          L33f = false;          
          if (RepSpec.flags[1]<>0) then begin
            if ((StartBal==0) and (DiffBal==0) and (EndBal==0)) then begin L33f = true; end;
          end;  
          if (L33f==false) then begin
             StartFormat(15);
             OutString(0,0,VEr.Code,false);
             OutString(2,0,VEr.Name,false);
             OutVal(3,0,StartBal,M4Val,true);
             DiffBal = -DiffBal;
             OutVal(4,0,DiffBal,M4Val,true);
             OutVal(1,0,EndBal,M4Val,true);
             EndFormat;
             if (EndBal<0) then begin
                EndBalMinus = EndBalMinus + EndBal;
             end else begin
                EndBalPlus = EndBalPlus + EndBal;
             end;   
          end;
          AddCurncyTotals(acur,av1,curcnt,VEr.VECurncyCode,StartBal);
          AddCurncyTotals(acur,av2,curcnt,VEr.VECurncyCode,DiffBal);
          AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,EndBal);
          TotEndBal = TotEndBal + EndBal;                       
      end;      
      if (RepSpec.ArtMode==1) then begin      
         L33f = false;
          if (RepSpec.flags[1]<>0) then begin
            if ((StartBal==0) and (DiffBal==0) and (EndBal==0)) then begin 
              L33f = true; 
            end;
          end;  
          if (L33f==false) then begin
            AddCurncyTotals(acur,av1,curcnt,VEr.VECurncyCode,StartBal);
            EndBal = StartBal;
            if (RepSpec.flags[9]==0) then begin
              VendListTrans(acur,av1,av2,av3,curcnt,VEr,EndBal,RepSpec);
            end else begin
              VendListTrans_SortOnInvoice(acur,av1,av2,av3,curcnt,VEr,EndBal,RepSpec);
            end;
            AddCurncyTotals(acur,av3,curcnt,VEr.VECurncyCode,StartBal);
            TotEndBal = TotEndBal + EndBal;
          end;
      end;      
    end;    
  end;
  if (RepSpec.flags[2]==0) then begin
    StartFormat(15);
    OutString(3,0,USetStr(2495),true);
    OutString(4,0,USetStr(2496),true);
    OutString(1,0,USetStr(2489),true);
    EndFormat;
    Gray_Divider(0,1);
//    v = TotStartBal - TotEndBal;
    v = TotEndBal - TotStartBal;
    StartFormat(15);
    OutString(6,0,USetStr(2429),false);
    OutVal(3,0,TotStartBal,M4Val,true);
    OutVal(4,0,v,M4Val,true);
    OutVal(1,0,TotEndBal,M4Val,true);
    EndFormat;
  end else begin
    StartFormat(15);
    OutString(3,0,USetStr(2495),true);
    OutString(4,0,USetStr(2496),true);
    OutString(1,0,USetStr(2489),true);
    EndFormat;
    Gray_Divider(0,1);
    PrintCurncyTotals(acur,av1,av2,av3,curcnt,3,4,1,6,true,RepSpec.PocketPC);
  end;
  if ((RepSpec.ArtMode==0) and ((EndBalPlus<>0) or (EndBalMinus<>0)))then begin
   StartFormat(15);
    OutString(6,0,USetStr(7324),false);
    OutVal(1,0,EndBalPlus,M4Val,true);
    OutString(6,0,USetStr(7325),false);
    OutVal(1,0,EndBalMinus,M4Val,true);
   EndFormat;
  end;
L99:;  
  EndJob;
  RETURN;
END;
